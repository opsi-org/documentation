////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; crédits: http://www.opsi.org/credits/
////


:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      30.05.2012
:Revision:  1.0.0
:doctype:		book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]



= opsi-winst Tutorial (1.0.0)



// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]



[[opsi-winst-introduction]]
== Introduction

Ce tutoriel devrait vous aider à apprendre certaines fonctionnalités avancées (ex. les listes de chaînes) du langage de script de opsi-winst.

Avant de commencer quelques conseils:

* vous devriez toujours utiliser des constantes de script opsi si elles sont applicables. Par exemple utilisez '%system%' au lieu de 'c:\windows\system32'.

* Vous devez utiliser les manuels opsi-winst pour une description détaillée des commandes de script mentionnés:
** `opsi-winst manual`
** `opsi-winst reference card`

* Vous devez utiliser le produit opsi 'opsi-script-test' comme script de référence qui appelle (presque) chaque commande opsi-winst.

[[opsi-winst-lections]]
== Création de scripts opsi-winst
Vous pouvez utiliser n'importe quel éditeur de texte. Nous vous recommandons d'utiliser l'éditeur jEdit avec la coloration syntaxique opsi-winst intégré.

Pour tester les scripts opsi-winst c'est une bonne idée de les exécuters à partir d'un opsi-winst démarré en manière interactive. (voir: getting-started pour plus de détails)

[[opsi-winst-lection1]]
=== 1. Leçon
Dans la première leçon vous devez simplement lister tous les fichiers de votre répertoire `c:\windows\system32`.

Vous devez utiliser les fonctions opsi-winst suivantes:

* `ShellScript`

[[opsi-winst-lection2]]
=== 2. Leçon
Étendez votre script de la première leçon en attribuant la sortie de votre appel `ShellScript` à une liste de chaînes

Vous devez utiliser les fonctions opsi-winst suivantes:

* `DefStringlist`
* `getOutStreamFromSection`
* `setloglevel = 7`

[[opsi-winst-lection3]]
=== 3. Leçon
Vous devez déterminer le nombre de fichiers dll dans votre `c:\windows\system32` et écrire ce nombre dans le fichier journal.

Étendez votre script de la deuxième leçon en extrayant de votre liste de fichiers une nouvelle liste qui contient seulement les fichiers dll et les compter.

Vous devez utiliser les fonctions opsi-winst suivantes:

* `getListContaining`
* `count`
* `comment`

[[opsi-winst-lection4]]
=== 4. Leçon

Y a t-il un `kernel32.dll` dans votre `c:\windows\system32` et quelle taille il possède ?

Étendez votre script de la troisième leçon en extrayant de votre liste de fichiers une nouvelle chaîne qui contient seulement l'entrée de liste dans le répertoire de `kernel32.dll`. Puis extrayez la taille de cette chaîne.

Vous devez utiliser les fonctions opsi-winst suivantes:

* `TakeFirstStringContaining`
* `SplitStringOnWhiteSpace`
* `TakeString`


[[opsi-winst-lection5]]
=== 5. Leçon
Which `kernel32.dll` is bigger the 32Bit or the 64Bit variant ?

Étendez votre script de la quatrième leçon en exécutant dans un mode différent pout le 32 Bit et le 64 Bit.

Vous devez utiliser les fonctions opsi-winst suivantes:

* `ShellScript winst /64bit`


== Solutions
[[opsi-winst-solution-lection1]]
=== Solution Leçon 1
[source,winst]
----
[Actions]
comment "Show all Systemfiles"
ShellScript_Dir


[ShellScript_Dir]
%systemdrive%
cd %system%
dir
-----
[[opsi-winst-solution-lection2]]
=== Solution Leçon 2
[source,winst]
----
[Actions]
DefStringList $list1$

comment "Show all Systemfiles"
comment "Output from ShellScript is assingned to a list"
set $list1$ = getOutStreamFromSection ("ShellScript_Dir")
		
[ShellScript_Dir]
%systemdrive%
cd %system%
dir
-----
[[opsi-winst-solution-lection3]]
=== Solution Leçon 3
[source,winst]
----
[Actions]
setloglevel = 7
DefVar $DLLCount$
DefStringList $list1$

	
comment "Show all Systemfiles"
comment "Output from ShellScript is setting to a list"
set $list1$ = getOutStreamFromSection ("ShellScript_Dir")
;getListContaining(<list>,<search string>)
;get a partial list with all strings that match <search string>	
comment "list with only DDL-Files"
set $list1$ = getlistContaining ($list1$,".dll")
comment "Number of DDL-Files"
set $DLLCount$ = count ($list1$)
comment "Number of DLL-Files: " + $DLLCount$

[ShellScript_Dir]
%systemdrive%
cd %system%
dir *.*
-----
[[opsi-winst-solution-lection4]]
=== Solution Leçon 4
[source,winst]
----
[Actions]
setloglevel = 7
DefVar $dirline$

DefStringList $list1$

comment "Show all Systemfiles"
;ShellScript_Dir
comment "Output from ShellScript is setting to a list"
set $list1$ = getOutStreamFromSection ("ShellScript_Dir")
;set $list64$ = getOutStreamFromSection ("ShellScript_Dir winst /64bit")
comment "get string kernel32.dll"
set $dirline$ = takeFirstStringContaining ($list1$,"kernel32.dll")
if $dirline$ = ""
 	comment "Kernel32.dll not exist"
else
	set $list1$ = splitStringOnWhiteSpace($dirline$)
	set $dirline$ = takeString (2,$list1$)
	comment "Size of Kernel32.dll: "+$dirline$+" B"
endif

[ShellScript_Dir]
%systemdrive%
cd %system%
dir *.*
-----
[[opsi-winst-solution-lection5]]
=== Solution Leçon 5
[source,winst]
----
[Actions]
setloglevel = 7
DefVar $dirline$
DefVar $dirline64$
DefStringList $list32$
DefStringList $list64$

;search for 32 Bit-Version 
comment "Output from ShellScript is setting to a list"
set $list32$ = getOutStreamFromSection ("ShellScript_Dir")
	comment "get string kernel32.dll"
set $dirline$ = takeFirstStringContaining ($list32$,"kernel32.dll")
if $dirline$ = ""
	comment "Kernel32.dll not exist"
else
	set $list32$ = splitStringOnWhiteSpace($dirline$)
	set $dirline$ = takeString (2,$list32$)
	comment "Size of 32Bit Kernel32.dll: "+$dirline$+" B"
endif

;search for 64 Bit-Version
set $list64$ = getOutStreamFromSection ("ShellScript_Dir winst /64bit")
comment "get string kernel32.dll"
set $dirline64$ = takeFirstStringContaining ($list64$,"kernel32.dll")
if $dirline64$ = ""
	comment "Kernel32.dll not exist"
else
	set $list64$ = splitStringOnWhiteSpace($dirline64$)
	set $dirline64$ = takeString (2,$list64$)
		comment "Size of 64 Bit Kernel32.dll: "+$dirline64$+" B"
endif

if $dirline64$ > $dirline$
	Comment "The 64Bit-Version is " + $dirline64$ + " Byte is larger than the 32Bit-Version with " + $dirline$ + " Byte"
else
	Comment "The 32Bit-Version ist " + $dirline$ + " Byte is larger than the 64Bit-Version with " + $dirline64$ + " Byte"
endif

[ShellScript_Dir]
%systemdrive%
cd %system%
dir *.*
-----

