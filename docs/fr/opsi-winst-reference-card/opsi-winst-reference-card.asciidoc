////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; crédits: http://www.opsi.org/credits/
////


:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      28.09.2011
:Revision:  4.0.1
:doctype:	book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


[[opsi-winst-rc]]
= opsi-winst carte de référence (4.11.1.6)

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]

[[opsi-winst-rc-const]]
== Constantes texte global

[[opsi-winst-rc-const-system1]]
=== Informations Systèmes

[[opsi-winst-rc-const-system2]]
==== Informations Systèmes:

`%ProgramFilesDir%`:	'c:\program files'

`%ProgramFiles32Dir%`:	'c:\Program Files (x86)'	//depuis 4.10.8

`%ProgramFiles64Dir%`:	'c:\program files'	//depuis 4.10.8

`%ProgramFilesSysnativeDir%` :	'c:\program files'	//depuis 4.10.8

`%Systemroot%` :  	'c:\windows'

`%System%` :  	 	'c:\windows\system32'

`%Systemdrive%` :       	'c:'

`%ProfileDir%` :	        'c:\Documents and Settings'

[[opsi-winst-rc-const-common]]
=== répertoires communs (AllUsers) :

`%AllUsersProfileDir%` ou `%CommonProfileDir%` : 'c:\Documents and Settings\All Users'

`%CommonStartMenuPath%` ou `%CommonStartmenuDir%` : 'c:\Documents and Settings\All Users\Startmenu'

`%CommonAppdataDir%` : 'c:\Documents and Settings\All Users\Application Data'

`%CommonDesktopDir%`

`%CommonStartupDir%`

`%CommonProgramsDir%`

[[opsi-winst-rc-const-default]]
=== Répertoires utilisateur par défaut:

`%DefaultUserProfileDir%`  //depuis 4.11.1.1

[[opsi-winst-rc-const-current]]
=== Répertoires utilisateur courant
L'utilisateur est l'utilisateur connecté ou donnés par /usercontext.

`%AppdataDir%` ou `%CurrentAppdataDir%` : 'c:\Documents and Settings\%NOM_D'UTILISATEUR%\Application Data'	//depuis 4.10.8.13

`%CurrentStartmenuDir%` //depuis 4.10.8.13

`%CurrentDesktopDir%`	//depuis 4.10.8.13

`%CurrentStartupDir%`	//depuis 4.10.8.13

`%CurrentProgramsDir%`	//depuis 4.10.8.13

`%CurrentSendToDir%`	//depuis 4.10.8.13

`%CurrentProfileDir%`   //depuis 4.11.2.1

[[opsi-winst-rc-const-allntuser]]
=== constantes répertoire /AllNtUserProfiles :

`%UserProfileDir%` : 'c:\Documents and Settings\%NOM_D'UTILISATEUR%' +
ou +
`%CurrentProfileDir%`                               // depuis 4.11.2.1

[[opsi-winst-rc-const-winstpath]]
=== Répertoire et chemins de Winst

`%ScriptPath% ou %ScriptDir%`

`%ScriptDrive%`

`%WinstDir%`

`%WinstVersion%`	//depuis 4.10.8.3

`%Logfile%`

`%opsiScriptHelperPath%`   // depuis 4.11.3.2

[[opsi-winst-rc-const-network]]
=== Informations réseaux

`%Host%` :	valeur de la variable d'environnement HOST.

`%PCName%`:	valeur de la variable d'environnement PCNAME, ou si absent COMPUTERNAME.

`%Username%` :	Nom de l'utilisateur actuel

`%IPAddress%` : peut-être l'adresse IP de la machine. Utilisez la fonction `getMyIpByTarget()` à la place.

[[opsi-winst-rc-const-service]]
=== Donneés du service

`%HostID%` :	FQDN du client

`%opsiserviceURL%`

`%opsiServer%`

`%opsiserviceUser%`

`%opsiservicePassword%`

`%installingProdName%`: 	id du produit		//depuis 4.10.8

`%installingProdVersion%`:	version du produit	//depuis 4.10.8

`%installingProduct%` :	id du produit (obsolete)

[[opsi-winst-rc-primary-sections]]
== Dans les Sections primaires

[[opsi-winst-rc-primary-sections-kind]]
=== Types de sections primaires

`[Initial]`

`[Actions]`

`[sub`<identifiant>`]`

`sub` <nom du fichier>

`[ProfileActions]`

[[opsi-winst-rc-winst-control]]
=== Contrôle de Winst

`LogLevel`  (obsolete)

`SetLogLevel` = <nombre> ou `SetLogLevel` = <chaîne>
[source,winst]
----
SetLogLevel = 7
SetLogLevel = "7"
----

`ExitOnError` = <valeur booléenne>

`ScriptErrorMessages =` <valeur booléenne>

`FatalOnSyntaxError =` <valeur booléenne>  //depuis 4.11.3.2

`Message` <chaîne> ou `Message` = <constante chaîne>

`ShowMessageFile` <chaîne>

`ShowBitMap`  [<nom du fichier>] [<sous titre>]

`comment` <chaîne> ou `comment` = <constante chaîne>

`LogError` <chaîne> ou `LogError` = <constante chaîne>

`LogWarning` <chaîne> ou `LogWarning` = <constante chaîne>

`Pause` <chaîne> ou `Pause` = <constante chaîne>

`Stop` <chaîne> ou `stop` = <constante chaîne>

`include_insert` <nom de fichier> // depuis 4.11.3

`include_append` <nom de fichier> // depuis 4.11.3

`NormalizeWinst` // depuis 4.11.3: (set normal window state)

`IconizeWinst` // (définir l'état de la fenêtre réduite)

`RestoreWinst` // (définir l'état de la fenêtre maximisé)

`SetSkinDirectory` <chemin vers skin.ini> // depuis 4.11.3.5

[[opsi-winst-rc-var]]
=== Variables

[[opsi-winst-rc-var-strings]]
==== Chaînes de caractères

`DefVar` <nom de la variable>

`Set` <nom de la variable> `=` <valeur>

[[opsi-winst-rc-var-stringlists]]
==== Listes de chaînes de caractères

`DefstringList`  <nom de la variable>

[[opsi-winst-rc-func]]
=== Fonctions

[[opsi-winst-rc-func-string]]
==== Fonctions sur les chaînes

[[opsi-winst-rc-important]]
===== Important

`GetMsVersionInfo` //Informations sur la version de Windows

`GetSystemType`    //OS Architecture (32/64)

`GetRegistrystringvalue (`"[key] var"`)`

`GetRegistryStringValue32 (`"[key] var"`)`   //depuis 4.10.8

`GetRegistryStringValue64 (`"[key] var"`)`   //depuis 4.10.8

`GetRegistryStringValueSysNative (`"[key] var"`)`    //depuis 4.10

`GetvalueFromInifile (` fichier, section, clef, valeur par défaut `)`
[source,winst]
----
GetValueFromInifile("mon_fichier","ma_section","ma_clef","")
----

`GetProductProperty (`<Nom_de_la_proprietè>, <Valeur_par_défaut> `)`

`trim(`<chaîne>`)`

`lower(`<chaîne>`)`

`unquote(`<chaîne>,<chaîne-cote>`)`  //depuis 4.11.2.1 

`stringReplace(`<chaîne>, <ancien modèle>, <nouveau modèle>`)`  //depuis 4.11.3

`strLength(`<chaîne>`)`  //depuis 4.11.3

`strPos(`<chaîne>, <sous-chaîne>`)`  //depuis 4.11.3

`strPart(`<chaîne>, <position de départ>, <nombre de caractères>`)`  //depuis 4.11.3

`getValue(`<clef chaîne>, <liste de chaînes de hachage> `)`

`getValueBySeparator(`<clef chaîne>,<chaîne de séparation>,<liste de chaînes de hachage> `)` //depuis 4.11.2.1

`getLastExitCode`

[[opsi-winst-rc-spec-license-management]]
===== Spécial: Gestion des licences

`DemandLicenseKey(` poolId [, productId [,windowsSoftwareId]] `)`
[source,winst]
----
set $mykey$ = DemandLicenseKey ("", "office2007")
----

`FreeLicense (`poolId [, productId [,windowsSoftwareId]]`)`
[source,winst]
----
set $result$ = FreeLicense("", "office2007")
----

[[opsi-winst-rc-spec-usercontext]]
===== Spécial: Contexte utilisateur

`GetUserSID(`<Nom d'utilisateur Windows>`)`

`GetLoggedInUser`   //depuis 4.11.1.2

`GetUsercontext`   //depuis 4.11.1.2

`GetScriptMode`  valeurs possibles 'Machine','Login' //depuis 4.11.2.1

`saveVersionToProfile` - sauvegarder productversion-packageversion dans le profil local //depuis 4.11.2.1

`readVersionFromProfile` : chaîne - lire productversion-packageversion depuis le profil local //depuis 4.11.2.1

`scriptWasExecutedBefore` : booléen - est vrai si productversion-packageversion sauvegardés et en cours d'exécution sont identiques //depuis 4.11.2.1

[[opsi-winst-rc-other]]
===== Autres

`GetHostsName (`<nom de l'hôte> `)`

`GetHostsAddr (`<adresse de l'hôte> `)`

`GetMyIpByTarget(`<adresse ip cible>`)` //depuis 4.11.3

`ExtractFilePath (`<chemin>`)`

`calculate(`<expression de chaîne arithmétique>`)` // depuis 4.11.3.5 : connaît: `+-*/()`

`DecStrToHexStr (` <chaîne décimale>, <longueur hexadécimale>`)`

`HexStrToDecStr (`<chaîne hexadécimale>`)`

`base64EncodeStr(`<chaîne>`)` 

`base64DecodeStr(`<chaîne>`)` 

`convert2Jsonstr(`<chaîne>`)`  //depuis 4.10.8.3

`RandomStr`

`CompareDotSeparatedStrings(`<chaîne1>, <chaîne2>`)`

`CompareDotSeparatedNumbers(`<chaîne1>, <chaîne2>`)`

`EnvVar (`<variable d'environnement>`)`

`ParamStr`

`getDiffTimeSec` (Temps en secondes depuis le dernier marktime) //depuis 4.11.3

`SidToName(`<sid connu>`)` //depuis 4.11.3: gives localized name of the sid

`GetMyIpByTarget(`<adresse ip cible>`)` //depuis 4.11.3.2

`GetIpByName(`<ip addr / ip name>`)` //depuis 4.11.3.2

[[opsi-winst-rc-deprecated]]
===== Obsolète

`GetOS`

`GetNtVersion`

`IniVar (`<clef>`)` :	(obsolète; utilisez GetProductProperty)

`SubstringBefore (`<chaîne1>, <chaîne2>`)`

[[opsi-winst-rc-func-stringlist]]
==== Fonctions sur les listes de chaîne

===== Important

`splitString (`<chaîne1>, <chaîne2>`)`
[source,winst]
----
set $list1$ = splitString ("\\server\share\dir","\")
----

`splitStringOnWhiteSpace (`<chaîne>`)`

`loadTextFile (`<nom de fichier>`)`

`loadUnicodeTextFile (`<nom de fichier>`)`

`composeString (`<liste de chaîne>, <lien>`)`

`takeString (`<Indice>, <liste>`)`

`takeFirstStringContaining(`<liste>,<chaîne de recherche>`)`

`getOutStreamFromSection (`<nom de section dos>`)`
[source,winst]
----
getOutStreamFromSection ('DosBatch_try')
----

`getReturnListFromSection (`<nom de section xml>`)`

`getListContaining(`<liste>,<chaîne de recherche>`)`

`count (`<liste>`)`

`for %`<identifiant>`% in` <liste> `do` <une déclaration | sous section>
[source,winst]
----
for %s% in $list1$ do sub_test_string
----

`GetProcessList`   //depuis 4.11.1.2; donne la liste des exename;pid;dom/user

`getProductPropertyList(`<nom de la propriété>,<valeur par défaut>`)`  //depuis 4.11.3

`getRegistryKeyList32(`<clé de registre>`)` //depuis 4.11.3

`getRegistryKeyList64(`<clé de registre>`)` //depuis 4.11.3

`getRegistryKeyListSysnative(`<clé de registre>`)` //depuis 4.11.3

`getRegistryVarList32(`<clé de registre>`)`  //depuis 4.11.3

`getRegistryVarList64(`<clé de registre>`)` //depuis 4.11.3

`getRegistryVarListSysnative(`<clé de registre>`)` //depuis 4.11.3

`getProfilesDirList` //depuis 4.11.3.2

===== Infomaps

`GetLocaleInfoMap`

`GetMSVersionMap`

`getFileInfoMap(` <nom de fichier> `)`

`getProductMap`  // depuis 4.11.2.1 +
les clés sont: id, name, description, advice, productversion, packageversion, priority, installationstate, lastactionrequest, lastactionresult, installedversion, installedpackage, installedmodificationtime

`getRegistryVarMap32(`<regkey>`)`  //depuis 4.11.3

`getRegistryVarMap64(`<regkey>`)` //depuis 4.11.3

`getRegistryVarMapSysnative(`<regkey>`)` //depuis 4.11.3

===== Autre

`createStringList (`<chaîne0>, <chaîne1> ,... `)`
[source,winst]
----
set $list1$ = createStringList ('a','b')
----

`reverse (`<liste>`)`

`getSectionNames(`<fichier-ini>`)`

`retrieveSection (`<nom de la section>`)`

`getSubList (`<indice de depart>, <indice de fin>, <liste>`)`

`addtolist(`<liste>,<chaîne>`)`	 //depuis 4.10.8

`addListToList(`<liste de destination>,<liste source>`)`	 //depuis 4.10.8


[[opsi-winst-rc-func-bool]]
==== Opérateurs boléens et fonctions

<chaîne1> `=` <chaîne2>

<boléen1> `AND` <boléen2>

<boléen1> `OR` <boléen2>

`NOT`(<boléen3>)

`FileExists (`<nom de fichier>`)`

`FileExists32 (`<nom de fichier>`)`

`FileExists64 (`<nom de fichier>`)`

`FileExistsSysNative (`<nom de fichier>`)`

`LineExistsIn (`<chaîne>, <nom de fichier>`)`

`LineBeginning_ExistsIn (`<chaîne>, <nom de fichier>`)`

`XMLAddNamespace(`<nom de fichier XML>, <nom de l'element XML>, <nom de l'espace XML>`)`

`XMLRemoveNamespace(`<nom de fichier XML>, <nom de l'element XML>, <nom de l'espace XML>`)`

`HasMinimumSpace (`<lettre de lecteur>, <capacitè>`)`

Exemple:
[source,winst]
----
if not (HasMinimumSpace ("%SYSTEMDRIVE%", "500 MB"))
   LogError "L'espace requis de 500 MB n'est pas disponible dans %SYSTEMDRIVE%"
   isFatalError
endif
----

`opsiLicenseManagementEnabled`

`runningAsAdmin`    //depuis 4.11.1.1

`isLoginScript`    //depuis 4.11.2.1

`contains(`<chaîne>, <sous-chaîne>`)`  //depuis 4.11.3: vrai si <sous-chaîne> dans <chaîne>

`isNumber(`<chaîne>`)` //depuis 4.11.3: vrai si <chaîne> représente un nombre entier

[[opsi-winst-rc-func-misc]]
==== fonctions divers

`Killtask` <nom du processus>

`requiredWinstVersion` <opérateur relationnel> <version>
[source,winst]
----
requiredWinstVersion >= "4.10"
----

`includelog` <nom de fichier> <taille de queue>   //depuis 4.11.2.1
[source,winst]
----
includelog "%Scriptpath%\test-files\10lines.txt" "5"
----

[[opsi-winst-rc-flow-control]]
==== contrôle de flux

'if - else - endif'

Syntaxe:

`if` <condition> +
  ;déclaration(s) +
[`else` +
  ;déclaration(s)] +
`endif`

Exemple:
[source,winst]
----
Set $NTVer$ = GetMsVersionInfo
if ( $NTVer$ >= "6" )
     sub_install_win7
else
  if ( $NTVer$ = "5.1" )
    sub_install_winXP
  else
    stop "La version de l'OS n'est pas supporté"
  endif
endif
----

`isFatalError`

`isFatalError` <chaîne>  //depuis 4.11.3.2

`ExitWindows /Reboot`

`ExitWindows /ImmediateReboot`

`ExitWindows /ImmediateLogout`

`ExitWindows /ShutdownWanted`

`ExitWindows /RebootWanted` (deprecated, acts like /Reboot)

`sleepSeconds` <nombre entier>

`ChangeDirectory` <répertoire>   //depuis 4.11.2.6

[[opsi-winst-rc-secondary-sections]]
== Sections Secondaire:

[[opsi-winst-rc-winbatch]]
=== Winbatch

Fonction: exécuter les programmes via l'API de Windows

`[WinBatch`<identifiant>`]` 

Modificateur:

`/LetThemGo`

`/WaitForProcessEnding` "<program.exe>"

`/TimeOutSeconds` <secondes>

`/WaitForWindowAppearing` <titre de la fenêtre> ('ne fonctionne pas avec les programmes 64 Bit')

`/WaitForWindowVanish` <titre de la fenêtre> ('ne fonctionne pas avec les programmes 64 Bit')

`/RunElevated` // depuis 4.11.3: seulement >= NT6 ; pas d'accès réseau

`/RunAsLoggedOnUser` // depuis 4.11.3.5 ; fonctionne uniquement à l'intérieur de 'userLoginScripts'

`/32Bit`	 //depuis 4.11.3.5 

`/64Bit`	 //depuis 4.11.3.5 

`/SysNative`	 //depuis 4.11.3.5

[[opsi-winst-rc-dosbatch]]
=== DosBatch et DosInAnIcon

Fonction: exécuter la section via cmd.exe

`[DosBatch`<identifiant>`]` <paramètres optionnels> <winst <modifier>>

`[DosInAnIcon`<identifiant>`]` <paramètres optionnels> <winst <modifier>>

Modificateur:  //depuis 4.11.1.1

`/32Bit` 

`/64Bit` 

`/SysNative`

Les modificateurs doivent être séparé des paramètres par 'winst'.
[source,winst]
----
DosInAnIcon_do_64bit_stuff winst /64Bit
----

Commandes:
voir le manuel

[[opsi-winst-rc-execwith]]
=== ExecWith

Fonction: Exécuter la section via n'importe quel interpréteur

`[ExecWith`<identifiant>`]` <chemin de l'interpréteur>

Modificateur:

`/LetThemGo`

`/EscapeStrings`

`/32Bit`	 //depuis 4.11.3.5 

`/64Bit`	 //depuis 4.11.3.5 

`/SysNative`	 //depuis 4.11.3.5

Les modificateurs doivent être séparées des paramètres par le mot 'winst'. L'exemple suivant appelle la version 64 bits de powershell.exe.
[source,winst]
----
ExecWith_do_64bit_stuff "%System%\WindowsPowerShell\v1.0\powershell.exe" winst /64Bit
----

Commandes:
voir le manuel

[[opsi-winst-rc-files]]
=== Fichiers

Fonction: Operations sur les fichiers

`[Files`<identifiant>`]` 

Modificateur:

`/AllNTUserProfiles`

`/AllNTUserSendTo`

`/32Bit` 	//depuis 4.10.8

`/64Bit` 	//depuis 4.10.8

`/SysNative`	//depuis 4.10.8

Commandes:

`checkTargetPath =` <répertoire de destination>

`copy` [Options] <fichier(s) source> <répertoire de destination>

quelques options: 

`-s` récursif

`-V` contrôle de version contre répertoire cible

`-v`  contrôle de version contre répertoire cible, %systemroot% et %system% *(ne l'utilisez pas)*

`-c` continuer sans redémarrer, même si cela est nécessaire

`-d` vérification de la date

`-u` mise à jour

`-x` extraire

`-w` weak (ne pas écraser les fichiers protégés)

`-n` ne pas écraser

`-r` copier attribut lecture seule


`delete` [Options] <chemin[/masque]]

certaines options: `-s` récursive `-f` force 

Exemple (*ne pas oublier la barre oblique inverse*): +
`delete -sf c:\supprimer_ce_répertoire\`

`del` [Options] <chemin[/masque]]   //depuis 4.11.2.1

Fonctionne comme `delete` mais sur +
`del -s -f c:\not-exists` +
si +c:\not-exists+ n'existe pas il ne cherche pas +c:\+ pour +not-exits+  

Exemple (*ne pas oublier la barre oblique inverse*): +
`del -sf c:\supprimer_ce_répertoire`



[[opsi-winst-rc-registry]]
=== Registre

Fonction: modifier le registre

Méthode standard: +
`[Registry`<identifiant>`]` +
travaille en collaboration avec la section spécifiée.

Autre méthode: +
`Registry  loadUnicodeTextFile(`<.fichier reg>`) /regedit` +
importer le spécifiée <.fichier reg>.

Autre méthode (obsolete): +
`Registry  loadUnicodeTextFile(`<.addreg file>`) /addreg` +
importer le spécifiée <.addreg file>.

Modificateur:

`/AllNTUserDats`

`/32Bit` 	//depuis 4.10.8

`/64Bit` 	//depuis 4.10.8

`/SysNative`	//depuis 4.10.8

Commandes:

`OpenKey` <Clef>
[source,winst]
----
openkey [HKLM\Software\opsi.org]
----

`Set` <nom de variable> `=` <type de registre>:<valeur>

`Add` <nom de variable> `=` <type de registre>:<valeur>

Exemples de types de registre:
[source,winst]
----
set "var1" = "my string"
set "var2" = REG_SZ:"my string"
set "var3" = REG_EXPAND_SZ:"%ProgramFiles%"
set "var4" = REG_DWORD:123	(Decimal)
set "var5" = REG_BINARY:00 01 02 0F 10
set "var6" = REG_MULTI_SZ:"A|BC|de"
----

`Supp` <nom de variable> <list char> <supplément>
[source,winst]
----
supp "Path" ; "C:\utils; %JAVABIN%"
----

`GetMultiSZFromFile` <nom de variable> <nom de fichier>

`SaveValueToFile` <nom de variable> <nom de fichier>

`DeleteVar` <nom de variable>

`DeleteKey` <clef de registre>  (ne fonctionne pas avec /AllNTUserDats)

[[opsi-winst-rc-patches]]
=== Correctifs

Fonction: modifier fichiers Ini

`[Patches`<identifiant>`]` <nom de fichier>

Modificateur:

`/AllNTUserProfiles`  //depuis 4.11.3

Commandes:

`add [`<nom de section>`]` <variable1> `=` <valeur1>

`set [`<nom de section>`]`<variable1> `=` <valeur1>

`addnew [`<nom de section>`]`<variable1> `=` <valeur1>

`change [`<nom de section>`]`<variable1> `=` <valeur1>

`del [`<nom de section>`]` <variable1> `=` <valeur1>

`del [`<nom de section>`]` <variable1>

`delsec [`<nom de section>`]`

`replace` <variable1>`=`<valeur1> <variable2>`=`<valeur2>

[[opsi-winst-rc-patchtextfile]]
=== PatchTextFile

Fonction: modifier fichier de texte

`[PatchTextFile`<identifier>`]` <nom du fichier>

Modificateur:

`/AllNTUserProfiles`  //depuis 4.11.3.4

Commandes:

`Set_Mozilla_Pref (`"<type de préférence>", "<clé de préférence>", "<valeur de préférence>"`)` +
les types de préférences sont généralement: +
`pref`, `user_pref`, `lock_pref`

`AddStringListElement_To_Mozilla_Pref (`"<type de préférence>", "<clé de préférence>", "<ajouter la valeur>"`)`

`Set_Netscape_User_Pref (`"<clef>", "<valeur>"`)`  ('obsolete')

`AddstringListElement_To_Netscape_User_Pref`  ('obsolete')

`FindLine` <chaîne de recherche>

`FindLine_StartingWith` <chaîne de recherche>

`FindLine_Containing` <chaîne de recherche>

`GoToTop`

`AdvanceLine` [<nombre de lignes>]

`GoToBottom`

`DeleteTheLine`

`AddLine_` <ligne> 	ou `Add_Line_` <ligne>

`InsertLine` <ligne>    	ou `Insert_Line_` <ligne>

`AppendLine` <ligne> 	ou `Append_Line` <ligne>

`Append_File` <nom du fichier>

`Subtract_File` <nom du fichier>

`SaveToFile` <nom du fichier>

`Sorted`

[[opsi-winst-rc-LinkFolder]]
=== LinkFolder

Fonction: Menu Démarrer + les icônes du bureau

`[LinkFolder`<identifiant>`]`

Commandes:

`set_basefolder` <répertoire systeme>

`set_subfolder` <chemin du répertoire>

----
set_link
  name:        <nom du lien>
  target:      <chemin et nom du programme>
  parameters:  [arguments de la ligne de commande]
  working_dir: [répertoire de travaille]
  icon_file:   [chemin et nom du fichier icone, défaut=target]
  icon_index:  [nombre d'icône dans le dossier des icônes, défaut=0]
end_link
----

`delete_element`   <nom du lien>

`delete_subfolder` <chemin du répertoire>

Les dossiers prédéfinis du système virtuel qui peuvent être utilisés sont: +
`desktop, sendto, startmenu, startup, programs, desktopdirectory`, +
`common_startmenu, common_programs, common_startup, common_desktopdirectory`

Exemple
[source,winst]
----
set_basefolder common_desktopdirectory
set_subfolder ""
set_link
  name: opsi-winst
  target: "%ProgramFiles32Dir%\opsi.org\opsi-client-agent\opsi-winst\winst32.exe"
end_link
----

Les dossiers prédéfinis de systèmes virtuels: +
`desktop, sendto, startmenu, startup, programs, desktopdirectory` +
pointent vers les dossiers de l'utilisateur qui exécute le script.
Si vous l'utilisez dans un userLoginScript avec l'extension opsi 'Gestion des profils utilisateur' ces dossiers virtuels pointer vers le dossier de l'utilisateur qui vient de se connecter.

[[opsi-winst-rc-OpsiServiceCall]]
=== OpsiServiceCall

Fonction: service d'accès opsi

`[OpsiServiceCall`<identifiant>`]`

Commandes:
voir le manuel

[[opsi-winst-rc-PatchHosts]]
=== PatchHosts

Fonction: Éditer des fichiers hôtes

`[PatchHosts`<identifiant>`]`

Commandes:

`setaddr`  <nom d'hôte> <adresse IP>

`setname` <adresse IP> <nom d'hôte>

`setalias` <nom d'hôte> <alias>

`setalias` <adresse IP> <alias>

`delalias` <nom d'hôte> <alias>

`delalias` <adresse IP> <alias>

`delhost` <nom d'hôte>

`delhost` <adresse IP>

`setComment` <identifiant> <commentaire>

[[opsi-winst-rc-XMLPatch]]
=== XMLPatch

Fonction: modifier les fichiers XML

`[XMLPatch`<identifiant>`]`

Commandes:
voir le manuel

[[opsi-winst-rc-ExecPython]]
=== ExecPython

Fonction: Exécutez la section via l'interpréteur python

`[ExecPython`<identifier>`]`

Commandes:
voir le manuel

[[opsi-winst-rc-LdapSearch]]
=== LdapSearch

Fonction: lire depuis LDAP

`[LdapSearch`<identifiant>`]`

Commandes:
voir le manuel


