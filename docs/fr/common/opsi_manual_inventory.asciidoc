////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; crédits: http://www.opsi.org/credits/
////

:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      03.10.2012
:Revision:  4.0.2
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-inventory]]
== Inventaire

L'inventaire peut être ordonnée avec les produits Localboot `hwaudit` et `swaudit` ou avec le produit Netboot `hwinvent`.

[[opsi-manual-inventory-hard]]
=== Inventaire Hardware

L'inventaire matériel est contrôlé par un fichier de configuration opsi.  Cela signifie que les informations sur lesquelles les données seront compilées ne sont pas enchâssé dans
les produits correspondants `hwaudit` et `hwinvent`.  En fait, les produits seront contrôlées par un fichier de configuration.  Le fichier de configuration sera appelée et interprété
avec chaque envoi du service Web.  Simultanément, le fichier de configuration détermine la structure de la base de données, de sorte qu'un changement de ce fichier de configuration
modifiera le schéma de base de données.


Le fichier de configuration est `/etc/opsi/hwaudit/opsihwaudit.conf`. +
Tous le objets inventoriés sont définis et décrits dans ce fichier, comme la façon dont ces objets et leurs données sont instanciées (sous Linux et Windows).  Ce fichier va
également définir la structure de donnée associée.  Pour être plus précis, ce fichier de configuration contient les définitions d'héritage orienté objet.
La raison à cela est le fait que beaucoup d'objets contiennent des identiques champs de données (ex. comme `Nom` et `Vendeur`).  Les informations générales seront définies
dans des classes de base 'virtual' du matériel.  Le objets d'inventaire réels sont alors des classes 'structural' du matériel, lorsque de nombreuses propriétés pourraient éventuellement être héritée
de la substitution des classes de base 'virtual'.


L'exemple suivant peut être instructif: +
Dans un premier temps le fichier de configuration définit une 'virtual Class' appelé '"BASIC_INFO"'. Celle-ci définit les propriétés ('Values'):

* "name"

* "description"

Vient ensuite la 'virtual Class' appelé '"HARDWARE_DEVICE"', qui hérite de tous les paramètres supplémentaires de '"BASIC_INFO"', et inclut les éléments suivants:

* "vendor"

* "model"

* "serialNumber"

Suivant suit le premier objet qui se trouve dans l'inventaire, qui est la première 'structural Class' appelé '"COMPUTER_SYSTEM"',
qui hérite de l'ensemble des paramètres supplémentaires de '"HARDWARE_DEVICE"', elle est définie (et écrase les propriétés) comme:

* "name"

* "systemType"

* "totalPhysicalMemory"

La définition de la classe comprendra une description de différents paramètres et leur 'Values':

* Définition de la classe: +
**  "Type" +
est "STRUCTURAL" ou  "VIRTUAL"
** "Super" +
cette classe dont elle va être héritée.
** "Opsi" +
donne la nom de la classe, qui sera utilisé par la suite dans opsi comme un nom d'affichage.

De plus, la définition de classe permet de définir la manière dont les données seront compilées.  Ces informations peuvent également être trouvés dans la définition de 'Values'.

* Pour l'inventaire sous Linux:

** "Linux":  "[<commande>]<paramètre>" +
Exécute la commande <commande> sur la ligne de commande, avec l'argument <paramètre>.

** "Python": "<code python avec espace réservé>" +
Exécute le code Python dont la sortie sera placé dans l'espace réservé qui est comprise entre les signes "#" (voir l'exemple ci-dessous).

* Pour l'inventaire sous Windows:

** "WMI": "<wmi select statement>" +
WMI s'exécute lorsqu'il est appelé

** "Cmd": "<Objet texte Python avec espace réservé>" +
Dans ce cas, c'est le chemin relatif au programme exécutable Python, dont la sortie sera placé dans l'espace réservé.

** "Registry": "[<clé de registre>] <nom de la valeur>" +
La valeur de <nom de la valeur> sera lu à partir de la base de registre, et donne le nom de la clé <clé de registre>. +
Le registre doit être lu d'une manière spécifique à l'architecture.  Cela signifie que le secteur 64 bits seront lus sur un système 64 bits.


* Définition de la valeur:

** "Type":   "<MySQL Database type>" +
<MySQL Database type> donne le type de base de données MySQL qui sera appliqué à cette valeur (ex. une chaîne Python sera "<MySQL Datenbase type>"="varchar(200)").

** "Scope":  "<portée>" +
Le champ <portée> sera utilisé de la manière suivante: +
"g" signifie:  Cet attribut est le même dans tous les liens de ces types. +
"i" signifie:  Cet attribut peut avoir différents types de valeurs avec ces liens.

** "Opsi":   "<id>" +
"<id>" est le nom interne des champs.  Cela peut être trouvé dans le fichier situé dans `/etc/opsi/hwaudit/locales` .

** "WMI":    "<id ou commande>" +
<id ou commande> est soit le nom d'une commande WMI qui affiche la valeur ou une seule commande WMI.  Si la commande WMI est donnée dans la définition de classe (ex. "select * from Win32_ComputerSystem") ,
les résultats sont attribués aux variables "WMI" dans la définition de la classe "Values" .  S'il n'y a pas de commande WMI, les variables "WMI" dans la section "Values" sont des commandes WMI (voir l'exemple ci-dessous).

** "Linux":  "<id>" +
Cela fait partie de la définition de classe, <id> est le nom de la valeur affichée lorsque la commande Linux est donnée.

** "Condition": "<condition>" +
<condition> est une condition qui doit être remplie, avec laquelle les 'Value' seront déterminés.  Ainsi, par exemple si la <condition> est définie comme "vendor=[dD]ell*", ensuite les valeurs de "vendor" doivent contenir 'Dell' ou 'dell'.

Voici un exemple de la classe "COMPUTER_SYSTEM":
[source,shell]
----
{
   "Class": {
      "Type":   "STRUCTURAL",
      "Super":  [ "HARDWARE_DEVICE" ],
      "Opsi":   "COMPUTER_SYSTEM",
      "WMI":    "select * from Win32_ComputerSystem",
      "Linux":  "[lshw]system"
   },
   "Values": [
      {
         "Type":   "varchar(100)",
         "Scope":  "i",
         "Opsi":   "name",
         "WMI":    "Name",
         "Linux":  "id"
      },
      {
         "Type":   "varchar(50)",
         "Scope":  "i",
         "Opsi":   "systemType",
         "WMI":    "SystemType",
         "Linux":  "configuration/chassis"
      },
      {
         "Type":   "bigint",
         "Scope":  "i",
         "Opsi":   "totalPhysicalMemory",
         "WMI":    "TotalPhysicalMemory",
         "Linux":  "core/memory/size",
         "Unit":   "Byte"
      },
      {
         "Type":   "varchar(50)",
         "Scope":  "i",
         "Opsi":   "dellexpresscode",
         "Condition": "vendor=[dD]ell*",
         "Cmd":	"#dellexpresscode\dellexpresscode.exe#.split('=')[1]",
         "Python":  "str(int(#{'COMPUTER_SYSTEM':'serialNumber','CHASSIS':'serialNumber'}#,36))"
      }
   ]
},
----
En ce qui concerne les commandes "WMI", la définition de classe contient "select * from Win32_ComputerSystem".  Cette commande est exécutée par WMI,
qui comporte des colonnes de sortie "Name", "SystemType", et "TotalPhysicalMemory".  Ces valeurs sont ensuite affectés aux valeurs de opsi "name",
"systemType", et "totalPhysicalMemory".

Particulièrement intéressant est ici la dernière valeur "dellexpresscode": +
Ceci est vraiment utile quand l'IT s'interroge sur un ordinateur Dell, sur son état. +
Le programme en ligne de commande `dellexpresscode.exe` a été conçu pour Windows, et indique à `hwaudit.exe` que les dellexpresscode est fourni dans le répertoire `dellexpresscode\`.
Les éléments entre '\#' sont des espaces réservés pour la sortie.  Ainsi, la déclaration "#dellexpresscode\dellexpresscode.exe#" exécute `dellexpresscode.exe`, et
produit une sortie sous la forme : 'dellexpresscode=123456789'.  La valeur qui sera utilisé est l'une après la séparation sur l'espace réservé '=', ce qui est fait en Python en utilisant la méthode split () comme tel `.split('=')[1]` .
Sous Linux, on trouvera une valeur pour 'serialNumber' pour les éléments ('COMPUTER_SYSTEM' ou 'CHASSIS'), qui est ensuite utilisé pour attribuer les codes Dell Express.  L'appel 'int(,36)' convertit la sortie 'nombre entier' en base-36.

Les noms opsi des valeurs seront convertis en utilisant les fichiers trouvés dans `/etc/opsi/hwaudit/locales/*`.
Le fichier `/etc/opsi/hwaudit/locales/en_US` peut contenir des traductions telles que:
----
COMPUTER_SYSTEM = Computer
COMPUTER_SYSTEM.systemType = Type
----
Le nom de la classe COMPUTER_SYSTEM sera traduit en "Computer".  L'attribut Opsi "systemType" de la classe COMPUTER_SYSTEM sera traduit en "Type" pour l'anglais.  Si
l'on regarde dans le fichier `/etc/opsi/hwaudit/locales/de_DE`, on verrait que l'attribut "COMPUTER_SYSTEM.systemType" sera traduit en "Typ" pour l'allemand.
Enfin, une autre suggestion:  Lorsqu'un nouveau champ est créé, il doit être placé dans ces fichiers, même si ne traduit pas explicitement le terme.
Ceci évite tous les messages de "'Warning'".

Le code source de ces paquets peut être trouvé ici: +
link:https://github.com/opsi-org/hwaudit[opsi-org/hwaudit]


[[opsi-manual-inventory-soft]]
=== Inventaire des logiciels

L'inventaire logiciel se fait avec le produit Localboot `swaudit`.
Dans ce cas, les informations seront hérités de la désinstallation du Registre, et des informations supplémentaires seront obtenues à partir des correctifs et des clés de licence.

Le code source de ces paquets peut être trouvé ici: +
link:https://github.com/opsi-org/swaudit[opsi-org/swaudit]
