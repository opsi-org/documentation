//// 
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      06.07.2011
:Revision:  4.0.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]


[[opsi-manual-backends]]
== opsi data storage (backends)

[[opsi-manual-backends-file]]
=== file backend

With the backend type '{file backend}' the configuration information is kept in text files (ini file syntax) on the server.

Important details of the backend 'file' :

* It is the default backend
* You will find the files of this backend at `/var/lib/opsi`.

More details to the files and theire structure you will find at <<opsi-manual-important-files-filebackend>>.

[[opsi-manual-backends-ldap]]
=== ldap-Backend

The opsi backends are configured at `/etc/opsi/backends/*.conf`. If you are intend to use the '{ldap-Backend}', you have to write down the detail how to access your LDAP in the `ldap.conf`file here.

Furthermore you have to configure for which data you want to use the ldap backend. How to do this is described in the 'getting started' manual chapter 'backend configuration'.

The opsi data you will find below the LDAP base at the 'organizationalRole cn=opsi' (e.g. cn=opsi, dc=uib, dc=local). Below this node you will find the complete opsi data structure.

You may use for example the tool 'Jxplorer' to browse the LDAP data.

.opsi ldap backend in the Jxplorer
image::opsi-ldap-backend-in-jxplorer.png["opsi ldap in the jxplorer",width=400]

[[opsi-manual-backends-mysql]]
=== mysql backend

[[opsi-manual-backends-mysql-inventory]]
==== mysql backend for inventory data

Inventory data at the '{file-Backend}' is stored in structured text files by default. This type of storage is not very useful if you wish to form free queries on these data. In order to allow free queries and reports a mysql based backend for the inventory data has been introduced.

The main characteristics of this backend are:
* only for inventory data free (for other data it is part of a co funding project until now)
* optional (not the default backend)
* a very fine granulated data structure with an additional table to make queries easier.
* a history function which tracks changes in the inventory.

Regarding the very different structure of the components in the inventory the resulting data structure is complex.

The table 'hosts' comprises all known hosts. For every device type we use two tables: The 'HARDWARE_DEVICE_' .table describes the model without individual aspects like the serial number. The 'HARDWARE_CONFIG' table stores these individual and configuration data.

These both tables are connected via the field hardware_id. This is the resulting list of tables:

[source,ini]
----
HARDWARE_CONFIG_1394_CONTROLLER
HARDWARE_CONFIG_AUDIO_CONTROLLER
HARDWARE_CONFIG_BASE_BOARD
HARDWARE_CONFIG_BIOS
HARDWARE_CONFIG_CACHE_MEMORY
HARDWARE_CONFIG_COMPUTER_SYSTEM
HARDWARE_CONFIG_DISK_PARTITION
HARDWARE_CONFIG_FLOPPY_CONTROLLER
HARDWARE_CONFIG_FLOPPY_DRIVE
HARDWARE_CONFIG_HARDDISK_DRIVE
HARDWARE_CONFIG_IDE_CONTROLLER
HARDWARE_CONFIG_KEYBOARD
HARDWARE_CONFIG_MEMORY_BANK
HARDWARE_CONFIG_MEMORY_MODULE
HARDWARE_CONFIG_MONITOR
HARDWARE_CONFIG_NETWORK_CONTROLLER
HARDWARE_CONFIG_OPTICAL_DRIVE
HARDWARE_CONFIG_PCI_DEVICE
HARDWARE_CONFIG_PCMCIA_CONTROLLER
HARDWARE_CONFIG_POINTING_DEVICE
HARDWARE_CONFIG_PORT_CONNECTOR
HARDWARE_CONFIG_PRINTER
HARDWARE_CONFIG_PROCESSOR
HARDWARE_CONFIG_SCSI_CONTROLLER
HARDWARE_CONFIG_SYSTEM_SLOT
HARDWARE_CONFIG_TAPE_DRIVE
HARDWARE_CONFIG_USB_CONTROLLER
HARDWARE_CONFIG_VIDEO_CONTROLLER
HARDWARE_DEVICE_1394_CONTROLLER
HARDWARE_DEVICE_AUDIO_CONTROLLER
HARDWARE_DEVICE_BASE_BOARD
HARDWARE_DEVICE_BIOS
HARDWARE_DEVICE_CACHE_MEMORY
HARDWARE_DEVICE_COMPUTER_SYSTEM
HARDWARE_DEVICE_DISK_PARTITION
HARDWARE_DEVICE_FLOPPY_CONTROLLER
HARDWARE_DEVICE_FLOPPY_DRIVE
HARDWARE_DEVICE_HARDDISK_DRIVE
HARDWARE_DEVICE_IDE_CONTROLLER
HARDWARE_DEVICE_KEYBOARD
HARDWARE_DEVICE_MEMORY_BANK
HARDWARE_DEVICE_MEMORY_MODULE
HARDWARE_DEVICE_MONITOR
HARDWARE_DEVICE_NETWORK_CONTROLLER
HARDWARE_DEVICE_OPTICAL_DRIVE
HARDWARE_DEVICE_PCI_DEVICE
HARDWARE_DEVICE_PCMCIA_CONTROLLER
HARDWARE_DEVICE_POINTING_DEVICE
HARDWARE_DEVICE_PORT_CONNECTOR
HARDWARE_DEVICE_PRINTER
HARDWARE_DEVICE_PROCESSOR
HARDWARE_DEVICE_SCSI_CONTROLLER
HARDWARE_DEVICE_SYSTEM_SLOT
HARDWARE_DEVICE_TAPE_DRIVE
HARDWARE_DEVICE_USB_CONTROLLER
HARDWARE_DEVICE_VIDEO_CONTROLLER
HOST
SOFTWARE
SOFTWARE_CONFIG
----

Which field name in the database is corresponding to which reported and localized name in the opsi management interface is defined in a configuration file. Example (`/etc/opsi/hwaudit/locales/en_US`):

[source,ini]
----
DEVICE_ID.deviceType = Device type
DEVICE_ID.vendorId = Vendor ID
DEVICE_ID.deviceId = Device ID
DEVICE_ID.subsystemVendorId = Subsystem vendor ID
DEVICE_ID.subsystemDeviceId = Subsystem device ID
DEVICE_ID.revision= Revision
BASIC_INFO.name = Name
BASIC_INFO.description = Description
HARDWARE_DEVICE.vendor = Vendor
HARDWARE_DEVICE.model = Model
HARDWARE_DEVICE.serialNumber = Serial number
COMPUTER_SYSTEM = Computer
COMPUTER_SYSTEM.systemType = Type
COMPUTER_SYSTEM.totalPhysicalMemory = Physical Memory
CHASSIS = Chassis
CHASSIS.name = Name
CHASSIS.chassisType = Chassis type
CHASSIS.installDate = Installation date
CHASSIS.serialNumber = Serial number
BASE_BOARD = Base board
BASE_BOARD.product = Product
BIOS = BIOS
BIOS.version = Version
SYSTEM_SLOT = System slot
SYSTEM_SLOT.currentUsage = Current usage
SYSTEM_SLOT.status = Status
SYSTEM_SLOT.maxDataWidth = Maximum data width
PORT_CONNECTOR = Port
PORT_CONNECTOR.connectorType = Attributes
PORT_CONNECTOR.internalDesignator = Internal designator
PORT_CONNECTOR.internalConnectorType = Internal type
PORT_CONNECTOR.externalDesignator = External designator
PORT_CONNECTOR.externalConnectorType = External type
PROCESSOR = Processor
PROCESSOR.architecture = Architecture
PROCESSOR.family = Family
PROCESSOR.currentClockSpeed = Current clock speed
PROCESSOR.maxClockSpeed = Maximum clock speed
PROCESSOR.extClock = External clock
PROCESSOR.processorId = Processor-ID
PROCESSOR.addressWidth = Address width
PROCESSOR.socketDesignation = Socket designation
PROCESSOR.voltage = Voltage
MEMORY_BANK = Memory bank
MEMORY_BANK.location = Location
MEMORY_BANK.maxCapacity = Maximum capacity
MEMORY_BANK.slots = Number of slots
MEMORY_MODULE = Memory module
MEMORY_MODULE.deviceLocator = Device locator
MEMORY_MODULE.capacity = Capacity
MEMORY_MODULE.formFactor = Form factor
MEMORY_MODULE.speed = Speed
MEMORY_MODULE.memoryType = Memory type
MEMORY_MODULE.dataWidth = Data width
MEMORY_MODULE.tag = Tag
CACHE_MEMORY = Cache memory
CACHE_MEMORY.installedSize = Installed size
CACHE_MEMORY.maxSize = Maximum size
CACHE_MEMORY.location = Location
CACHE_MEMORY.level = Level
PCI_DEVICE = PCI device
PCI_DEVICE.busId = Bus id
NETWORK_CONTROLLER = Network adapter
NETWORK_CONTROLLER.adapterType = Adapter type
NETWORK_CONTROLLER.maxSpeed = Maximum speed
NETWORK_CONTROLLER.macAddress = MAC address
NETWORK_CONTROLLER.netConnectionStatus = Net connection status
NETWORK_CONTROLLER.autoSense = auto-sense
NETWORK_CONTROLLER.ipEnabled = IP protocoll enabled
NETWORK_CONTROLLER.ipAddress = IP address
AUDIO_CONTROLLER = Audio controller
HDAUDIO_DEVICE = HD Audio device
HDAUDIO_DEVICE.address = Addresse
IDE_CONTROLLER = IDE controller
SCSI_CONTROLLER = SCSI controller
FLOPPY_CONTROLLER = Floppy controller
USB_CONTROLLER = USB controller
1394_CONTROLLER = 1394 controller
PCMCIA_CONTROLLER = PCMCIA controller
VIDEO_CONTROLLER = Video controller
VIDEO_CONTROLLER.videoProcessor = Video processor
VIDEO_CONTROLLER.adapterRAM = Adapter RAM
DRIVE.size = Size
FLOPPY_DRIVE = Floppy drive
TAPE_DRIVE = Tape drive
HARDDISK_DRIVE = Harddisk drive
HARDDISK_DRIVE.cylinders = Cylinders
HARDDISK_DRIVE.heads = Heads
HARDDISK_DRIVE.sectors = Sectors
HARDDISK_DRIVE.partitions = Partitions
DISK_PARTITION = Partition
DISK_PARTITION.size = Size
DISK_PARTITION.startingOffset = Starting offset
DISK_PARTITION.index = Index
DISK_PARTITION.filesystem = Filesystem
DISK_PARTITION.freeSpace = Free space
DISK_PARTITION.driveLetter = Drive letter
OPTICAL_DRIVE = Optical drive
OPTICAL_DRIVE.driveLetter = Drive letter
USB_DEVICE = USB device
USB_DEVICE.vendorId = Vendor ID
USB_DEVICE.deviceId = Device ID
USB_DEVICE.usbRelease = USB release
USB_DEVICE.maxPower = Maximum power
USB_DEVICE.interfaceClass = Interface class
USB_DEVICE.interfaceSubClass = Interface sub class
USB_DEVICE.interfaceProtocol = Interface protocol
USB_DEVICE.status = Status
MONITOR = Monitor
MONITOR.screenHeight = Screen height
MONITOR.screenWidth = Screen width
KEYBOARD = Keyboard
KEYBOARD.numberOfFunctionKeys = Number of function keys
POINTING_DEVICE = Pointing Device
POINTING_DEVICE.numberOfButtons = Number of buttons
PRINTER = Printer
PRINTER.horizontalResolution = Horizontal resolution
PRINTER.verticalResolution = Vertical resolution
PRINTER.capabilities = Capabilities
PRINTER.paperSizesSupported = Supported paper sizes
PRINTER.driverName = Driver name
PRINTER.port = Port
----

Examples for queries:
Listing of all hard drives:
[source,prompt]
----
SELECT * FROM HARDWARE_DEVICE_HARDDISK_DRIVE D
LEFT OUTER JOIN HARDWARE_CONFIG_HARDDISK_DRIVE H ON D.hardware_id=H.hardware_id ;
----

The software inventory uses as primary keys the following entries:

* Name +
This is the  'windowsDisplayName' or, if this entry isn't found at the registry, it is the 'windowsSoftwareId'. Both values come from the registry: +
'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall' +
'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\<id> DisplayName'

* Version +
'HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\<id> DisplayVersion'

* SubVersion
* Language
* Architecture (32 Bit / 64 Bit)

At the table 'Software_config' these primary keys are integrated to one key:  'config_id'.

.data base schema: software inventory
image::mysql-schema-inventory-software.png["data base schema: software inventory",width=400]


[[opsi-manual-backends-mysql-configdata-overview]]
==== mysql backend for configuration data

The '{mysql-Backend}' for configuration data is available since opsi 4.0 and is published as co funding project.

The '{mysql-Backend}' has a high performance which is important for large installations.



Here a data structure overview:

.data base schema: configuration data
image::mysql-schema-configdata.png["data base schema: configuration data",width=400]

[[opsi-manual-backends-mysql-initializing]]
==== Initializing the MySQL-Backend

First, the mysql-server has to be installed (if not done yet):
[source,prompt]
----
apt-get install mysql-server
----
In the next step the administrative password for the mysql-server has to been set:
[source,prompt]
----
mysqladmin --user=root password linux123
----

The command 
[source,prompt]
----
opsi-setup --configure-mysql
----
will now initialize the mysql backend.

A example session:

.Dialog: opsi-setup --configure-mysql
image::mysql-config-input-mask.png["Dialog: opsi-setup --configure-mysql",width=400]

.Output: opsi-setup --configure-mysql
image::mysql-config-output.png["Output: opsi-setup --configure-mysql",width=400]

At all questions (beside the password) you may accept the defaults by pressing 'ENTER'.

As next step you have to configure how (for which methods) opsi should use which backend. Therefore please edit the file '/etc/opsi/backendManager/dispatch.conf' . 

A detailed description for this configuration you will find at the 'getting started' manual. The configuration file also contains a lot of examples of typical configurations.

A configuration for the use of the '{mysql-Backend}' (without internal dhcpd) looks like that:
[source,opsifiles]
----
backend_.*         : mysql, opsipxeconfd
host_.*            : mysql, opsipxeconfd
productOnClient_.* : mysql, opsipxeconfd
configState_.*     : mysql, opsipxeconfd
.*                 : mysql
----

Finally you have to activate the changed configuration with the following commands:
[source,prompt]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

[[opsi-manual-backends-mysql-access-config]]
==== Configure the mysql database for access from outside the server
### has to be written ###

[[opsi-manual-backends-hostcontrol]]
=== HostControl backend

The HostControl backend does not store any information. It is a special backend to control the opsi clients.

Typical tasks are to send Wake-On-Lan signals and send control signals to the '{opsi-client-agent}'.

The HostControl backend is configured by the configuration file `/etc/opsi/backends/hostcontrol.conf`. Configuration options are here:

* +opsiclientdPort+: +
Network port to contact the {opsi-client-agent}.

* +hostRpcTimeout+: +
Timeout (in seconds) connecting a {opsi-client-agent}.

* +resolveHostAddress+: +
This option controls whether the name resolution of a opsi-client address is primary done by the opsi database or by the name resolution of the operating system of the '{opsi-server}'.
If this option is +True+, the '{opsi-server}' tries at first to get the IP-Address of a '{opsi-client}' by the name resolution of the operating system (DNS, /etc/hosts) and if this fails the opsi database is used.
To use the opsi database at first, you have to set this option to +False+.

* +maxConnections+: +
Maximal number of concurrent connections to '{opsi-client-agent}s'.

* +broadcastAddresses+: +
List of broadcast addresses used to send Wake-On-Lan broadcasts. 


[[opsi-manual-backends-convert]]
=== Conversion between different backends

The command `opsi-convert` converts the opsi configuration files from one backend to another. The target or the source can be assigned in different ways:


* backend name: +
A backend on the current server can be addressed with just the backend name.  The command `opsi-convert file mysql` converts the data base of the current server from '{file-Backend}' to the '{mysql-Backend}'.

* Service address +
Providing a full qualified service address allows access to a remote servers data base (after passing the users password). The service address looks like:
https://<username>@<ipadresse>:4447/rpc
You will be asked for the passwords. +
The conversion command looks like that:
[source,prompt]
----
opsi-convert -s -l /tmp/log https://uib@192.168.2.162:4447/rpc   https://opsi@192.168.2.42:4447/rpc
----

* Configuration directories +
With a declaration of a configuration directory for the specified backend manager configuration source or target can be described in detail.

[source,prompt]
----
opsi-convert --help

Usage: opsi-convert [options] <from> <to>
Convert an opsi database into an other.
Options:
    -h        show this help text
    -V        show version information
    -q        do not show progress
    -v        increase verbosity (can be used multiple times)
    -c        clean destination database before writing
    -s        use destination host as new server
    -l <file> log to this file

<from> and <to> can be:
     - the name of a backend as defined in /etc/opsi/backends (file, ldap, ...)
     - the url of a opsi configuration service
       http(s)://<user>@<host>:<port>/rpc
----

[[opsi-manual-backends-bootfiles]]
=== Boot files

`/tftpboot/linux` contains the boot files needed for the system start with the PXE boot proms.

[[opsi-manual-backends-securing-shares]]
=== Securing the shares with encrypted passwords

The '{opsi-client-agent}' accesses the shares provided by the '{opsi-server}' to get the software which have to be installed at the client.

The mount of these shares is done by using the user 'pcpatch'. That these shares are not public and have to be mounted using a password is important for:
* general system security and data integrity
* meet the license agreements of special software packets

To give the client task '{opsi-client-agent}' access to authentication data, the server creates a specific key ('{opsi-host-key}') when creating a client. This key is stored (at the '{file-Backend}') in the file   `/etc/opsi/pckeys` and is passed to the PC with the (re)installation request. The '{opsi-client-agent}' will store this key in the local file  `c:\program files\opsi.org\opsi-client-agent\opsiclientd\opsiclientd.conf` 
during system installation (access rights limited to the administrators). Also, on the server, the file `/etc/pckeys` is only accessible by the user 'root' and members of the group 'opsiadmin'. This way every PC has got an unique key only known to the client itself and the '{opsi-server}', not accessible by client standard users. The key is used to encrypt the password of the user 'pcpatch'. The encrypted password will be transferred to the client at boot time via web service. Hence the servers 'pcpatch' password can be changed any time. The new encrypted password will be sent to every client at the next reboot.



