//// 
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; Until we found a better license:
; All rights reserved.
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      04.07.2011
:Revision:  4.0.1
:toclevels: 6

include::../common/opsi_terms.asciidoc[]


[[opsi-manual-important-files]]
== Important files on the depot servers

[[opsi-manual-important-files-etc]]
=== Configuration files in /etc

[[opsi-manual-important-files-etc-hosts]]
==== /etc/hosts

The hosts file stores all IP addresses and IP names known to the network. The IP addresses and names of all clients have to be entered here. There might be aliases (additional names) and comments (starting with '#'). 

opsi needs  'full qualified host name' (including the domain name) and this might come from the `/etc/hosts` as well from the 'DNS'.

Example:

[source,prompt]
----
192.168.2.106  dplaptop.uib.local  dplaptop  # this opsi-server
192.168.2.153  schleppi.uib.local  
192.168.2.178  test_pc1.uib.local # Test-PC PXE-bootprom
----

With the following command you may test the name is resolved:
[source,prompt]
----
getent hosts $(hostname -f)
----

The result should be similar to:
[source,prompt]
----
192.168.1.1 server.domain.tld server
----

If the result isn't like that and contains for example '127.0.0.1' or 'localhost' you should correct your `/etc/hosts` or your DNS before you continue with the installation.

[[opsi-manual-important-files-etc-group]]
==== /etc/group

The required opsi groups are 'pcpatch' and 'opsiadmin'. All users who are administrating opsi packets need to be member of the 'pcpatch' group. Membership of the group 'opsiadmin' allows users to connect to the 'opsi web service' (for instance using the '{opsi-configed}').

[[opsi-manual-important-files-etc-opsi-backends]]
==== /etc/opsi/backends/
Configuration files for the used backends.

[[opsi-manual-important-files-etc-opsi-backendmanager]]
==== /etc/opsi/backendManager/
* `acl.conf` +
Configuration of the access control lists to the opsi methods.

* `dispatch.conf` +
Configuration which of the in `/etc/opsi/backends/` configured backends should be used for which method.

* `extend.d/` +
Directory for backend extensions. For example this is be used to implement the old opsi 3 methods which are mapped to the new opsi 4 methods.

[[opsi-manual-important-files-etc-opsi-hwaudit]]
==== /etc/opsi/hwaudit/*

Since opsi V3.2

Here the configuration files for the hardware inventory are to be found. The directory 'locales' holds the language specifications. The file 'opsihwaudit.conf' specifies the mapping of WMI classes to the opsi data management.

[[opsi-manual-important-files-etc-opsi-modules]]
==== /etc/opsi/modules

Since opsi 3.4

The opsi activation file.

This is by the uib gmbh signed file which is used to activate not free features of opsi. Any change on this file will invalidate the activation. Without this file (or with a invalid file) you may only use the free feature of opsi.

[[opsi-manual-important-files-etc-opsi-opsiconfd]]
==== /etc/opsi/opsiconfd.conf

Since opsi V3

Configuration file for the 'opsiconfd' service including configurations like ports, interfaces, logging.

[[opsi-manual-important-files-etc-opsi-opsiconfdpem]]
==== /etc/opsi/opsiconfd.pem

Since opsi version 3.0

Configuration file for the 'opsiconfd' holding the ssl certificate.

[[opsi-manual-important-files-etc-opsi-opsipxeconfd]]
==== /etc/opsi/opsipxeconfd.conf

Configuration file for the 'opsipxeconfd' in charge for writing the start-up files for the Linux boot image. You can configure directories, defaults and log level here.

[[opsi-manual-important-files-etc-opsi-opsi-product-updater]]
==== /etc/opsi/opsi-product-updater.conf
Configuration file for the opsi-product-updater.
See also <<opsi-manual-configuration-tools-opsi-productupdater>>

[[opsi-manual-important-files-etc-opsi-version]]
==== /etc/opsi/version
Holds the version number of the installed opsi.

[[opsi-manual-important-files-etc-initd]]
==== /etc/init.d/
Start and stop scripts for:
* opsi-atftpd
* opsiconfd
* opsipxeconfd

[[opsi-manual-important-files-bootfiles]]
=== Boot files

[[opsi-manual-important-files-bootfiles-tftpboot-linux]]
==== Boot files in /tftpboot/linux

* `pxelinux.0` +
Boot file which will be loaded first by the PXE boot-prom.

* `install` and `miniroot.gz` +
Installation boot-image which will be loaded by the client (per tftp) during a re-installation.

[[opsi-manual-important-files-bootfiles-tftpboot-linux-pxelinuxcfg]]
==== Boot files in /tftpboot/linux/pxelinux.cfg

* `01-<mac adresse>` or `<IP-NUMMER-in-Hex>` +
Files named by the clients hardware address (prefix 01-) are stored on the '{opsi-server}' as client-specific boot files. Usually they are named pipes created by the '{opsipxeconfd}' as to initiate the (re)installation of clients.

* `default` +
The file `default` is loaded if no client-specific file is found. This initiates a local boot.

* `install` +
Information for the boot of the install boot image which will be used by the '{opsipxeconfd}' to create the named pipe.

[[opsi-manual-important-varlibopsi]]
=== Files in /var/lib/opsi

[[opsi-manual-important-varlibopsi-repository]]
==== /var/lib/opsi/repository
This is the place where '{opsi-product-packages}' are saved, which are loaded by the calls of the `opsi-product-updater` to the server.

This is also the place where '{opsi-product-packages}' are saved, which are installed by the calls of the  `opsi-package-manager` if it is called with the option `-d`.

[[opsi-manual-important-varlibopsi-depot]]
==== /var/lib/opsi/depot
This directory is exported as read only Samba share 'opsi_depot'. It is used at the Linux distribution SLES as depot directory (instead of `/opt/pcbin/install`). At other distributions, you will find here a link to the directory `/opt/pcbin/install`. In future you will find here also at other distributions the depot directory because this path is conform to LSB.

[[opsi-manual-important-varlibopsi-ntfsimages]]
==== /var/lib/opsi/ntfs-images
This directory holds (per default) the partition image files which are produced by the netboot product 'ntfs-write-image'.

[[opsi-manual-important-varlibopsi-other]]
==== Other directories

The other directories in `/var/lib/opsi` (`config` and `audit`) are directories of the '{file-Backend}s', which are described in the following chapters.


[[opsi-manual-important-files-filebackend]]
=== Files of the file backend

[[opsi-manual-important-files-filebackend-pckeys]]
==== /etc/opsi/pckeys
In this file the '{opsi-host-key}s', specified for each computer, are stored.

Example:
[source,prompt]
----
schleppi.uib.local:fdc2493ace4b372fd39dbba3fcd62182
laptop.uib.local:c397c280fc2d3db81d39b4a4329b5f65
pcbon13.uib.local:61149ef590469f765a1be6cfbacbf491
----

[[opsi-manual-important-files-filebackend-passwd]]
==== /etc/opsi/passwd
Here the passwords encrypted with the server key of the server (e.g. for pcpatch) are kept.

[[opsi-manual-important-files-filebackend-overview]]
==== Overview /var/lib/opsi

The files of the 'file backend' are in `/var/lib/opsi`, which is the home directory of the opsiconfd daemon. The following schema gives an overview of the directory structure.

[source,prompt]
----
/var/lib/opsi-|
              |-depot				opsi_depot share
              |-repository			opsi package repository used by opsi-product-updater opsi-package-manager
              |-audit				inventory - files
              !-config/-|				config share
                        |-clientgroups.ini	client groups
                        |-config.ini		Host Parameter (Global Defaults)
                        |-clients/   		<pcname.ini> files
                        |-products/		product control files
                        !-depots		depot description files

	+audit/
		global.<Type> (generic hard-, and software information)
		<FQDN>.<Type> (host specific hard-, and software information)

	clientgroups.ini (hold the host groups)

	+clients/
		<FQDN>.ini (client configuration information)
	config.ini (store the 'configs' (host parameter))

	+depots/
		<FQDN>.ini (Information according to the depots)

	+products/
		<ID>_<ProdVer>-<PackVer>.<Type> (Information about the products)

	+templates/
		pcproto.ini (template for new clients)
		<FQDN>.ini (specific templates (not implemented yet))
----

[[opsi-manual-important-files-filebackend-detail]]
==== Configuration files in detail

[[opsi-manual-important-files-filebackend-detail-clientgroups]]
===== ./clientgroups.ini
This file holds information on the client groups.
[source,ini]
----
[<GroupId>]
<HostId> = 1 #aktiv
<HostId> = 0 #inaktiv
----

[[opsi-manual-important-files-filebackend-detail-configini]]
===== ./config.ini

This are the global defaults of the 'host parameter' as shown in the 'server configuration' in the '{opsi-configed}'.

[[opsi-manual-important-files-filebackend-detail-fqdnini]]
===== ./clients/<FQDN>.ini

In these files the client specific configuration is set. This information will be combined with the '<depot-id>.ini' values whereas the settings from '<FQDN>.ini' overrides the '<depot-id>.ini' setting.

These files can have the following structure:

The section 'info' contains all non product client information:

[source,ini]
----
[info]
description = <String>
created = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
lastseen = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
inventorynumber = <String>
notes = <String>
hardwareaddress = <MAC> #format: 'hh:hh:hh:hh:hh:hh'
ipaddress = <IP> #format: 'nnn.nnn.nnn.nnn'
onetimepassword = <String>
----

The following section stores the installation state and the action request of a product. If there is no information here, the default is +not_installed:none+.

[source,ini]
----
[<Type>_product_states] #'Local-', bzw. 'NetbootProduct'
<ProductId> = <InstallationStatus>:<ActionRequest>
----

More information on products you will find at the product sections:
[source,ini]
----
[<ProductId>-state]
producttype = <Type> #'Local-', bzw. 'NetbootProduct'
actionprogress = <String>
productversion = <ProdVer>
packageversion = <PackVer>
modificationtime = <Date> #format: 'YYYY-MM-DD HH:MM:SS'
lastaction = <ActionRequest>
actionresult = <ActionResult>
targetconfiguration = <InstallationStatus>
----

[[opsi-manual-important-files-filebackend-detail-templates]]
===== /var/lib/opsi/config/templates

In this directory are the template files like `pcproto.ini`, which is the standard template for creating a new `<FQDN>.ini` file. It has the same internal structure as the `<FQDN>.ini` file.

[[opsi-manual-important-files-filebackend-detail-depots]]
===== /var/lib/opsi/config/depots/

Here are the depot specific data storage which are also stored as `<depot-id>.ini`. Here you find general information about about the the depot.

[source,ini]
----
[depotshare]
remoteurl = smb://<NetBiosName>/<Path>
localurl = file://<Path>

[depotserver]
notes = <String>
network = <IP>
description = <String>
hardwareaddress = <MAC>
ipaddress = <IP>
inventorynumber = <String>

[repository]
remoteurl = webdavs://<FQDN>:<Port>/<Path>
localurl = file://<Path>
maxbandwith = <Integer> #in Bytes
----

You will find also information which opsi product is installed at the depot in which version and with which property defaults.

[[opsi-manual-important-files-filebackend-detail-products]]
===== Product control files in /var/lib/opsi/config/products/

This directory contains the product meta data, which is the product name, properties, default values and dependencies.

The control files are the kind of control files, that are generated by creating new opsi-products in the directory '<product name>/OPSI/control'.

The control files have the following sections:


* Section [Package] +
Description of the package version and whether this is an incremental package.
* Section [Product] +
Description of the product
* Section(s) [ProductProperty] +
(optional) +
Description of variable product properties
* Section(s) [ProductDependency] +
(optional) +
Description of product dependencies

Example:
[source,ini]
----
[Package]
version: 1
depends:
incremental: False

[Product]
type: localboot
id: thunderbird
name: Mozilla Thunderbird
description: Mail client by Mozilla.org
advice:
version: 2.0.0.4
priority: 0
licenseRequired: False
productClasses: Mailclient
setupScript: thunderbird.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:

[ProductProperty]
name: enigmail
description: Install encryption plug-in for GnuPG
values: on, off
default: off

[ProductDependency]
action: setup
requiredProduct: mshotfix
requiredStatus: installed
requirementType: before
----

* [Package]-'Version' +
is for different package versions from the same product version. This helps to distinguish packages build from the same product version but with different '{opsi-winst}' script for instance.

* [Package]-'depends' +
refers to the base package of an incremental package.

* [Package]-'Incremental' +
specifies whether this is an incremental package.

* [Product]-'type' +
marks the product type as localboot or netboot.

* [Product]-'Id' +
is the general name of that product (like 'firefox'), independent from the product version.

* [Product]-'name' +
is the full name of the product.

* [Product]-'Description' +
is an additional description for the product as shown in the '{opsi-configed}' as 'Description'.

* [Product]-'Advice' +
is an additional hint for handling the product (caveats etc.) as to be shown in the '{opsi-configed}' as 'Note'.

* [Product]-'version' +
is the version of the original software.

* [Product]-'Priority' +
affects (in combination with the product dependencies) the installation sequence.

* [Product]-'productClasses' +
is for future use.

* [ProductProperty]-'type' +
Type of the property: (unicode/boolean)

* [ProductProperty]-'name': +
Name of the property.

* [ProductProperty]- 'multivalue' +
May this property contain a list of values (True/False)

* [ProductProperty]- 'editable' +
Is this property free editable or may the user only select on of the values (True/False)

* [ProductProperty]-'description': +
Description of a property (Tool-tip in the '{opsi-configed}').

* [ProductProperty]-'values' : +
List of allowed values. 

* [ProductProperty]-'default' : +
Default value of the property.


* [ProductDependency]-'Action' : +
To which product action this dependency entry belongs (setup, uninstall ...).

* [ProductDependency]-'Requiredproduct': +
Product ID of the product to that a dependency exists.

* [ProductDependency]-'Required  action': +
The required action of the product, which the dependency entry refers to. Actions could be setup, uninstall, update...

* [ProductDependency]-'Required installation status': +
The required status of the product, which the dependency entry refers to. Typically this is 'installed', which results in setting this dependency product to setup, if it isn't installed on the client yet.

* [ProductDependency]-'Requirement type': +
this is regarding the installation order. If the product, which the dependency entry refers to, has to be installed before the actual product installation starts, the 'Requirement type' must be 'before'. If the dependency product has to be (re-)installed after the actual product, the 'Requirement type' is set to 'after'. If there is no entry, the installation order is of no relevance.


[[opsi-manual-important-files-filebackend-detail-audit]]
==== Inventory data /var/lib/opsi/audit

Here you find the inventory data for hardware (*.hw) and software (*.sw).

[[opsi-manual-important-files-ldapbackend]]
=== Files of the LDAP backend
The opsi-LDAP schema is located at `/etc/ldap/schema/opsi.schema.`

[[opsi-manual-important-files-prog]]
=== opsi programs and libraries

[[opsi-manual-important-files-prog-pylib]]
==== Python library
The opsi python modules are located at:

* Debian Lenny +
`/usr/share/python-support/python-opsi` +
`/usr/share/python-support/opsiconfd`

* Ubuntu Lucid +
`/usr/share/pyshared/python-opsi` +
`/usr/share/pyshared/opsiconfd`

[[opsi-manual-important-files-prog-usrbin]]
==== Programs in /usr/bin

* opsipxeconfd +
opsi daemon to administrate the files required for the PXE boot of the clients. 

* opsi-admin +
Starts the command line interface for the opsi python library

* opsiconfd +
opsi daemon which is the central opsi configuration daemon.

* opsiconfd-guard +
opsi daemon which monitors if the '{opsiconfd}' is running and restarts the '{opsiconfd}' if it isn't running.

* opsi-configed +
Command to start the opsi management interface

* opsi-convert +
Script for converting between different backends.

* opsi-makeproductfile +
Script for packing the opsi-package (opsi-product)

* opsi-newprod +
Script for creating the structure and meta data files of a new opsi product

* opsi-package-manager +
Script to unpack, install, remove, list opsi packages on one ore more servers (and a lot more).

* opsi-setup +
opsi configuration utility

[[opsi-manual-important-files-logs]]
=== opsi log files

The opsi log files have the following format:
[source,ini]
----
[Loglevel] Timestamp Message
The log levels are:
0 = nothing      (absolute nothing)
1 = essential    ("we always need to know")
2 = critical     (unexpected errors that my cause a program abort)
3 = error        (Errors that don't will abort the running program)
4 = warning      (you should have a look at this)
5 = notice       (Important statements to the program flow)
6 = info         (Additional Infos)
7 = debug        (important debug messages)
8 = debug2       (a lot more debug information and data)
9 = confidential (passwords and other security relevant data) 
----

[[opsi-manual-important-files-logs-bootimage]]
==== /var/log/opsi/bootimage
In this directory are the log-files of the '{opsi-linux-bootimage}'. These log files will be named `log.<IP-number>`.

If the '{opsi-linux-bootimage}' couldn't connect the web-service, you will find the logs in `/tmp/log` at the bootimage. In such case, there are two possible ways to get the log file:

1. You have a network connection to the client +
You may use scp (winscp) to copy the log file from the running boot-image to your computer (login as root with password linux123).

2. You have no network connection to the client +
You have to use a USB stick.

** Login as root with the password 'linux123' 
** Connect USB stick to the client and wait some seconds
** use the command `sfdisk -l` to check on which device you will find your stick
** mount
** copy
** umount

A example session:
[source, prompt]
----
#sfdisk -l
Disk /dev/sda: 30401 cylinders, 255 heads, 63 sectors/track
Units = cylinders of 8225280 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls    #blocks   Id  System
/dev/sda1   *      0+  30401-  30402- 244197528+   7  HPFS/NTFS
/dev/sda2          0       -       0          0    0  Empty
/dev/sda3          0       -       0          0    0  Empty
/dev/sda4          0       -       0          0    0  Empty

Disk /dev/sdb: 1017 cylinders, 33 heads, 61 sectors/track
Units = cylinders of 1030656 bytes, blocks of 1024 bytes, counting from 0

   Device Boot Start     End   #cyls    #blocks   Id  System
/dev/sdb1          0+   1016    1017-   1023580    b  W95 FAT32
/dev/sdb2          0       -       0          0    0  Empty
/dev/sdb3          0       -       0          0    0  Empty
/dev/sdb4          0       -       0          0    0  Empty
# mount /dev/sdb1 /mnt
# cp /tmp/log /mnt
#umount /mnt
----

[[opsi-manual-important-files-logs-clientconnect]]
==== /var/log/opsi/clientconnect

In this directory are the log-files of the '{opsi-client-agent}' running on the client. +
The client log files will be named `<client FQDN>.log`. On the client you will find this file at `c:\tmp\opsiclientd.log`.

[[opsi-manual-important-files-logs-instlog]]
==== /var/log/opsi/instlog
In this directory are the log-files of the '{opsi-winst}' running on the client.  The client log files will be named `<client FQDN>.log`. On the client you will find this file at `c:\tmp\instlog.txt`

[[opsi-manual-important-files-logs-opsiconfd]]
==== /var/log/opsi/opsiconfd
In this directory are the log-files of the '{opsiconfd}' and the clients. +
The client log files will be named `log.<IP-number>` and (if available) a symbolic link named `<IP-Name>.log` to `log.<IP-number>` is created.

[[opsi-manual-important-files-logs-opsipxeconfd]]
==== /var/log/opsi/opsipxeconfd.log
Log file the '{opsipxeconfd}' +
that administrates the tftp files for the PXE boot of the clients.

[[opsi-manual-important-files-logs-package]]
==== /var/log/opsi/package.log
Log file of the `opsi-package-manager`.

[[opsi-manual-important-files-logs-productupdater]]
==== /var/log/opsi/opsi-product-updater.log
Log file of the `opsi-product-updater`.

[[opsi-manual-important-files-logs-tftpd]]
==== tftp log in /var/log/syslog
The log of the `tftpd` you will find at `/var/log/syslog`.

You should increase the log level to see important information. +
At the file `/etc/inetd.conf` in the line starting with 'tftpd' set the parameter 'verbose' to 7 : +
[source,opsifiles]
----
tftp 	dgram   udp     wait    nobody /usr/sbin/tcpd /usr/sbin/in.tftpd --tftpd-timeout 300 --retry-timeout 5     --mcast-port 1758 --mcast-addr 239.239.239.0-255 --mcast-ttl 1 --maxthread 100 --verbose=7  /tftpboot
-----

If this is done execute:
[source,prompt]
----
killall tftpd
killall -1 inetd
----


[[opsi-manual-important-files-logs-loginblocker]]
==== c:\tmp\opsiloginblocker.txt
Log file of the '{opsi-login-blocker}'

[[opsi-manual-important-files-logs-opsiclientd]]
==== c:\tmp\opsiclientd.log
Log file of the '{opsiclientd}' +
This file is copied at the end of a event to server at `/var/log/opsi/clientconnect/<pc-ipnummer.log>`.

[[opsi-manual-important-files-logs-localinstlog]]
==== c:\tmp\instlog.txt
Log file of the '{opsi-winst}'. +
This file is copied at the end of a installation to server at `/var/log/opsi/instlog/<pc-ipnummer.log>`.

