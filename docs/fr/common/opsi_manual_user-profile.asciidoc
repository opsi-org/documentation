////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      12.10.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-userprofile]]
== opsi extension 'User Profile Management'


[[opsi-manual-userprofile-preconditions]]
=== Preconditions for the extension

This extension is at the moment a cofunding project which means that until the complete development costs are payed by co-funders, they are only allowed to use by the co-funders or for evaluation purposes. If we have earned the development cost we will give these modules for everybody for free. +
see also <<opsi-manual-modules>> +
and +
link:https://uib.de/en/opsi-cofunding/cofunding/[opsi cofunding projects] +
link:https://uib.de/en/opsi-cofunding/prices/[opsi cofunding contribution]

So as precondition to use this extension you need as first an activation file.
For evaluation purpose you will get a temporary activation file if you ask for it in a mail at info@uib.de.

Technical preconditions are opsi 4.0.1 with the following package and product versions:

.Needed product and package versions
[options="header"]
|==========================
|opsi product|Version
|opsi-client-agent|>=4.0.1-23
|'{opsi-winst}'|>=4.11.2.1
|python-opsi|>=4.0.1.31-1
|==========================


[[opsi-manual-userprofile-introduction]]
=== Introduction

The '{opsi-winst}' has some special commands to manipulate profiles. These commands act at the local stored profiles. If you are using 'Roaming Profiles' this feature of the '{opsi-winst}' does not help you because all modifications at the profiles will be overwritten by the server stored profile while login.

The opsi extension for 'User Profile Management' gives you the possibility to do the needed profile manipulation after the login of the user, at the correct profile. This is done by starting the '{opsi-winst}' after the user login again and run some special 'userLoginScripts'.


[[opsi-manual-userprofile-concept]]
=== Concept

If you can't do the profile manipulation while installing the software on the machine, you have to separate the 'machine part' of the software installation from the 'profile part'. This can be done inside of a script and also by putting the 'profile part' into a separate script. Many admins still use the second idea by integrating 'profile parts' into a domain login script.

According to the method you use the 'profile part' of your opsi products are part of the opsi installation scripts for installation and deinstallation or they are separated for example as part of the domain login scripts. +
The goal of this opsi extension is to provide the possibility to integrate both variants of scripts easily.

The core concepts of this opsi extension are:

* Executing special 'userLoginScripts' scripts at the user login +
At the user login the opsiclientd uses the 'event_user_login' to startup the '{opsi-winst}' in a special login script mode. In this special mode the '{opsi-winst}' executes only the 'userLoginScripts' which are assigned to the opsi products.

* Executing these scripts with administrative privileges inside the context of the logged in user +
Domain login scripts may be used to execute 'profile parts'. But they run only with user privileges. opsi 'userLoginScripts' run with administrative privileges. They run with these high privileges in the user context, so that is easy to manipulate file and registry parts of the profile using the same commands you may use in a domain login script.

*  Executing these scripts inside of the opsi service context +
The opsi 'userLoginScripts' run inside the opsi service context, so that they know all details about at which opsi product name, version and package version they are just working. They have the complete access to product properties and other information that can be requested by opsi service calls.

Restrictions:

* The opsi 'userLoginScripts' will be always executed online and not from a local cache. Even if your client runs with the opsi WAN extension.


[[opsi-manual-userprofile-winst]]
=== New and extended '{opsi-winst}' functions

* Command line parameter `/allloginscripts` +
If you are calling '{opsi-winst}' in the opsi service context with the additional parameter '/allloginscripts' this will lead to the following actions:

** All products which have a 'userLoginScript' will be detected. Only for these products will be the 'userLoginScripts' executed.

** The logged in user will be identified. All global constants to user specific directories like +%CurrentAppdataDir%+ will be directed to the directories of the logged-in user. Also the registry operations  (`Registry` sections and `GetRegistryString`) which going to +HKCU+ will be executed in a way that they read or write to the current_user hive of the logged-in user.

* Command line parameter `/silent` +
The command line parameter `/silent` switches off the '{opsi-winst}' standard window in order to not disturb the user.

* Function `GetScriptMode` +
In order to detect if a script runs as 'userLoginScript' or for example as installation script, the function `GetScriptMode` gives you two possible values:
** 'Machine' +
The script is  *not* executed as 'userLoginScript' (but e.g. as setup or uninstall script).
** 'Login' +
The script is executed as 'userLoginScript'.

* New primary section +ProfileActions+ +
This section may be used to the place for calling user profile manipulations. Here a syntax may be used, which make it possible to use this section as a part of a installation script and as a 'userLoginScript' as well. Therefore this primary section will be interpreted in different ways according to the fact if it is called at 'Machine' mode or at 'Login' mode (as 'userLoginScript'):
** 'Login' +
If a script is running as 'userLoginScript' and there is a section  +ProfileActions+ in the script, the script interpretation will start at the +ProfleActions+ section (and not at the +Actions+ section, which will be ignored).
** 'Machine' +
If a script is running as normal istallation script, you may call the section +ProfileActions+ as a sub section. But in difference to a normal sub section it has some special rules: For every called 'Registry' section the modifier '/AllNtUserDats' is implicit set. gesetzt. For every called 'Files' section the modifier '/AllNtUserProfiles' is implicit set. +
Since Version 4.11.3.2 : For every called 'Patches' section the modifier '/AllNtUserProfiles' is implicit set.

* Registry sections +
** Registry sections which should work on the 'HKCU' or 'HKEY_CURRENT_USER' hive in the `openkey` command, will be executed in login script mode ('Login') in a way, that all changes will be made in the registry hive of the logged-in user. The same applies to the functions `GetRegistryStringValue*`.
** Registry sections which are called at the normal mode ('Machine') with the modifier '/AllNtUserDats', may now contain 'HKCU' resp.. 'HKEY_CURRENT_USER' at the `openkey` command. This gives you the possibility to use the same registry sections in both modes.

* Avoid unnecessary script execution: +
With the new script command `saveVersionToProfile` you save product name, version and package version to the logged-in users profile. These information can be retrieved by the new string function `readVersionFromProfile`, so that you may see if this script was executed at this profile before. To make the handling easier there is also a new Boolean function `scriptWasExecutedBefore`. This function checks if there is a version stamp in the profile (like you may do with the `readVersionFromProfile` command) and set a new stamp to the profile (like you may do with the `saveVersionToProfile` command). So you may just use this single command in a +if+ statement. +
The new string list function `getProductMap` gives you a hash with all information about the installation states and report to the actual product. So you may see if this product is installed or was uninstalled.

* Logging +
The logs of the 'userLoginScripts' are written to +
`c:\opsi.org\log\<login user name>_login.log` +
This log file will be transmitted to the server. At the server they will be stored at +/var/log/opsi/userlogin/<clientid>.log+. +
This log file is handled in append mode. This means new logs will appended to a existing log file of this client. To avoid to large log files, the size of the log files are limited by the server to a maximal size of 5 MB. +
You may display these log files at the opsi management interface (opsi-configed) at the tab 'Log files' in the sub tab 'userlogin'.

[[opsi-manual-userprofile-scripts]]
=== Examples of userLoginScripts

We are starting with examples that are build in a way that they also may used in a domain login script.

A very simple generic example:

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.3.2"
Message "Example Profile Patch ...."

Files_profile_copy
Registry_currentuser_set
Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini"

[Files_profile_copy]
copy "%Scriptpath%\profiles\*.*" "%CurrentAppdataDir%\ACME"

[Registry_currentuser_set]
openkey [HKCU\Software\ACME]
set "show_greeting_window" = "no"

[Patches_profile_ini]
add [secdummy] dummy1=add1
----

A example for firefox configuration:

[source,winst]
----
[Actions]
Message "Firefox Profile Patch ...."

DefVar $akt_profile_ini$
DefVar $rel_prefs_path$

comment "check for existing profile ..."
Set $akt_profile_ini$ = "%CurrentAppdataDir%\Mozilla\Firefox\profiles.ini"
if FileExists($akt_profile_ini$)
	Set $rel_prefs_path$ = GetValueFromInifile($akt_profile_ini$,"Profile0","Path","")
	if FileExists("%CurrentAppdataDir%\Mozilla\Firefox\\"+$rel_prefs_path$)
		comment "We found the profile and will now patch it ....."
	endif
else
	comment "no firefox profile found for user"
endif
----

At the next example (which simply extends the first example) we show how you may delete things from the profile in the case that this product has been uninstalled. According to what we get from the function `getProductMap` different parts of the script will be executed.

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.3.2"
Message "Example Profile Patch ...."

if getValue("installationstate", getProductMap) = "installed"
	comment "Product is installed"
	Files_profile_copy
	Registry_currentuser_set
	Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini"
endif

if getValue("lastactionrequest", getProductMap) = "uninstall"
	comment "Product was uninstalled"
	Files_profile_del
	Registry_currentuser_del
endif

[Files_profile_copy]
copy "%Scriptpath%\profiles\*.*" "%CurrentAppdataDir%\ACME"

[Registry_currentuser_set]
openkey [HKCU\Software\ACME]
set "show_greeting_window" = "no"

[Files_profile_del]
del -s -f "%CurrentAppdataDir%\ACME"
del "%userprofiledir%\opsi-winst-test.ini"

[Patches_profile_ini]
add [secdummy] dummy1=add1

[Registry_currentuser_del]
deletekey [HKCU\Software\ACME]
----

Now a example which shows how standard installation scripts (setup32.ins and delsub32.ins) may used also as 'userLoginScripts' to avoid unneeded code doubling.

setup32.ins:
[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.3.2"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $ProductId$
DefVar $InstallDir$

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "ACME"
Set $InstallDir$      = "%ProgramFiles32Dir%\ACME"
; ----------------------------------------------------------------
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\\" + $ProductId$ + ".png" $ProductId$

	if FileExists("%ScriptPath%\delsub32.ins")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub32.ins"
	endif

if GetScriptMode = "Machine"
	Message "Installing " + $ProductId$ + " ..."

	comment "Start setup program"
	Winbatch_install

	comment "Patch the local Profiles ..."
	Registry_currentuser_set /AllNtUserDats
	Files_profile_copy /AllNtUserProfiles
	Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini" /AllNtUserProfiles
endif

if GetScriptMode = "Login"
	comment "login part"
	Files_profile_copy
	Registry_currentuser_set
	Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini"
endif


[Winbatch_install]
"%ScriptPath%\setup.exe" /sp- /silent /norestart

[Files_profile_copy]
copy "%Scriptpath%\profiles\*.*" "%CurrentProfileDir%\Appdata\ACME"

[Registry_currentuser_set]
openkey [HKCU\Software\ACME]
set "show_greeting_window" = "no"

[Patches_profile_ini]
add [secdummy] dummy1=add1
----

delsub32.ins:
[source,winst]
----
Message "Uninstalling " + $ProductId$ + " ..."

if GetScriptMode = "Machine"
	comment "The machine part ..."
	Set $UninstallProgram$ = $InstallDir$ + "\uninstall.exe"
	if FileExists($UninstallProgram$)
		comment "Uninstall program found, starting uninstall"
		Winbatch_uninstall
	endif
	; does also work since 4.11.2.1
	Registry_currentuser_del /AllNtUserDats
	Files_profile_del /AllNtUserProfiles
endif

if GetScriptMode = "Login"
	comment "The profile part ..."
	Files_profile_del
	Registry_currentuser_del
endif

[Winbatch_uninstall]
"$UninstallProgram$" /silent /norestart

[Files_profile_del]
del -s -f "%CurrentAppdataDir%\ACME"
del "%userprofiledir%\opsi-winst-test.ini"

[Registry_currentuser_del]
deletekey [HKCU\Software\ACME]
----

Now a variant which is variant of the example before. It makes use of the new primary section +ProfileAction+. This makes the script shorter and it may be still used as installation script and as 'userLoginScript' as well.

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.3.2"

DefVar $ProductId$
DefVar $InstallDir$

Set $ProductId$       = "ACME"
Set $InstallDir$      = "%ProgramFiles32Dir%\ACME"

comment "Show product picture"
ShowBitmap "%ScriptPath%\\" + $ProductId$ + ".png" $ProductId$

Message "Installing " + $ProductId$ + " ..."

comment "Start setup program"
Winbatch_install

comment "Patch the local Profiles ..."
ProfileActions

[ProfileActions]
comment "login part"
Files_profile_copy
Registry_currentuser_set
Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini"

[Winbatch_install]
"%ScriptPath%\setup.exe" /sp- /silent /norestart

[Files_profile_copy]
copy "%Scriptpath%\profiles\*.*" "%CurrentProfileDir%\Appdata\ACME"

[Registry_currentuser_set]
openkey [HKCU\Software\ACME]
set "show_greeting_window" = "no"

[Patches_profile_ini]
add [secdummy] dummy1=add1
----

Now a variant which reminds, if this script (for this product, in this version and this package version) was executed before for this profile.

[source,winst]
----
[Actions]
requiredWinstVersion >= "4.11.3.2"
Message "Example Profile Patch ...."

comment "Did we run this script before ? - and set version stamp in profile"
if not (scriptWasExecutedBefore)
	comment "loginscript was not run yet "
	Files_profile_copy
	Registry_currentuser_set
	Patches_profile_ini "%userprofiledir%\opsi-winst-test.ini"
endif

[Files_profile_copy]
copy "%Scriptpath%\profiles\*.*" "%CurrentAppdataDir%\ACME"

[Registry_currentuser_set]
openkey [HKCU\Software\ACME]
set "show_greeting_window" = "no"

[Patches_profile_ini]
add [secdummy] dummy1=add1
----




[[opsi-manual-userprofile-configuration]]
=== Configuration

In order to use the opsi 'User Profile Management' extension, you have to activate the 'event_user_login' at the opsiclientd configuration.

If the opsi-client-agent at the client is up to date, the ('{opsi-winst}') should be started with the additional parameter '/allloginscripts'.

You may activate the 'event_user_login' at the command line with the following command:

[source, prompt]
----
opsi-admin -d method config_createBool opsiclientd.event_user_login.active "user_login active" true
----

As additional action_processor ('{opsi-winst}') parameter you may use '/silent', which suppress the display of the '{opsi-winst}' window.

[source, prompt]
----
opsi-admin -d method config_createUnicode opsiclientd.event_user_login.action_processor_command "user_login action_processor" "%action_processor.command% /sessionid %service_session% /allloginscripts /silent" "%action_processor.command% /sessionid %service_session% /allloginscripts /silent"
----

These configurations you will also see (and modify) at the opsi management interface (opsi-configed) at the tab 'Host parameters' at the client or server configuration-

[[opsi-manual-userprofile-notification]]
=== Notification

If you have activated the 'event_user_login' (as described above), you will see after every login the user_login_notifier:

.User Login Notifier
image::login-action-notifier.png["User Login Notifier", width=100]







