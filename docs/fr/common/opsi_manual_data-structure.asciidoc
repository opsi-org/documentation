////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; crédits: http://www.opsi.org/credits/
////

:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      12.10.2012
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-api-datastructure-opsi]]
== Service web / méthodes de l'API 


[[opsi-manual-api-datastructure-opsi4]]
=== Service web / Les méthodes API depuis opsi 4.0

[[opsi-manual-api-datastructure-opsi4-overview]]
==== Présentation


Dans opsi 4 la structure des données de tous les backends et les méthodes de service web sont de conception totalement nouvelle. 

La nouvelle conception est orientée objet / base de données. 
Un objet a des propriétés. 

Comme exemple nous allons regarder l'objet 'product'. Un objet de type 'product' qui décrit le produit 'javavm' peut ressembler à ceci:

[source, configfile]
----
"ident": "javavm;1.6.0.20;2"
"id": "javavm"
"description": "Java 1.6"
"changelog": ""
"advice": ""
"userLoginScript": ""
"name": "SunJavaRuntimeEnvironment"
"priority": 0
"packageVersion": "2"
"productVersion": "1.6.0.20"
"windowsSoftwareIds": None
"productClassIds": None
"type": "LocalbootProduct"
"licenseRequired": False
"setupScript": "javavm.ins"
"updateScript": ""
"uninstallScript": "deljvm.ins"
"alwaysScript": ""
"onceScript": ""
"customScript": ""
----
Chaque objet a un ensemble d'opérateurs qui peuvent être utilisées pour travailler avec cet objet. La plupart du temps, ces opérateurs sont:

* 'getObjects' (renvoie les objets)
* 'getHashes' (variante, qui offre pour des raisons de performances les objets du backend en lecture seule. Pour un grand nombre d'objets cette méthode est beaucoup plus rapide de l'appel à 'getObjects')
* 'create'  (créer un objet à l'aise)
* 'createObjects' (créer un ou plusieurs objets)
* 'delete' (supprimer un objet)
* 'deleteObjects' (supprimer un ou plusieurs objets)
* 'getIdents' (renvoie l'id de l'objet)
* 'insertObject' (créer un nouvel objet)
* 'updateObject' (mise à jour d'un objet, si l'objet n'existe pas il sera créé)
* 'updateObjects' (mise à jour d'un ensemble d'objets)

Les noms des méthodes sont concaténés:

'<nom objet>_<opération>'

Selon cette règle de nommage, ces nouvelles méthodes sont facilement différenciés des anciens méthodes 'legacy' de opsi 3, que commencent par 'get', 'set' ou 'create'.

Les méthodes 'getObjects' ont deux paramètres facultatifs:

* 'attributes'
* 'filter'

Le paramètre 'attributes' est utilisé dans la requête uniquement pour certaines propriétés d'un objet. Si vous utilisez des attributs l'objet retourné a toutes les clés d'attributs, mais seulement des valeurs de l'attribut que vous avez demandé et pour tous les attributs qui sont utilisés pour identifier cet objet. Tous les autres attributs ont la valeur 'none'.

Par exemple, en appelant la méthode 'product_getObjects' avec 'attributes:["name"]' pour le produit 'javavm', vous obtiendrez:

[source, configfile]
----
"onceScript": None,
"ident": "javavm;1.6.0.20;2",
"windowsSoftwareIds": None,
"description": None,
"setupScript": None,
"changelog": None,
"customScript": None,
"advice": None,
"uninstallScript": None,
"userLoginScript": None,
"name": "Sun Java Runtime Environment",
"priority": None,
"packageVersion": "2",
"productVersion": "1.6.0.20",
"updateScript": None,
"productClassIds": None,
"alwaysScript": None,
"type": "LocalbootProduct",
"id": "javavm",
"licenseRequired": None
----

Si vous souhaitez ne pas demander des attributs mais que vous voulez utiliser le second paramètre 'filter' vous devez donner comme paramètre d'attribut '[]'.

Le filtre de paramètre est utilisé pour définir les objets que vous voulez obtenir. Par exemple si vous utilisez le filtre '{ "id":"javavm" }' sur la méthode  'product_getObjects' vous aurez seulement l'objet(s) qui décrit le produit 'javavm'.

Si vous utilisez des méthodes qui attendent un ou plusieurs objets, ces objets doivent être donnés à titre d'objets JSON ou en tant que série d'objets JSON. 

Les objets les plus importants sont:

* 'auditHardwareOnHost' (informations sur le matériel client spécifique)
* 'auditHardware' (informations sur le matériel client indépendant)
* 'auditSoftwareOnClient' (informations sur les logiciels spécifiques du client)
* 'auditSoftware' (informations sur les logiciels indépendent du client)
* 'auditSoftwareToLicensePool' (gestion des licences)
* 'configState' (gestion des paramètres d'hôte du client)
* 'config' (administration des paramètres d'hôte par défaut)
* 'group' (administration des groupes)
* 'host'  (serveur et clients)
* 'licenseContract' (gestion des licences)
* 'licenseOnClient' (gestion des licences)
* 'licensePool' (gestion des licences)
* 'objectToGroup' (administration des groupes)
* 'productDependency' (dépendances du produit)
* 'productOnClient' (information sur les clients spécifiques à un produit, par exemple l'état d'installation)
* 'productOnDepot' (informations du dépôt spécifiques à un produit)
* 'productPropertyState' (dépôt ou client spécifique, paramètres de propriété des produits)
* 'productProperty' (définition des propriétés du produit)
* 'product' (méta-données du produit)
* 'softwareLicenseToLicensePool' (gestion des licences)
* 'softwareLicense' (gestion des licences)


En plus des objets et des méthodes décrites il y a encore plus pour des opérations spéciales.

Cette conception:

* est créé pour la transmission rapide des informations sur un grand nombre de clients
* filtrer les données par une syntaxe unifiée
* permettre de vérifier la syntaxe correcte de toutes les entrées

Conformément à ces données nous obtenons une stabilité et des performances accrues.

[[opsi-manual-api-datastructure-opsi4-storage]]
==== Les objets de stockage de données

[[opsi-manual-api-datastructure-opsi4-storage-host]]
===== 'host'  (serveur et clients)

Exemple pour un OpsiClient:

[source,configfile]
----
 method host_getObjects [] {"id":"xpclient.vmnat.local"}
[
          {
          "ident" : "xpclient.vmnat.local",
          "description" : "",
          "created" : "2012-03-22 12:13:52",
          "inventoryNumber" : "",
          "ipAddress" : "172.16.166.101",
          "notes" : "Created by opsi-deploy-client-agent at Wed, 24 Aug 2011 10:24:36",
          "oneTimePassword" : "",
          "lastSeen" : "2012-03-30 16:20:04",
          "hardwareAddress" : "00:0c:29:35:70:a7",
          "opsiHostKey" : "1234567890abcef1234567890abcdef",
          "type" : "OpsiClient",
          "id" : "xpclient.vmnat.local"
          }
]
----

La plupart de ces données sont affichées dans l'onglet 'clients' de opsi-configed.

Les types possibles sont:

* 'OpsiClient'
* 'OpsiConfigserver' (ce qui signifie implicitement que c'est aussi un 'OpsiDepotserver')
* 'OpsiDepotserver'

Les types serveur ont des données différentes et supplémentaires.

Exemple pour un serveur:

[source,configfile]
----
 method host_getObjects [] {"id":"sepiolina.vmnat.local"}
[
          {
          "masterDepotId" : null,
          "ident" : "sepiolina.vmnat.local",
          "networkAddress" : "172.16.166.0/255.255.255.128",
          "description" : "",
          "inventoryNumber" : "",
          "ipAddress" : "172.16.166.1",
          "repositoryRemoteUrl" : "webdavs://sepiolina.vmnat.local:4447/repository",
          "depotLocalUrl" : "file:///var/lib/opsi/depot",
          "isMasterDepot" : true,
          "notes" : "",
          "hardwareAddress" : null,
          "maxBandwidth" : 0,
          "repositoryLocalUrl" : "file:///var/lib/opsi/repository",
          "opsiHostKey" : "1234567890abcef1234567890abcdef",
          "type" : "OpsiConfigserver",
          "id" : "sepiolina.vmnat.local",
          "depotWebdavUrl" : "webdavs://sepiolina:4447/depot",
          "depotRemoteUrl" : "smb://sepiolina/opsi_depot"
          }
]
----
La plupart de ces données sont affichées dans la 'configuration de dépôt' de opsi-configed.

[[opsi-manual-api-datastructure-opsi4-storage-group]]
===== 'group' (l'administration des groupes)

Décrit les groupes et leur structure hiérarchique.

Exemple pour un objet de groupe:

[source,configfile]
----
 method group_getObjects
 [
       {
          "ident" : "sub2",
          "description" : "sub2",
          "notes" : "",
          "parentGroupId" : null,
          "type" : "HostGroup",
          "id" : "sub2"
          },
          {
          "ident" : "subsub",
          "description" : "subsub",
          "notes" : "",
          "parentGroupId" : "sub2",
          "type" : "HostGroup",
          "id" : "subsub"
          }
]
----

[[opsi-manual-api-datastructure-opsi4-storage-objectToGroup]]
===== 'objectToGroup' (l'administration des groupes)

Décrit l'appartenance d'un objet dans un groupe.

On trouve 'Hostgroups' et 'Productgroups'

Exemple pour un objet objectToGroup:

[source,configfile]
----
 method objectToGroup_getObjects
[
         {
          "groupType" : "HostGroup",
          "ident" : "HostGroup;sub2;win7.vmnat.local",
          "type" : "ObjectToGroup",
          "groupId" : "sub2",
          "objectId" : "win7.vmnat.local"
          },
          {
          "groupType" : "HostGroup",
          "ident" : "HostGroup;subsub;win7x64.vmnat.local",
          "type" : "ObjectToGroup",
          "groupId" : "subsub",
          "objectId" : "win7x64.vmnat.local"
          },
        {
          "groupType" : "ProductGroup",
          "ident" : "ProductGroup;opsiessentials;opsi-client-agent",
          "type" : "ObjectToGroup",
          "groupId" : "opsiessentials",
          "objectId" : "opsi-client-agent"
          },
          {
          "groupType" : "ProductGroup",
          "ident" : "ProductGroup;opsiessentials;opsi-winst",
          "type" : "ObjectToGroup",
          "groupId" : "opsiessentials",
          "objectId" : "opsi-winst"
          }
]
----

[[opsi-manual-api-datastructure-opsi4-storage-product]]
===== 'product' (les méta-données du produit)

Décrit les métadonnées d'un produit qui sont définies lors de la création du paquet.

Exemple pour un objet produit:

[source,configfile]
----
 method product_getObjects [] {"id":"jedit","productVersion":"4.5"}
[
          {
          "onceScript" : "",
          "ident" : "jedit;4.5;3",
          "windowsSoftwareIds" :
                    [

                    ],
          "description" : "jEdit with opsi-winst Syntax-Highlighting",
          "setupScript" : "setup.ins",
          "changelog" : "",
          "customScript" : "",
          "advice" : "",
          "uninstallScript" : "uninstall.ins",
          "userLoginScript" : "",
          "name" : "jEdit programmer's text editor",
          "priority" : 0,
          "packageVersion" : "3",
          "productVersion" : "4.5",
          "updateScript" : "update.ins",
          "productClassIds" :
                    [

                    ],
          "alwaysScript" : "",
          "type" : "LocalbootProduct",
          "id" : "jedit",
          "licenseRequired" : false
          }
]
----
NOTE: Si vous avez des serveurs de dépôt multiple, vous pouvez avoir des versions différentes d'un même produit.

Les entrées 'productClassIds' et 'windowsSoftwareIds' ne sont pas utilisés pour le moment.

[[opsi-manual-api-datastructure-opsi4-storage-productProperty]]
===== 'productProperty' (Définition des propriétés du produit)

Décrit les propriétés d'un produit qui sont définies lors de la création du paquet.

Exemple pour un objet productProperty:

[source,configfile]
----
 method productProperty_getObjects [] {"productId":"jedit","productVersion":"4.5"}
[
          {
          "ident" : "jedit;4.5;3;start_server",
          "description" : "Should the jedit derver started at every startup ?",
          "editable" : false,
          "defaultValues" :
                    [
                    false
                    ],
          "multiValue" : false,
          "productVersion" : "4.5",
          "possibleValues" :
                    [
                    false,
                    true
                    ],
          "packageVersion" : "3",
          "type" : "BoolProductProperty",
          "propertyId" : "start_server",
          "productId" : "jedit"
          }
]
----
NOTE: Les valeurs par défaut réelles sont stockées dans le contexte du dépôt dans un objet productPropertyState.

[[opsi-manual-api-datastructure-opsi4-storage-productPropertyState]]
===== 'productPropertyState' (Paramètres de propriété des produits spécifiques au dépôt ou aux clients)

Décrit: +
* la valeur par défaut d'une propriété du produit dans un dépôt donné
propriétés d'un produit qui sont définies lors de la création du paquet.
* les paramètres spécifiques du client pour les propriétés du produit.

Exemple pour un objet productPropertyState:

[source,configfile]
----
 method productPropertyState_getObjects [] {"productId":"jedit"}
[
          {
          "ident" : "jedit;start_server;sepiolina.vmnat.local",
          "objectId" : "sepiolina.vmnat.local",
          "values" :
                    [
                    false
                    ],
          "type" : "ProductPropertyState",
          "propertyId" : "start_server",
          "productId" : "jedit"
          },
         {
          "ident" : "jedit;start_server;xpclient.vmnat.local",
          "objectId" : "xpclient.vmnat.local",
          "values" :
                    [
                    true
                    ],
          "type" : "ProductPropertyState",
          "propertyId" : "start_server",
          "productId" : "jedit"
          }

]
----


[[opsi-manual-api-datastructure-opsi4-storage-productDependency]]
===== 'productDependency' (dépendances du produit)

Décrit les dépendances d'un produit à un autre produit tel qu'il est défini lors de la création du package.

Exemple pour un objet productDependency:

[source,configfile]
----
method productDependency_getObjects [] {"productId":"jedit","productVersion":"4.5"}
[
          {
          "ident" : "jedit;4.5;3;setup;javavm",
          "productAction" : "setup",
          "requiredPackageVersion" : null,
          "requirementType" : "before",
          "requiredInstallationStatus" : "installed",
          "productVersion" : "4.5",
          "requiredProductId" : "javavm",
          "requiredAction" : null,
          "requiredProductVersion" : null,
          "type" : "ProductDependency",
          "packageVersion" : "3",
          "productId" : "jedit"
          }
]
----

[[opsi-manual-api-datastructure-opsi4-storage-productOnClient]]
===== 'productOnClient' (informations client spécifique à un produit, par exemple l'état de l'installation)

Décrit les produits dans lesquels versions sont installées sur lequel client..

Exemple pour un objet productOnClient:

[source,configfile]
----
 method productOnClient_getObjects [] {"productId":"jedit","clientId":"xpclient.vmnat.local"}
[
          {
          "ident" : "jedit;LocalbootProduct;xpclient.vmnat.local",
          "actionProgress" : "",
          "actionResult" : "successful",
          "clientId" : "xpclient.vmnat.local",
          "modificationTime" : "2012-03-30 15:49:04",
          "actionRequest" : "none",
          "targetConfiguration" : "installed",
          "productVersion" : "4.5",
          "productType" : "LocalbootProduct",
          "lastAction" : "setup",
          "packageVersion" : "3",
          "actionSequence" : -1,
          "type" : "ProductOnClient",
          "installationStatus" : "installed",
          "productId" : "jedit"
          }
]
----

[[opsi-manual-api-datastructure-opsi4-storage-productOnDepot]]
===== 'productOnDepot' (informations dépôt spécifiques à un produit)

Décrit le produit qui est installé et sa version sur un dépôt donné..

Exemple pour un objet productOnDepot:

[source,configfile]
----
 method productOnDepot_getObjects [] {"productId":"jedit"}
[
          {
          "ident" : "jedit;LocalbootProduct;4.4.1;2;depotserver.vmnat.local",
          "locked" : false,
          "productVersion" : "4.4.1",
          "productType" : "LocalbootProduct",
          "depotId" : "depotserver.vmnat.local",
          "type" : "ProductOnDepot",
          "packageVersion" : "2",
          "productId" : "jedit"
          },
          {
          "ident" : "jedit;LocalbootProduct;4.5;3;sepiolina.vmnat.local",
          "locked" : false,
          "productVersion" : "4.5",
          "productType" : "LocalbootProduct",
          "depotId" : "sepiolina.vmnat.local",
          "type" : "ProductOnDepot",
          "packageVersion" : "3",
          "productId" : "jedit"
          }
]
----
NOTE: Si vous avez des serveurs de dépôt multiple, vous pouvez avoir des versions différentes d'un même produit.


[[opsi-manual-api-datastructure-opsi4-storage-config]]
===== 'config' (l'administration des valeurs par défaut des paramètres hôte)

Décrit le paramètre 'hôte' de la 'Configuration serveur' de opsi-configed.

Exemple pour un objet config:

[source,configfile]
----
 method config_getObjects [] {"id":"opsiclientd.event_gui_startup.active"}
[
          {
          "ident" : "opsiclientd.event_gui_startup.active",
          "description" : "gui_startup active",
          "defaultValues" :
                    [
                    true
                    ],
          "editable" : false,
          "multiValue" : false,
          "possibleValues" :
                    [
                    false,
                    true
                    ],
          "type" : "BoolConfig",
          "id" : "opsiclientd.event_gui_startup.active"
          }
]
----

[[opsi-manual-api-datastructure-opsi4-storage-configState]]
===== 'configState' (l'administration des paramètres de l'hôte client)

Décrit le paramètre 'hôte' de la 'configuration du client' de opsi-configed.

Exemple pour un objet configState:

[source,configfile]
----
 method configState_getObjects [] {"configId":"opsiclientd.event_gui_startup.active"}
[
          {
          "configId" : "opsiclientd.event_gui_startup.active",
          "ident" : "opsiclientd.event_gui_startup.active;wanclient.vmnat.local",
          "values" :
                    [
                    false
                    ],
          "objectId" : "wanclient.vmnat.local",
          "type" : "ConfigState"
          }
]
----
NOTE: Un objet 'configState' ne peut être créé sans objet un existant 'config' auquel il fait référence.


[[opsi-manual-api-datastructure-opsi4-storage-auditHardwareOnHost]]
===== 'auditHardwareOnHost' (informations sur le matériel spécifique au client)

Décrit les types de matériels détectés (y compris les valeurs spécifiques du client). L'idée est que vous verrez ici les données spécifiques du client et dans `auditHardware` une seule entrée pour une carte réseau qui est utilisé dans tous vos ordinateurs. +
Malheureusement, dans la réalité cette idée ne fonctionne pas comme vous pourriez le penser.


Exemple pour un objet auditHardwareOnHost:

[source,configfile]
----
 method auditHardwareOnHost_getObjects [] {"hostId":"xpclient.vmnat.local","hardwareClass":"NETWORK_CONTROLLER","ipAddress":"172.16.166.101"}
[
          {
          "vendorId" : "1022",
          "macAddress" : "00:0C:29:35:70:A7",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "state" : 1,
          "deviceType" : "PCI",
          "subsystemVendorId" : "2000",
          "ipEnabled" : "True",
          "type" : "AuditHardwareOnHost",
          "firstseen" : "2012-03-30 15:48:15",
          "revision" : "10",
          "hostId" : "xpclient.vmnat.local",
          "vendor" : "Advanced Micro Devices (AMD)",
          "description" : "Ethernetadapter der AMD-PCNET-Familie",
          "subsystemDeviceId" : "1022",
          "deviceId" : "2000",
          "autoSense" : null,
          "netConnectionStatus" : "Connected",
          "maxSpeed" : null,
          "name" : "Ethernetadapter der AMD-PCNET-Familie",
          "serialNumber" : null,
          "lastseen" : "2012-03-30 15:48:15",
          "model" : null,
          "ipAddress" : "172.16.166.101",
          "adapterType" : "Ethernet 802.3"
          },
          {
          "vendorId" : "1022",
          "macAddress" : "00:0C:29:35:70:A7",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "state" : 0,
          "deviceType" : "PCI",
          "subsystemVendorId" : "2000",
          "ipEnabled" : "True",
          "type" : "AuditHardwareOnHost",
          "firstseen" : "2012-03-08 14:26:14",
          "revision" : "10",
          "hostId" : "xpclient.vmnat.local",
          "vendor" : "VMware, Inc.",
          "description" : "VMware Accelerated AMD PCNet Adapter",
          "subsystemDeviceId" : "1022",
          "deviceId" : "2000",
          "autoSense" : null,
          "netConnectionStatus" : "Connected",
          "maxSpeed" : null,
          "name" : "VMware Accelerated AMD PCNet Adapter",
          "serialNumber" : null,
          "lastseen" : "2012-03-10 14:47:15",
          "model" : null,
          "ipAddress" : "172.16.166.101",
          "adapterType" : "Ethernet 802.3"
          },
   {
          "vendorId" : "1022",
          "macAddress" : "00:0c:29:35:70:a7",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "state" : 0,
          "deviceType" : null,
          "subsystemVendorId" : "1022",
          "ipEnabled" : null,
          "type" : "AuditHardwareOnHost",
          "firstseen" : "2012-02-29 15:43:21",
          "revision" : "10",
          "hostId" : "xpclient.vmnat.local",
          "vendor" : "Advanced Micro Devices [AMD]",
          "description" : "Ethernet interface",
          "subsystemDeviceId" : "2000",
          "deviceId" : "2000",
          "autoSense" : "",
          "netConnectionStatus" : "yes",
          "maxSpeed" : null,
          "name" : "79c970 [PCnet32 LANCE]",
          "serialNumber" : "00:0c:29:35:70:a7",
          "lastseen" : "2012-03-30 14:58:30",
          "model" : "79c970 [PCnet32 LANCE]",
          "ipAddress" : "172.16.166.101",
          "adapterType" : ""
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-auditHardware]]
===== 'auditHardware' (informations sur le matériel client indépendant)

Décrit les types de matériels détectés (indépendante des valeurs spécifiques du client). L'idée est que vous verrez ici une seule entrée pour une carte réseau qui est utilisé dans tous vos ordinateurs. +
Malheureusement, dans la réalité cette idée ne fonctionne pas comme vous pourriez le penser.

Exemple pour un objet auditHardware:

[source,configfile]
----
 method auditHardware_getObjects [] {"hardwareClass":"NETWORK_CONTROLLER","vendorId":"1022"}
[
          {
          "vendorId" : "1022",
          "deviceId" : "2000",
          "maxSpeed" : null,
          "vendor" : "Advanced Micro Devices [AMD]",
          "name" : "79c970 [PCnet32 LANCE]",
          "subsystemDeviceId" : "2000",
          "deviceType" : null,
          "subsystemVendorId" : "1022",
          "autoSense" : "",
          "model" : "79c970 [PCnet32 LANCE]",
          "revision" : "10",
          "type" : "AuditHardware",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "adapterType" : "",
          "description" : "Ethernet interface"
          },
          {
          "vendorId" : "1022",
          "deviceId" : "2000",
          "maxSpeed" : null,
          "vendor" : "VMware, Inc.",
          "name" : "VMware Accelerated AMD PCNet Adapter",
          "subsystemDeviceId" : "1022",
          "deviceType" : "PCI",
          "subsystemVendorId" : "2000",
          "autoSense" : null,
          "model" : null,
          "revision" : "10",
          "type" : "AuditHardware",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "adapterType" : "Ethernet 802.3",
          "description" : "VMware Accelerated AMD PCNet Adapter"
          },
          {
          "vendorId" : "1022",
          "deviceId" : "2000",
          "maxSpeed" : null,
          "vendor" : "Advanced Micro Devices (AMD)",
          "name" : "Ethernetadapter der AMD-PCNET-Familie",
          "subsystemDeviceId" : "1022",
          "deviceType" : "PCI",
          "subsystemVendorId" : "2000",
          "autoSense" : null,
          "model" : null,
          "revision" : "10",
          "type" : "AuditHardware",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "adapterType" : "Ethernet 802.3",
          "description" : "Ethernetadapter der AMD-PCNET-Familie"
          },
  {
          "vendorId" : "1022",
          "deviceId" : "2000",
          "maxSpeed" : null,
          "vendor" : "Advanced Micro Devices (AMD)",
          "name" : "Ethernetadapter der AMD-PCNET-Familie",
          "subsystemDeviceId" : "1022",
          "deviceType" : "PCI",
          "subsystemVendorId" : "2000",
          "autoSense" : null,
          "model" : null,
          "revision" : "10",
          "type" : "AuditHardware",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "adapterType" : "Ethernet 802.3",
          "description" : "Ethernetadapter der AMD-PCNET-Familie"
          },
          {
          "vendorId" : "1022",
          "deviceId" : "2000",
          "maxSpeed" : null,
          "vendor" : "Advanced Micro Devices (AMD)",
          "name" : null,
          "subsystemDeviceId" : "2000",
          "deviceType" : "PCI",
          "subsystemVendorId" : "1022",
          "autoSense" : null,
          "model" : "",
          "revision" : null,
          "type" : "AuditHardware",
          "hardwareClass" : "NETWORK_CONTROLLER",
          "adapterType" : null,
          "description" : "Ethernetadapter der AMD-PCNET-Familie"
          },
(....)
[
----


[[opsi-manual-api-datastructure-opsi4-storage-auditSoftwareOnClient]]
===== 'auditSoftwareOnClient' (informations sur les logiciels client spécifiques)

Décrit les types de logiciels détectés (y compris les valeurs spécifiques du client). L'idée est que vous verrez ici les données spécifiques du client et dans `auditSoftware` une seule entrée pour un logiciel de bureau qui est utilisé dans tous vos ordinateurs.

Exemple pour un objet auditSoftwareOnClient:

[source,configfile]
----
 method auditSoftwareOnClient_getObjects  [] {"name":"jEdit 4.5.0","clientId":"xpclient.vmnat.local"}
[
          {
          "ident" : "jEdit 4.5.0;4.5.0;;;x86;xpclient.vmnat.local",
          "licenseKey" : "",
          "name" : "jEdit 4.5.0",
          "uninstallString" : "\\\"C:\\\\Programme\\\\jEdit\\\\unins000.exe\\\"",
          "usageFrequency" : -1,
          "clientId" : "xpclient.vmnat.local",
          "lastUsed" : "0000-00-00 00:00:00",
          "subVersion" : "",
          "language" : "",
          "state" : 1,
          "version" : "4.5.0",
          "lastseen" : "2012-03-30 16:19:55",
          "binaryName" : "",
          "type" : "AuditSoftwareOnClient",
          "firstseen" : "2012-03-30 16:19:55",
          "architecture" : "x86"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-auditSoftware]]
===== 'auditSoftware' (informations sur les logiciels client indépendants)

Décrit les types de logiciels détectés (indépendante des valeurs spécifiques du client). L'idée est que vous verrez ici une seule entrée pour un logiciel de bureau qui est utilisé dans tous vos ordinateurs.

Exemple pour un objet auditSoftware:

[source,configfile]
----
 method auditSoftware_getObjects  [] {"name":"jEdit 4.5.0"}
[
          {
          "windowsDisplayVersion" : "4.5.0",
          "ident" : "jEdit 4.5.0;4.5.0;;;x64",
          "name" : "jEdit 4.5.0",
          "windowsSoftwareId" : "jedit_is1",
          "windowsDisplayName" : "jEdit 4.5.0",
          "installSize" : -1,
          "subVersion" : "",
          "language" : "",
          "version" : "4.5.0",
          "architecture" : "x64",
          "type" : "AuditSoftware"
          },
          {
          "windowsDisplayVersion" : "4.5.0",
          "ident" : "jEdit 4.5.0;4.5.0;;;x86",
          "name" : "jEdit 4.5.0",
          "windowsSoftwareId" : "jedit_is1",
          "windowsDisplayName" : "jEdit 4.5.0",
          "installSize" : -1,
          "subVersion" : "",
          "language" : "",
          "version" : "4.5.0",
          "architecture" : "x86",
          "type" : "AuditSoftware"
          }
]

----


[[opsi-manual-api-datastructure-opsi4-storage-auditSoftwareToLicensePool]]
===== 'auditSoftwareToLicensePool' (gestion des licences)

Décrit les regroupements de licences assignés à quels motifs 'auditSoftware'.

Exemple pour un objet auditSoftwareToLicensePool:

[source,configfile]
----
 method auditSoftwareToLicensePool_getObjects [] {"licensePoolId":"win7-msdn-prof"}
[
          {
          "ident" : "Windows 7 Professional N;6.1;00376-165;de-DE;x64;win7-msdn-prof",
          "name" : "Windows 7 Professional N",
          "language" : "de-DE",
          "subVersion" : "00376-165",
          "licensePoolId" : "win7-msdn-prof",
          "version" : "6.1",
          "architecture" : "x64",
          "type" : "AuditSoftwareToLicensePool"
          },
          {
          "ident" : "Windows 7 Professional N;6.1;00376-165;de-DE;x86;win7-msdn-prof",
          "name" : "Windows 7 Professional N",
          "language" : "de-DE",
          "subVersion" : "00376-165",
          "licensePoolId" : "win7-msdn-prof",
          "version" : "6.1",
          "architecture" : "x86",
          "type" : "AuditSoftwareToLicensePool"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-softwareLicenseToLicensePool]]
===== 'softwareLicenseToLicensePool' (gestion des licences)

Décrit quels 'softwareLicenseId' est affectée à quels 'licensePoolId'.

Exemple pour un objet softwareLicenseToLicensePool:

[source,configfile]
----
method softwareLicenseToLicensePool_getObjects [] {"licensePoolId":"win7-msdn-prof"}
[
          {
          "licensePoolId" : "win7-msdn-prof",
          "softwareLicenseId" : "uib-msdn-win7-vol",
          "ident" : "uib-msdn-win7-vol;win7-msdn-prof",
          "licenseKey" : "12345-12345-12345-12345-3dbv6",
          "type" : "SoftwareLicenseToLicensePool"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-softwareLicense]]
===== 'softwareLicense' (gestion des licences)

Décrit les licences logicielles existantes et leurs méta-données.

Exemple pour un objet softwareLicense:

[source,configfile]
----
 method softwareLicense_getObjects [] {"id":"uib-msdn-win7-vol"}
[
          {
          "ident" : "uib-msdn-win7-vol;msdn-uib",
          "maxInstallations" : 0,
          "boundToHost" : null,
          "expirationDate" : "0000-00-00 00:00:00",
          "licenseContractId" : "msdn-uib",
          "type" : "VolumeSoftwareLicense",
          "id" : "uib-msdn-win7-vol"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-licenseContract]]
===== 'licenseContract' (gestion des licences)

Décrit les contrats de licences existants et leurs méta-données.

Exemple pour un objet licenseContract:

[source,configfile]
----
 method licenseContract_getObjects [] {"id":"msdn-uib"}
[
          {
          "ident" : "msdn-uib",
          "description" : "",
          "conclusionDate" : "2011-04-22 00:00:00",
          "notificationDate" : "0000-00-00 00:00:00",
          "notes" : "",
          "expirationDate" : "0000-00-00 00:00:00",
          "partner" : "Microsoft",
          "type" : "LicenseContract",
          "id" : "msdn-uib"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-licenseOnClient]]
===== 'licenseOnClient' (gestion des licences)

Décrit quel licence est utilisé par quel client.

Exemple pour un objet licenseOnClient:

[source,configfile]
----
 method licenseOnClient_getObjects  [] {"clientId":"win7client.vmnat.local"}
[
          {
          "softwareLicenseId" : "uib-msdn-win7-vol",
          "ident" : "uib-msdn-win7-vol;win7-msdn-prof;win7client.vmnat.local",
          "licenseKey" : "12345-12345-12345-12345-3dbv6",
          "notes" : "",
          "clientId" : "win7client.vmnat.local",
          "licensePoolId" : "win7-msdn-prof",
          "type" : "LicenseOnClient"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-storage-licensePool]]
===== 'licensePool' (gestion des licences)

Décrit le pool de licences et à quel produit opsi est attribuée.

Exemple pour un objet licensePool:

[source,configfile]
----
 method licensePool_getObjects [] {"id":"win7-msdn-prof"}
[
          {
          "ident" : "win7-msdn-prof",
          "type" : "LicensePool",
          "description" : "MSDN Keys",
          "productIds" :
                    [
                    "win7",
                    "win7-x64"
                    ],
          "id" : "win7-msdn-prof"
          }
]
----


[[opsi-manual-api-datastructure-opsi4-special]]
==== Les objets spéciaux

NOTE: Ce chapitre doit être écrit

[[opsi-manual-api-datastructure-opsi3]]
=== Les méthodes opsi3
Ces méthodes sont encore disponibles en tant que 'anciennes méthodes', ce qui signifie que les appels à ces méthodes sont mappées aux nouvelles méthodes en interne.

Voici une courte liste de certaines méthodes avec une courte description. Ceci est principalement conçu pour l'orientation et non pas comme une référence complète. La courte description ne doit pas nécessairement fournir toutes les informations dont vous avez besoin pour utiliser cette méthode.

[source,prompt]
----
method addHardwareInformation hostId, info
----

Ajoute des informations sur le matériel de l'ordinateur <hostid>. Le hachage de <info> est passé. Les informations existantes seront écrasées pour la correspondance des clés. Applicable uniquement pour les clés spéciales.

[source,prompt]
----
method authenticated
----

Prouver si l'authentification sur le serveur a réussi.

[source,prompt]
----
method checkForErrors
----

Test du backend pour la cohérence (à présent uniquement disponible pour les fichiers backend).

[source,prompt]
----
method createClient clientName, domain, description=None, notes=None
----

Crée un nouveau client.

[source,prompt]
----
method createGroup groupId, members = [], description = ""
----

Crée un groupe de clients (tel qu'utilisé par the opsi-Configed).

[source,prompt]
----
method createLicenseKey productId, licenseKey
----

Assigne une clé de licence (supplémentaires) pour le produit <productId>.

[source,prompt]
----
method createLocalBootProduct productId, name, productVersion, packageVersion, licenseRequired=0, setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="", priority=10, description="", advice="", productClassNames=('localBoot')
----

Crée un nouveau produit localBoot (produit opsi-winst).

[source,prompt]
----
method createNetBootProduct productId, name, productVersion, packageVersion, licenseRequired=0, setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="", priority=10, description="", advice="", productClassNames=('netboot')
----
Crée un nouveau produit netBoot (image de démarrage).

[source,prompt]
----
method createOpsiBase
----

Pour usage interne, seulement avec le backend LDAP.

[source,prompt]
----
method createProduct productType, productId, name, productVersion, packageVersion, licenseRequired=0,setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="", priority=10, description="", advice="", productClassNames=""
----

Crée un nouveau produit.

[source,prompt]
----
method createProductDependency productId, action, requiredProductId="", requiredProductClassId="", requiredAction="", requiredInstallationStatus="", requirementType=""
----

Crée des dépendances du produit.

[source,prompt]
----
method createProductPropertyDefinition productId, name, description=None, defaultValue=None, possibleValues=[]
----

Crée les propriétés du produit.

[source,prompt]
----
method createServer serverName, domain, description=None
----

Crée un nouveau serveur dans le backend LDAP.

[source,prompt]
----
method createServerProduct  productId, name, productVersion, packageVersion, licenseRequired=0,setupScript="", uninstallScript="", updateScript="", alwaysScript="", onceScript="", priority=10, description="", advice="", productClassNames=('server')
----

Pas encore implémenté – pour une utilisation future.

[source,prompt]
----
method deleteClient clientId
----

Supprime un client.

[source,prompt]
----
method deleteGeneralConfig objectId
----

Supprime une configuration client ou une configuration de domaine.

[source,prompt]
----
method deleteGroup groupId
----

Supprime un groupe de clients.

[source,prompt]
----
method deleteHardwareInformation hostId
----

Supprime toutes les informations sur le matériel de l'ordinateur <hostid>.

[source,prompt]
----
method deleteLicenseKey productId, licenseKey
----

Supprime une clé de licence pour le produit <productId>.

[source,prompt]
----
method deleteNetworkConfig objectId
----

Supprime la configuration réseau (Par exemple l'entrée dépôt de partage) pour un client ou un domaine.

[source,prompt]
----
method deleteOpsiHostKey hostId
----

Supprime un pckey de la base de données pckey.

[source,prompt]
----
method deleteProduct productId
----

Supprime un produit de la base de données.

[source,prompt]
----
method deleteProductDependency productId, action, requiredProductId="", requiredProductClassId="", requirementType=""
----

Supprime les dépendances du produit. 

[source,prompt]
----
method deleteProductProperties productId *objectId
----

Supprime toutes les propriétés d'un produit.

[source,prompt]
----
method deleteProductProperty productId property *objectId
----

Supprimer une seule propriété du produit.

[source,prompt]
----
method deleteProductPropertyDefinition productId, name
method deleteProductPropertyDefinitions productId
----

Supprime une seule propriété ou toutes les propriétés du produit <productId>.

[source,prompt]
----
method deleteServer serverId
----

Supprime une configuration de serveur

[source,prompt]
----
method exit
----

Quitter 'opsi-admin'.

[source,prompt]
----
method getBackendInfos_listOfHashes
----

Fournit des informations sur les backends disponibles sur le serveur de dépôt opsi et qui d'entre eux sont activés.

[source,prompt]
----
method getBootimages_list
----

Fournitures la liste des images de démarrage disponibles.

[source,prompt]
----
method getClientIds_list serverId = None, groupId = None, productId = None, installationStatus = None, actionRequest = None
----

Fournit une liste de clients qui répondent aux critères affectés.

[source,prompt]
----
method getClients_listOfHashes serverId = None, groupId = None, productId = None, installationStatus = None, actionRequest = No
----

Fournit une longue liste de clients qui répondent aux critères affectés (avec la description, des notes et 'vu la dernière fois' pour chaque client).

[source,prompt]
----
method getDefaultNetBootProductId clientId
----

Fournit le produit netboot (par exemple: logiciel système) qui sera installé lorsque l'image de démarrage 'install' est attribué.

[source,prompt]
----
method getDomain hostId
----
Fournit le domaine.

[source,prompt]
----
method getGeneralConfig_hash objectId
----

Fournit la configuration générale d'un client ou d'un domaine.

[source,prompt]
----
method getGroupIds_list
----

Fournit la liste des groupes de clients enregistrés.

[source,prompt]
----
opsi-admin -d -S method auditHardwareOnHost_getObjects '[]' '{"hostId":"<hostId"}'
----

Fournit les informations matériel de l'ordinateur spécifié.

[source,prompt]
----
method getHostId hostname
----

Fournit l'ID hôte du nom d'hôte spécifié.

[source,prompt]
----
method getHost_hash hostId
----

Liste des propriétés de l'ordinateur spécifié.

[source,prompt]
----
method getHostname hostId
----

Fournit le nom d'hôte de l'ID hôte spécifié.

[source,prompt]
----
method getInstallableLocalBootProductIds_list clientId
----

Fournit une liste de tous les produits localBoot qui pourraient être installés sur le client.

[source,prompt]
----
method getInstallableNetBootProductIds_list clientId
----

Fournit une liste de tous les produits netBoot qui pourraient être installés sur le client.

[source,prompt]
----
method getInstallableProductIds_list clientId
----

Fournit une liste de tous les produits qui pourraient être installés sur le client.

[source,prompt]
----
method getInstalledLocalBootProductIds_list hostId
----

Fournit une liste de tous les produits localBoot qui sont installés sur le client.

[source,prompt]
----
method getInstalledNetBootProductIds_list hostId
----

Fournit une liste de tous les produits netBoot products qui sont installés sur le client ou sur le serveur.

[source,prompt]
----
method getInstalledProductIds_list hostId
----

Fournit une liste des produits installés pour un client ou un serveur.

[source,prompt]
----
method getIpAddress hostId
----

Fournit l'adresse IP d'un hôte.

[source,prompt]
----
method getLicenseKey productId, clientId
----

Fournit une clé de licence disponibles du produit spécifié ou la clé de licence du produit qui est attribué au client.

[source,prompt]
----
method getLicenseKeys_listOfHashes productId
----

Fournit une liste de toutes les clés de licence pour le produit spécifié.

[source,prompt]
----
method getLocalBootProductIds_list
----

Fournit une liste de tous les produits localBoot connus (par exemple dans l'arbre LDAP).

[source,prompt]
----
method getLocalBootProductStates_hash clientIds = []
----

Fournit, pour tous les clients, l'état ​​de l'installation et la requête d'action de tous les produits localBoot.

[source,prompt]
----
method getMacAddresses_list hostId
----

Fournit l'adresse MAC de l'ordinateur spécifié.

[source,prompt]
----
method getNetBootProductIds_list
----

Fournit une liste de tous les produits NetBoot.

[source,prompt]
----
method getNetBootProductStates_hash clientIds = []
----

Fournit pour tous les clients l'état ​​de l'installation et la requête d'action de tous les produits netBoot.

[source,prompt]
----
method getNetworkConfig_hash objectId
----

Fournit les configurations réseau spécifiques d'un client ou d'un domaine.

[source,prompt]
----
method getOpsiHostKey hostId
----

Fournit le pckey de l'ID hôte spécifié.

[source,prompt]
----
method getPcpatchPassword hostId
----

Fournit le mot de passe 'pcpatch' (crypté avec la 'pckey' de 'hostId').

[source,prompt]
----
method getPossibleMethods_listOfHashes
----

Fournit la liste des méthodes appelables (approximativement comme dans ce chapitre).


[source,prompt]
----
method getPossibleProductActionRequests_list
----

Affiche la liste des demandes d'action disponibles dans opsi.

[source,prompt]
----
method getPossibleProductActions_hash
----

Fournit les actions disponibles pour chaque produit ('setup', 'deinstall' , ....).

[source,prompt]
----
method getPossibleProductActions_list productId=softprod
----


Fournit la liste de toutes les actions ('setup', 'deinstall',....).

[source,prompt]
----
method getPossibleProductInstallationStatus_list
----

Fournit la liste de tous les états d'installation ('installed', 'not_installed',... )

[source,prompt]
----
method getPossibleRequirementTypes_list
----

Fournit la liste des types d'exigence du produit ('before', 'after', ... )

[source,prompt]
----
method getProductActionRequests_listOfHashes clientId
----

Fournit la liste des actions à venir du client spécifiée.

[source,prompt]
----
method getProductDependencies_listOfHashes productId = None
----

Fournit la liste des dépendances de tous les produits ou du produit spécifié.

[source,prompt]
----
method getProductIds_list productType = None, hostId = None, installationStatus = None
----

Fournit une liste de produits qui répondent aux critères spécifiés.

[source,prompt]
----
method getProductInstallationStatus_hash productId, hostId
----

Fournit l'état ​​de l'installation pour le client et le produit spécifiée.

[source,prompt]
----
method getProductInstallationStatus_listOfHashes hostId
----

Fournit l'état ​​de l'installation du client spécifié.

[source,prompt]
----
method getProductProperties_hash productId, objectId = None
-----

Fournit les propriétés du produit pour le produit et le client spécifié.

[source,prompt]
----
method getProductPropertyDefinitions_hash
----

Fournit toutes les propriétés connus du produit avec la description, les valeurs admises,...

[source,prompt]
----
method getProductPropertyDefinitions_listOfHashes productId
----

Fournit les propriétés produit du produit spécifié avec la description, les valeurs admises,... .

[source,prompt]
----
method getProductStates_hash clientIds = []
----

Fournit l'état ​​de l'installation et la requête d'action de tous les produits (pour les clients spécifié).

[source,prompt]
----
method getProduct_hash productId
----

Fournit les méta-données du produit (description, version, ...)

[source,prompt]
----
method getProvidedLocalBootProductIds_list serverId
----
Fournit une liste de produits localBoot disponibles sur le serveur spécifié.

[source,prompt]
----
method getProvidedNetBootProductIds_list serverId
----

Fournit une liste de produits netBoot disponibles sur le serveur spécifié.

[source,prompt]
----
method getServerId clientId
----

Fournit la {opsi-configserver} chargée du client spécifiée.

[source,prompt]
----
method getServerIds_list
----

Fournit une liste des {opsi-configserver} connus.

[source,prompt]
----
method getServerProductIds_list
----

Fournit une liste des produits serveur.

[source,prompt]
----
method getUninstalledProductIds_list hostId
----

Fournit la liste des produits qui sont désinstallés.

[source,prompt]
----
method powerOnHost mac
----

Envoyer un signal WakeOnLAN à l'adresse MAC spécifiée.

[source,prompt]
----
method setBootimage bootimage, hostId, mac=None
----

Définir une 'image de démarrage' pour le client spécifié.

[source,prompt]
----
method setGeneralConfig config, objectId = None
----

Définir la GeneralConfig pour un client ou un domaine. 

[source,prompt]
----
method setHostDescription hostId, description
----

Définir une description pour un client.

[source,prompt]
----
method setHostLastSeen hostId, timestamp
----

Régler l'horodatage 'vu la dernière fois' d'un client.

[source,prompt]
----
method setHostNotes hostId, notes
----

Définir les notes pour un client.

[source,prompt]
----
method setMacAddresses hostId, macs
----

Définir l'adresse MAC du client dans la base de données.

[source,prompt]
----
method setNetworkConfig objectId, serverId='', configDrive='', configUrl='', depotDrive='', depotUrl='', utilsDrive='', utilsUrl='', winDomain='', nextBootServiceURL=''
----

Définir le réseau de données spécifié pour opsi-client-agent pour un client.

[source,prompt]
----
method setOpsiHostKey hostId, opsiHostKey
----

Définir le 'pckey' pour un ordinateur.

[source,prompt]
----
method setPXEBootConfiguration hostId *args
----

Définir le pipe pour le démarrage PXE avec *args dans 'append'-List.

[source,prompt]
----
method setPcpatchPassword hostId password
----

Définir le 'mot de passe' crypté(!) pour 'hostId'

[source,prompt]
----
method setProductActionRequest productId, clientId, actionRequest
----

Définir une requête d'action pour le client et le produit spécifiés.

[source,prompt]
----
method setProductInstallationStatus productId, hostId, installationStatus, policyId="", licenseKey=""
----

Définir un état ​​de l'installation pour le client et le produit spécifiés.

[source,prompt]
----
method setProductProperties productId, properties, objectId = None
----

Définir les propriétés de produit pour le produit spécifié (et le client spécifié).

[source,prompt]
----
method unsetBootimage hostId
----

Annuler le démarrage de l'image de boot pour le client spécifié.

[source,prompt]
----
method unsetPXEBootConfiguration hostId
----

Supprimer le pipe pour le démarrage PXE.

[source,prompt]
----
method unsetProductActionRequest productId, clientId
----

Définir {Action-request} à 'none'.

[[opsi-manual-api-datastructure-opsi-backend-extensions]]
=== Les extensions backend

Dans opsi 4 nous avons la possibilité d'étendre les méthodes de base de opsi 4 avec ses propres méthodes supplémentaires qui utilisent les méthodes de base de opsi 4. Ceci est fait par exemple pour mettre en œuvre les méthodes hérités de opsi 3 ou pour créer des méthodes qui s'adapte mieux aux besoins de opsi-configed.

Ces extenstions doivent être rédigé en code Python dans le répertoire '/etc/opsi/backendManager/extend.d'. 
