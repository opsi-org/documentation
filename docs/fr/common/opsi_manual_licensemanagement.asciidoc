////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Date:      12.07.2011
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-licensemanagement]]
== opsi license management

[[opsi-manual-licensemanagement-overview]]
=== Overview

[[opsi-manual-licensemanagement-overview-features]]
==== Main features

The opsi license management module is designed for managing the software licenses for proprietary software installed on opsi clients.

The main features are:

* Providing the license management functions from within the '{opsi-configed}'.

* Automated providing, assignment and reservation of license keys.

* Different types of licenses can be managed: 

- standard single licenses (a single license key assigned to a single license),
- volume licenses (a single license key for a certain number of installations) or campus licenses (a single license key for an unlimited number of installations) 
- client bound licenses (which is a single license valid for a dedicated client only, e.g. OEM licenses),
- concurrent licenses (managed by a license server)

* Release of license keys when deinstalling the assigned software.

* Manual editing of license assignment, e.g. for software which is not deployed by opsi.

* Reporting funktions, also available for licenses not installed by opsi, based on the software inventory, matching of data with the opsi based installations.

[[opsi-manual-licensemanagement-overview-start]]
==== Invoking the license management from the '{opsi-configed}'

From the '{opsi-configed}' a separate window is used for the license management. +
It is available by the button "licenses" from the main window of the '{opsi-configed}', provided that the license management module is acivated for the current opsi configuration 
(see the entry for "license management" from the main menu '/Help/Modules'). +
If the license management is disabled, a note will be displayed.

.opsi-configed: Menu bar with the button "licenses" (rightmost)
image::opsi-configed-mode-selection.png["opsi-configed: Menu bar with button licenses (rightmost)", width="50mm"]
                
The opsi license management module is a co financed opsi extension module, which is available to the participants of the cofunding project, who have payed a certain amount of the development costs. 
The module will be available to the community when all the development costs have been funded.

[[opsi-manual-licensemanagement-licensepools]]
=== '{license-pool}s'

[[opsi-manual-licensemanagement-licensepools-concept]]
==== What is a '{license-pool}'?

For every type of license a '{license-pool}' has to be defined.
The '{license-pool}s' represent the use cases of licenses and provide the license keys for installing the licensed software on the clients.
The '{license-pool}' is the central element of the opsi license management.
Therefore the first tab of the license management window of the '{opsi-configed}' is dedicated to the management of '{license-pool}s'.

.License management: tab "License pools" from the license management window
image::licensemanagement-licensepools.png["License management: Tab license-pools", width="180mm"]

[[opsi-manual-licensemanagement-licensepools-creation]]
==== Administration of '{license-pool}s'

In the upper part of the '{license-pool}s' window is a table of available '{license-pool}s'.

The input field 'description' can be edited.

Some more editing functions are available from the context menu. The most important is: creating a new '{license-pool}'. 

When inserting a new line into the table, a (unique) 'licensePoolId' must be entered, e.g. 'softprod_pool'. 
Please do not use umlauts. When saving the new entry, any capitals will be converted to lower case.

The new 'licensePoolId' cannot be changed after saving, for it is used as the master key.

The upper part contains the table of available '{license-pool}s'. 
The context menu provides several functions for managing '{license-pool}s', especially to insert a new '{license-pool}'. 
When editing, the green check mark changes to red and the cancel option is enabled.   
By clicking the red check mark the changes can be saved, or cancelled by clicking the cancel option (also available from the context menu). 

[[opsi-manual-licensemanagement-licensepools-opsiproducts]]
==== '{license-pool}s' and '{opsi-products}'

The standard case of license management is an '{opsi-product}' installing software, which is subject to a license (e.g. the 'Acrobat Writer') from a single '{license-pool}'.

More complicated is the situation with an '{opsi-product}' is installing software, which requires licenses from several '{license-pool}s', like an '{opsi-product}' "Designer tools" which installs 'Adobe Photoshop' as well as 'Acrobat Writer'. 

In this case the '{opsi-product}' requests licenses from several '{license-pool}s'. At the same time there might be other '{opsi-products}' requesting licenses from the same '{license-pool}s' 
(e.g. the 'Acrobat Writer' '{license-pool}').
So the relation between '{opsi-products}' and '{license-pool}s' can be ambiguous. This can be avoided by using unambiguous policies when building '{opsi-products}'. 

The second part of the '{license-pool}' tab manages the relationship between '{license-pool}s' and productIds  (from '{opsi-products}'). 

As it is with all tables of the license management module, clicking on the column header will sort the table content by the column content. Clicking again inverts the order (ascending or descending). 

Sorting can be used to display the connections between '{opsi-products}' and '{license-pool}s'. 
Sorting by '{opsi-product}' displays all '{license-pool}s' connected to a certain '{opsi-product}', whereas sorting by '{license-pool}' shows which '{opsi-products}' are connected to a '{license-pool}'. 

The context menu provides an option for inserting a new relationship between '{opsi-product}' and '{license-pool}'. 
An empty row is inserted on top of the table. Clicking into the field 'licensePoolId' or 'productId' displays a dropdown with the available options.

[[opsi-manual-licensemanagement-licensepools-softwareids]]
==== '{license-pool}s' and Windows software IDs

The third section of the '{license-pool}s' tab displays the Windows software IDs connected to the currently selected '{license-pool}' (in the first section of the tab).

A Windows software ID is an unique key identifying a software packet as detected by opsi software audit. 
These software IDs are also used by the opsi software inventory module to identify which software is actually installed on the client. 

The assignment of software IDs to the current '{license-pool}' can be changed by setting or removing the selection (ctrl-click or shift-click). 
From the context menu the display can be toggled between showing all available software IDs detected by the software audit or just showing the software IDs connected to the current '{license-pool}'.

Displaying the relationship between Software IDs and '{license-pool}s' is useful for comparing the number of actual software installations 
(detected by the software audit) with the number of legal installations available from the '{license-pool}' (tab "Statistics", see below).

[[opsi-manual-licensemanagement-createlicense]]
=== Setting up licenses

Setting up a license for being provided by a '{license-pool}' requires several steps. The second tab 'New license' is for setting up and editing licenses.

On top is the table of available '{license-pool}s' to select the '{license-pool}' the new license is to be assigned to.
So the first step is to select the '{license-pool}' for the new license.

.License management: tab "New license" from the license management window
image::licensemanagement-createlicense.png["Tab 'New license'", width="120mm"]

Before continuing with the next steps, some basic concepts and terms of license management have to be introduced:


[[opsi-manual-licensemanagement-createlicense-concepts]]
==== Some aspects and terms of the license concept

*Licensing* means  the actual deployment of a permission to use a software by installing the software on a client. This might (but doesn't have to) include the use of a special *license key* _(license key)_.

The *software license* is the permission to install and use a software as defined by the license contract. 
Within the opsi database a _software license_ is identified by a 'softwareLicenseId'. 

There are several types of software licenses (volume license, OEM license, time limited license etc.) which are the different *license models*. 
A software license is based on a *license contract* _(license contract)_, which is defining and documenting the juristic aspects of the license.

A *license option* defines the option to use a software license for a selected '{license-pool}'. 
Within opsi the license option is defined by a combination of 'softwareLicenseId' and 'licensePoolId'. 
This includes the actual 'licenseKey' (if required).

Finally the *license usage* documents the use of a license by assigning the license option to a client. 
This is the legal and implemented licensing of a software defined by the combination of 'softwareLicenseId', 'licensePoolId', the unique client name 'hostId' and (if required) the 'licenseKey'.

[[opsi-manual-licensemanagement-createlicense-contract]]
==== Registering the license contract

After selecting the '{license-pool}' for the new license option, the next step is to register the license contract the license is based on.
The section "Select or enter license contract" (from tab "New license") defaults to a standard contract with ID default. 
The default setting can be used if the license contract is implied by purchasing the software or the contract is documented some other way.
Otherwise the contract can be selected from the table or a new contract can be registered from the context menu.
The license contract dataset comes with data fields for partner, conclusion date, notification date and expiration date. 
The entry field notes can hold some additional notes like the location where the contract document is kept.
The unique contract ID (licenseContractId) is for identifiying the license contract in the license management database.  
When entering a new license contract, a new unique ID is constructed based on the current date and time stamp. 
This ID can be changed before saving the new data set. 
When saving the data, the opsi service checks whether the ID is unique. 
In case it is not, a new ID is generated and cannot be changed any more.

[[opsi-manual-licensemanagement-createlicense-model]]
==== Configuring the license model

The third part of the Tab "New license" is named "Configure license" and is for registering the license model and license data.

Several types of license models are available:

* Standard license
* Volume license
* OEM license
* Concurrent license

Each Option is represented by a button. 
Clicking a button, the form is filled with data for that type of license model.

The license model *Standard license* means, that this license is valid for a single installation on an arbitrary client. 
So the license key (if any) is valid for a single installation only.

A *Volume license* is valid for a certain number _n_ of installations. 
In this case the optional license key is used for that number of installations. 
Setting _n_ = 0 means, that the number of installations is unlimited within the same network (campus license).

In case of an *OEM license*, the license is valid for a dedicated client only. 
Clients that come with a vendor pre installed operating system often have this type of license for the pre installed OS and software packets. 

The *Concurrent license* means that a certain number of licenses is available for a variable set of clients.
Within opsi this situation is handled like an unlimited Volume license. 
The number of actual installations in use has to be managed by some external license server. 

After clicking a button, the automatic generated data include a generated unique ID (derived from date and time stamp). This ID can be changed as desired.

It depends on the type of license model, which of the other fields can or cannot be changed.

The field "Expiration date" defines the expiration date of the license in a technical sense.
(This column of the license is for future use).

[[opsi-manual-licensemanagement-createlicense-finish]]
==== Saving the data

The "Send" button sends the data to the opsi service to save them permanently to the opsi data base (if they are consistent and no errors occur).

While proceeding this, data records will be generated for the new software license based on the selected software contract and the new license option assigned to that.

The list of available license options at the bottom of the window will be refreshed with the new license option selected. If necessary, the license key can be changed then.

[[opsi-manual-licensemanagement-editlicense]]
=== Editing licenses

For ninety percent of the use cases editing the license data with the tabs "License pools" and "New license" will do. 
But there might be some special cases affording to edit license data more specific and explicit.
Therefore the tab "Edit licenses" presents the license data in three tables, representing the internal data structure and allowing to adapt the data for some special cases.

.License management: tab "Edit licenses" from the license management window
image::licensemanagement-editlicense.png["License management: tab 'Lizenzierungen bearbeiten'", width="120mm"]

Based on this direct data access, the following chapter shows how to configure a special license, like the Microsoft Vista or Windows 7 professional downgrade option for installing Windows XP.

[[opsi-manual-licensemanagement-editlicense-downgrade-option]]
==== Example downgrade option

Downgrade option means, that instead of the software purchased, also the preceding version can be installed. 
For instance installing Windows XP based on a Windows Vista license. 
In this case, the license key also can be used for an installation, which it wasn't meant for in the first place.

In the opsi license model this case can be configured like this:

From the tab "New license" the Vista license is to be registered as usual, resulting in a new license option, which is displayed in the list of license options at the bottom of the window. 
This new license option is based on a new software license identified by 'softwareLicenseId'.

.License management: copying the license-ID to the license options from the context menu
image::licensemanagement-editlicense-copying-license-id.png["License management: copying the licene ID", width="120mm"]

This softwareLicenseId  is needed for the further configuration steps. You can keep it in mind or copy it with drag&drop. 
You can as well look for the ID in the "Available license options" list of the "Edit licenses" tab. 
The context menu supports copying the ID.

The important step now is to connect this softwareLicenseId to an additional '{license-pool}'.

Therefore a new record has to be registered from the "Available license options" table of the "Edit licenses" tab. 
The fields of the new record have to be filled with the softwareLicenseId and the ID of the additional '{license-pool}' (in this case the pool for Windows XP licenses). 
For installing Windows XP based on this license, an applicable Windows XP license key already in use by another client has to be added.

After saving the new record, there are two different license options based on the same software license! 
The opsi service counts the use of either of them as an installation deducting from the maximum installation count. 
So in case of a downgrade license (with maxInstallations = 1), the opsi service delivers a license key for a Vista installation _or_ for a XP installation, but not for both of them.

[[opsi-manual-licensemanagement-usages]]
=== Assignment and release of licenses

Using a license option by installing the software on a client results in the actual licensing (which is the use of the license option).

In the opsi context installations are done script based and automatically, which is the client running the Winst script invokes some calls to the central opsi service. 

The following chapters introduce some of these service calls, which are relevant for the license management. 
For further information about Winst and opsi commands see the documentation on Winst and opsi.


[[opsi-manual-licensemanagement-usages-opsiservice]]
==== opsi service calls for requesting and releasing a license

The opsi service call for requesting a license option and retrieving the license key for doing the installation (as transmitted by a Winst script) is 

'getAndAssignSoftwareLicenseKey'

The parameters to be passed are the client hostID (hostID of the client where the software is to be installed) 
and the ID of the '{license-pool}' the license is requested from. 
Instead of the licensePoolId also an '{opsi-product}' ID or a Windows Software ID can be passed, if they are connected to a '{license-pool}' within the opsi license management.

The use of a license option can be released by calling: 

'deleteSoftwareLicenseUsage'

Again the parameters to be passed are the hostID and alternatively the licensePoolId, productID or Windows Software ID. 
Calling this service releases the license option and returns it to the pool of available license options.

For the complete documentation of opsi service calls see below.

[[opsi-manual-licensemanagement-usages-winst]]
==== '{opsi-winst}' script calls for requesting and releasing of licenses

The '{opsi-winst}' provides the client related calls as '{opsi-winst}' commands.

A '{opsi-winst}' script can make a call to the function  'DemandLicenseKey' to get a license key for installing. The parameters to be passed are:

'DemandLicenseKey (poolId [, productId [, windowsSoftwareId]])'

The return value is the license key (can be empty) as a string:

[source, winst]
----
set $mykey$ = DemandLicenseKey ("pool_office2007")
----

The returned license key can be used by other script command for installing the software.

For releasing a license option and license key (as to be used in a '{opsi-winst}' deinstallation script) the command  FreeLicense is available with the following syntax:

'FreeLicense (poolId [, productId [, windowsSoftwareId]])'

The boolean function  

'opsiLicenseManagementEnabled'

can be used to check whether the opsi license management is enabled and can be used for scripting:

[source, winst]
----
if opsiLicenseManagementEnabled
	set $mykey$ = DemandLicenseKey ("pool_office2007")
else
	set $mykey$ = IniVar("productkey")
----
	
The service calls can be invoked from the command line tool `opsi-admin`. 

Parameters marked with '*' are optional.

[[opsi-manual-licensemanagement-service-methods-contracts]]
==== License contracts

[source, prompt]
----
method createLicenseContract(*licenseContractId, *partner, *conclusionDate, *notificationDate, *expirationDate, *notes)
----

This method registers a new license contract record with the ID licenseContractId. 
If no licenseContractId is passed, it will be generated automatically. 
Using the 'licenseContractId' of an existing contract, this contract can be edited.

The parameters partner (co-contractor) and notes are strings and can be filled with any information desired. 
The parameters conclusionDate (date of conclusion of the contract), notificationDate (date for a reminder) and expirationDate (expiration date of the contract) are passed in the format YYYY-MM-DD  (e.g. 2009-05-18).

The method returns the licenseContractId of the contract. 

[source, winst]
----
	set $mykey$ = DemandLicenseKey ("pool_office2007")
else
	set $mykey$ = IniVar("productkey")
----

With the string returning functions 

'getLastServiceErrorClass'

and

'getLastServiceErrorMessage'

error states can be detected and handled, e.g. if there is no license available: 

[source, winst]
----
if getLastServiceErrorClass = "None"
	comment "no error"
endif
----

[[opsi-manual-licensemanagement-usages-manually]]
==== Manual administration of license use

Within the opsi config editor, the licenses registered by the opsi service are listed on the tab "Licenses usage":

.License management: tab "Licenses usage" from the license management window
image::licensemanagement-usages.png["License management: tab Licenses usage", width="120mm"]

From this tab, licenses also can be managed manually. 
This can be useful, if a licensed software is not integrated into the opsi deployment, but installed manually on just a few clients.

These are the functions for manual license management in detail: 

* "Delete row" (available from the context menu) releases a license option.

* "Reserve license for client" at the bottom of the window is to create a license reservation for a dedicated client.

* By editing the field "licenseKey" from the "Usage of licenses" table, the license key can be changed.

[[opsi-manual-licensemanagement-usages-kept]]
==== Preservation and deletion of license usages

If a software packet is reinstalled, the call to the '{opsi-winst}' function DemandLicenseKey will return the same license option and license key as had been used before.

In case this is not favoured, the former license option has to be released by calling the '{opsi-winst}' command 'FreeLicense', 
or by calling the opsi service call 'deleteSoftwareLicenseUsage' or deleting the license use manually.

So, if not explicitly deleted, the license usages are preserved when reinstalling a client.

For releasing the licenses, they can be deleted from the tab "Licenses usage" or can be deleted by the service call

'deleteAllSoftwareLicenseUsages'

passing the client host name to delete the license uses from.


[[opsi-manual-licensemanagement-reconciliation]]
=== Reconciliation with the software inventory

The tab "Reconciliation" lists for each client and for each '{license-pool}'
whether a use of this '{license-pool}' is registered by opsi ("used_by_opsi") and
if the software inventory ('swaudit') on that client reported a software, that requires a license option from that pool ('Swinventory_used').

To evaluate the results from 'swaudit', the relevant Software IDs (as found in the client registry) have to be associated with the appropriate '{license-pool}' (tab "License pools").

When data matching with the software inventory, the license management counts not more than one license per client and '{license-pool}'.
So if the '{license-pool}' 'office2010' is connected with ten different patterns from software inventory, indicating that 'office2010' is installed on this client,
this is (regarding the licenses usage count) counted as a single installation, although all of the detection patterns might to be found on the client.

.License management: tab "Reconciliation" (data matching) with the inventory
image::licensemanagement-reconciliation.png["License management: tab "Reconciliation" (data matching) with the inventory, width="120mm"]

As usual, this table can be copied as 'Drag & Drop' and for instance pasted to a spreadsheet program.
If the '{opsi-configed}' process has got the required access rights (running standalone and not from the applet), the table also can be printed from the context menu.

[[opsi-manual-licensemanagement-statistics]]
=== Licenses usage overview

The tab "Statistics" displays a summary of the different '{license-pool}s', 
showing the total number of license options ('license_options') and how many of them are in use ('used_by_opsi') or still available ('remaining opsi').

.License management: tab "Statistics" from the license management window
image::licensemanagement-statistics.png["License management: tab Statistics from the license management window", width="120mm"]

In addition to the number of license uses registered by opsi ('used by opsi')
and the currently available licenses ('remaining...') the ovierview also shows the total number of detected installations, that require a license ('SWinventory_used').

The data from the column 'SWinventory_used' are based on the registry scans from the '{opsi-product}'  'swaudit' 
and the assignment of the Windows software IDs (as they are found in the registry) to the '{license-pool}s' (as registered with the opsi license management 
(tab "License pools", see <<opsi-manual-licensemanagement-licensepools>>).

From the context menu the table can be printed (because of restricted access rights not available from the applet),
with drag&drop data can be copied to e.g. a spreadsheet. 

[[opsi-manual-licensemanagement-statistics-downgrade-option]]
==== In case of downgrade option

If a downgrade option has been configured (see <<opsi-manual-licensemanagement-editlicense-downgrade-option>>), 
this appears in the overview and statistics like this: 

A single downgrade license results in a license option for at least two different '{license-pool}s', 
but only one of them can be requested for an installation. 
So using a downgrade license option decreases the number of available license options ('remaining_opsi') in each of the '{license-pool}s' concerned by that downgrade option by _1_. 
So this looks like a single installation reduces the number of available license options by _2_, which, in this case, actually is the fact.

[[opsi-manual-licensemanagement-service-methods]]
=== Service methods for license management

The service methods for license management can be called from the command line tool 'opsi-admin'.
So they are accessible for scripting, e.g. to read license keys from a file.

Examples can be found in the products 'license-test-....opsi' 
from http://download.uib.de/opsi4.0/products/license-management/. 
After installing the packets with opsi-package-manager -i \*.opsi, in the directory /opt/pcbin/install/<product name> the corresponding scripts: create_license-*.sh can be found.

As an example here the script `create_license-mixed.sh`
(the current version comes with the download packet).

[source,prompt]
----
#!/bin/bash 
# This is a test and example script
# (c) uib gmbh licensed under GPL

PRODUCT_ID=license-test-mixed
# read the license key from a file
# myretailkeys.txt has one licensekey per line
MYRETAILKEYS=`cat myretailkeys.txt`
# myoemkeys.txt has one pair: <licensekey> <hostid.domain.tld> per line
MYOEMKEYS=`cat myoemkeys.txt`
# some output
echo "$PRODUCT_ID"

# this is the function to create the oem licenses
#############
createlic ()
{
while [ -n "$1" ]
do
	#echo $1
	AKTKEY=$1
	shift
	#echo $1
	AKTHOST=$1
	shift
	echo "createSoftwareLicense with oem key: ${PRODUCT_ID}-oem-${AKTKEY} for host ${AKTHOST}"
	MYLIC=`opsi-admin -dS method createSoftwareLicense "" "c_$PRODUCT_ID" "OEM" "1" "${AKTHOST}" ""`
	opsi-admin -d method addSoftwareLicenseToLicensePool "$MYLIC" "p_$PRODUCT_ID" "${PRODUCT_ID}-oem-${AKTKEY}"
done
}
#############

# here the script starts

# delete the existing license pool and all connected licenses
# ATTENTION: never (!) do this on a productive system
echo "deleteLicensePool p_$PRODUCT_ID"
opsi-admin -d method deleteLicensePool "p_$PRODUCT_ID" true

# delete the existing license contract
echo "deleteLicenseContract c_$PRODUCT_ID"
opsi-admin -d method deleteLicenseContract "c_$PRODUCT_ID"

# create the new license pool
# the used method has the following syntax:
# createLicensePool(*licensePoolId, *description, *productIds, *windowsSoftwareIds)
echo "createLicensePool p_$PRODUCT_ID"
opsi-admin -d method createLicensePool "p_$PRODUCT_ID" "opsi license test" \'['"'$PRODUCT_ID'"']\' \'['"'$PRODUCT_ID'"']\'

# create the new license contract
# the used method has the following syntax:
# createLicenseContract(*licenseContractId, *partner, *conclusionDate, *notificationDate, *expirationDate, *notes)
echo "createLicenseContract c_$PRODUCT_ID"
opsi-admin -d method createLicenseContract "c_$PRODUCT_ID" "uib gmbh" "" "" "" "test contract"

# create the new license and add the key(s)
# the used methods have the following syntax:
# createSoftwareLicense(*softwareLicenseId, *licenseContractId, *licenseType, *maxInstallations, *boundToHost, *expirationDate)
# addSoftwareLicenseToLicensePool(softwareLicenseId, licensePoolId, *licenseKey)

# create the retail licenses:
for AKTKEY in $MYRETAILKEYS
do
	echo "createSoftwareLicense with retail key: ${PRODUCT_ID}-retail-${AKTKEY}"
	MYLIC=`opsi-admin -dS method createSoftwareLicense "" "c_$PRODUCT_ID" "RETAIL" "1" "" ""`
	opsi-admin -d method addSoftwareLicenseToLicensePool "$MYLIC" "p_$PRODUCT_ID" "${PRODUCT_ID}-retail-${AKTKEY}"
done

# create the oem licenses
createlic $MYOEMKEYS

# create the volume licenses
echo "createSoftwareLicense with volume key: ${PRODUCT_ID}-vol-key"
MYLIC=`opsi-admin -dS method createSoftwareLicense "" "c_$PRODUCT_ID" "VOLUME" "10" "" ""`
opsi-admin -d method addSoftwareLicenseToLicensePool "$MYLIC" "p_$PRODUCT_ID" "${PRODUCT_ID}-vol-key"#

----

[[opsi-manual-licensemanagement-examples]]
=== Example products and templates

In the uib download section at

http://download.uib.de/opsi4.0/products/license-management/

there are four example products available. 
One for each type of license model, as there are Retail, OEM and Volume license type, as well as a product combining all of them.

These example products use as an example some licenses and release them again. 
So using them leaves some marks in the software inventory, that might be of influence to reconciliation and statistics.

All of these products contain a shell script to automatically generate '{license-pool}s', license contracts and license options.

The standard template for '{opsi-winst}' scripts 'opsi-template' also contains some examples for using the opsi license management.

