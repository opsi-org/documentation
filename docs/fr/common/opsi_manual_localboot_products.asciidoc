////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; crédits: http://www.opsi.org/credits/
////

:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      12.10.2012
:Revision:  4.0.1
:toclevels: 6


include::../common/opsi_terms.asciidoc[]

[[opsi-manual-localboot-products]]
== Produits Localboot: distribution de logiciels automatique avec opsi

Un 'produit localboot' est un produit opsi qui sera installé par '{opsi-client-agent}' après que le client à démarré l'OS par défaut à partir du disque dur local. Cela le distingue des 'produits netboot' qui seront décrit plus loin. 
////
<<opsi-manual-netboot-products>>.
////


[[opsi-manual-localboot-standardprodukte]]
=== produits standards d'opsi

Les produits suivants sont des produits de base qui viennent avec l'installation de 'opsi-server'.

[[opsi-manual-localboot-opsi-client-agent]]
==== '{opsi-client-agent}'

Le paquet 'opsi-client-agent' contient le mécanisme d'installation et de mise à jour pour '{opsi-client-agent}'.

[[opsi-manual-localboot-opsi-winst]]
==== '{opsi-winst}'

Le paquet '{opsi-winst}' est un cas particulier. Il comprend '{opsi-winst}' `winst32.exe`, qui est mis à jour par le paquet '{opsi-client-agent}' même. '{opsi-client-agent}' contrôle dans le serveur si il y a une version différente de `winst32.exe` puis copie le nouveau '{opsi-winst}' (tous ses fichiers) sur le client.
Cette mise à jour automatique ne fonctionne pas pour Windows 2000 depuis opsi 4.

[[opsi-manual-localboot-javavm]]
==== javavm: Java Runtime Environment

Le paquet 'javavm' installe l'environnement d'exécution Java 1.6 requis par '{opsi-configed}') sur les clients.

[[opsi-manual-localboot-opsi-adminutils]]
==== 'opsi-adminutils'

Le paquet 'opsi-adminutils' offre des utilitaires et une installation locale de '{opsi-configed}'.

[[opsi-manual-localboot-jedit]]
==== jedit

Editeur Java avec coloration syntaxique pour les scripts '{opsi-winst}'.

[[opsi-manual-localboot-swaudit_hwaudit]]
==== Swaudit et hwaudit: Produits pour l'inventaire matériel et logiciel

Les paquets hwaudit et swaudit ils fournissent l'inventaire matériel et logiciel.
Les données du matériel sont acquises en utilisant WMI et écrites dans l'inventaire du matériel via 'le web service opsi'.
Les données de l'inventaire logiciel sont tirées de la base de registre (HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall) et transmis au serveur d'inventaire par 'le web service opsi'.

[[opsi-manual-localboot-opsi-template]]
==== opsi-template

Modèle pour vos propres scripts opsi.

Vous pouvez extraire ce modèle avec:
[source, prompt]
----
`opsi-package-manager -x opsi-template_<version>.opsi`
----
il est également possible de le renommer en même temps:
[source, prompt]
----
`opsi-package-manager -x opsi-template_<version>.opsi --new-product-id myprod`
----

[[opsi-manual-localboot-xpconfig]]
==== xpconfig

Paquet pour personnaliser les paramètres de l'interface graphique et d'Explorer (et pas seulement) pour Windows XP.

[[opsi-manual-localboot-product-order]]
=== La manipulation de la séquence d'installation en fonction des priorités du produit

Depuis opsi 4.0 la séquence d'installation sera calculé en ce qui concerne les dépendances entre produits et les priorités du produit.

* dépendances du produit +
définit les dépendances et la séquence d'installation nécessaire entre les paquets opsi. Un exemple typique est la dépendance entre un programme Java et l'environnement d'exécution Java (javavm).

* priorités du produit +
sera utilisé pour pousser certains paquets au début de la séquence d'installation et d'autres paquets à la fin. Par exemple, il est utile installer le Service Pack et les correctifs au début d'une séquence d'installation et l'inventaire logiciel à la fin. +
Les priorités de produit sont des nombres compris entre 100 et -100 (0 est la valeur par défaut)

Il existe différentes possibilités d'utilisér ces deux facteurs pour calculer la séquence d'installation. Opsi propose deux algorithmes différents.

Vous pouvez basculer entre ces algorithmes:

* en utilisant opsi-configed, dans l'onglet 'Réseau et paramètres supplémentaires'  de la 'configuration du serveur'

.'{opsi-configed}': configuration du serveur
image::configed_serverconfiguration_fr.png["opsi-configed: configuration du serveur",width=500]

ou vous pouvez le faire en ligne de commande:
[source, prompt]
----
opsi-setup --edit-config-defaults
----

.Choisissez l'algorithme de tri: Partie 1
image::opsi-setup-product_sort_algorithm_fr.png["Choisissez l'algorithme de tri: Partie 1",width=300]

.Choisissez l'algorithme de tri: Partie 2
image::opsi-setup-product_sort_algorithm2_fr.png["Choisissez l'algorithme de tri: Partie 2",width=300]

[[opsi-manual-localboot-product-order-algorithm1]]
==== Algorithm1: dépendance à l'égard de la prioritaire du produit (par défaut)

Grâce à cet algorithme, la séquence d'installation du produit dans un premier temps sera calculé en fonction des priorités du produit. Dans un deuxième temps, il fera recours aux les dépendances du produit. Cet algorithme peut pousser les produits avec une priorité basse avant les produits ayant une plus grande priorité pour répondre aux besoins de dépendances du produit. Mais par conséquent vous ne verrez pas les problèmes d'installation à la suite de dépendances non résolues du produit.

[[opsi-manual-localboot-product-order-algorithm2]]
==== Algorithm2: dépendance à l'égard de la dépendance du produit

La philosophie de base de cet algorithme est, que dans la pratique, il y a trois classes de priorité nécessaires:

* Les produits qui doivent être installés au début d'une séquence , comme les mises à jour de l'OS. Ces produits ont besoin d'un rang de priorité élevé (ex. 100)

* Les produits "normalaux" pour installer des applications (priorité par défaut = 0)

* Les produits qui doivent être installés à la fin d'une séquence d'installation, comme l'inventaire logiciel. Ces produits ont besoin d'un faible degré de priorité (ex. -100)

Les dépendances du produit seront seulement résolu à l'intérieur de la classe de priorité. Cela garantit que les produits ayant une haute priorité seront installés très tôt. Mais est de votre responsabilité qu'il n'y a pas de dépendances du produit qui vont franchir les frontières de classe de priorité.

[[opsi-manual-localboot-product-order-create]]
==== Définir les priorités et les dépendances du produit

Les priorités et les dépendances de produits appartiennent aux métadonnées d'un produit. Il vous sera demandé pour ces méta-données créant un nouveau produit en utilisant la commande 
`opsi-newprod`.

Ces méta-données seront stockées dans le fichier de contrôle des produits et peuvent être édité. Après avoir modifié le fichier de contrôle que vous avez créer et installé le paquet à nouveau.

Pour plus de détails, voir le manuel 'getting started' dans le chapitre de création d'un paquet opsi.

[[opsi-manual-localboot-own_software]]
=== L'intégration des nouveaux paquets logiciels dans le déploiement de logiciels opsi.

Les informations sur "L'intégration des nouveaux paquets logiciels dans le déploiement de logiciels opsi" vous les trouverez dans le manuel 'opsi-getting-started'.

