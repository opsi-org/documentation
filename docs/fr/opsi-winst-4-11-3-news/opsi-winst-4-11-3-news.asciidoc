////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the German creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
; 
; credits: http://www.opsi.org/credits/
////


:Author:    uib gmbh
:Email:     info@uib.de
:Date:      11.07.2012
:Revision:  4.0.2
:doctype:		book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]



opsi-winst (4.11.3): What is new ?
==================================



// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


== Start and command line options

Since version 4.11.3, the '{opsi-winst}' contains a manifest with the statement: +
`<requestedExecutionLevel level="highestAvailable" />`. This means that if '{opsi-winst}' is called on an NT6 OS by an Administrator, then it will run as an 'elevated' process. If '{opsi-winst}' is called with normal user privileges, then it will run with the privileges of this user.


== Primary sections

[[opsi-winst-params-errors]]
=== Reacting on Errors

*  `FatalOnSyntaxError =` <boolean value> +
** 'true' = (default) If a syntax error occurs, then the script execution will be stopped and the script result will be set to 'failed'. Also, the message 'Syntax Error' will be passed to the opsi-server.
** 'false' = If a syntax error occurs, then the script execution will +not+ be stopped and the script result will be set to 'success'.

In either case above, the syntax error will be logged as 'Critical'. +
In either case above, the Errorcounter will be increased by 1. +
Since 4.11.3.2 +
In older Versions there is no logging of syntax errors, no increase of error counter, and the result is always success.

[[opsi-winst-params-showmode]]
=== Show window mode
To change the modes of how the '{opsi-winst}' window is displayed, use these commands:


* `NormalizeWinst` +
sets the '{opsi-winst}' window to the 'normal' mode

* `IconizeWinst` +
sets the '{opsi-winst}' window to the 'minimized' mode

* `RestoreWinst` +
sets the '{opsi-winst}' window to the 'maximized' mode

[[opsi-winst-commands-include]]
=== Include Commands

[[opsi-winst-commands-include-syntax]]
==== Include Commands: Syntax

The `include_*` commands may be used to add external script files to the currently-running script at runtime. The `include_*` command can include external script files either as an insert (after the current line) or as an append (after the last line). The include commands may be used anywhere in a primary section. The external script files may contain their own include commands. +
The include commands are available since version 4.11.3

* `include_insert` <file name> +
inserts <file name> after the current line into the running script. So the first line of the included file is the next line that will be executed by '{opsi-winst}'.

* `include_append` <file name> +
appends the content of <file name> to the running script. This kind of insert is normally used to include sections from a library.

In both cases <file name> is: +

* A complete path to an existing file..

* A existing file in `%ScriptPath%`

* A existing file in `%WinstDir%\lib`

The tests for the location of the <file name> are done in the order above. '{opsi-winst}' uses the first file it finds that has a matching name.

Example: +
When we run that contains the following commands:
[source,winst]
----
[Actions]
include_append "include-test3.opsiinc"
include_insert "include-test1.opsiinc"
----

The file `include-test1.opsiinc` is run first.  The contents of the included file `include-test1.opsiinc` are:
[source,winst]
----
DefVar $inctestvar$
set $inctestvar$ = "inctest"
Files_del_tmp_dummy
include_append "include-test2.opsiinc"
Files_copy_inctest

if fileExists("c:\opsi.org\tmp\dummy.txt") 
	comment "passed"
else
	comment "failed"
	set $TestResult$ = "not o.k."
	LogWarning "include test failed"
endif

if fileExists("%scriptpath%\test-files\dummy.txt") 
	comment "passed"
else
	comment "failed"
	set $TestResult$ = "not o.k."
	LogWarning "include test failed"
endif
Files_del_tmp_dummy
----

The contents of the included file  `include-test2.opsiinc` are:
[source,winst]
----
[Files_copy_inctest]
copy "%scriptpath%\test-files\dummy.txt" "c:\opsi.org\tmp"
----

Since the call to Files_del_tmp_dummy happens inside of `include-test1.opsiinc` without `include-test3.opsiinc` being referenced inside of `include-test1.opsiinc`, we must call include_append "include-test3.opsiinc" at the very beginning of our script. Otherwise, opsi-winst will report that Files_del_tmp_dummy is not defined.  The contents of the included file  `include-test3.opsiinc` are:
[source,winst]
----
[Files_del_tmp_dummy]
del -f "c:\opsi.org\tmp\dummyt.txt"
----

[[opsi-winst-commands-include-library]]
==== Include Commands: Library

The following include files are shipped with version 4.11.3, and are located in `%WinstDir%\lib`:

`insert_check_exit_code.opsiinc`:
[source,winst]
----
; opsi include file

DefVar $ExitCode$

include_append "section_sub_check_exitcode.opsiinc"
----

`insert_get_licensekey.opsiinc`:
[source,winst]
----
; opsi include file

DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$

include_append "section_sub_get_licensekey.opsiinc"
----

`section_sub_check_exit_code.opsiinc`:
[source,winst]
----
;opsi include file

[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $ExitCode$
	if ($ExitCode$ = "1605")
		comment "ERROR_UNKNOWN_PRODUCT	1605	This action is only valid for products that are currently installed."
		comment "Uninstall of a not installed product failed - no problem"
	else
		if ($ExitCode$ = "1641")
			comment "looks good: setup program gives exitcode 1641"
			comment "ERROR_SUCCESS_REBOOT_INITIATED	1641	The installer has initiated a restart. This message is indicative of a success."
		else
			if ($ExitCode$ = "3010")
				comment "looks good: setup program gives exitcode 3010"
				comment "ERROR_SUCCESS_REBOOT_REQUIRED	3010	A restart is required to complete the install. This message is indicative of a success."
			else
				logError "Fatal: Setup program gives an unknown exitcode unequal zero: " + $ExitCode$
				isFatalError
			endif
		endif
	endif
endif
----

`section_sub_get_licensekey.opsiinc`:
[source,winst]
----
; opsi include file

[Sub_get_licensekey]
if opsiLicenseManagementEnabled
	comment "License management is enabled and will be used"

	comment "Trying to get a license key"
	Set $LicenseKey$ = demandLicenseKey ($LicensePool$)
	; If there is an assignment of exactly one licensepool to the product the following call is possible:
	; Set $LicenseKey$ = demandLicenseKey ("", $ProductId$)
	;
	; If there is an assignment of a license pool to a windows software id, it is possible to use:
	; DefVar $WindowsSoftwareId$
	; $WindowsSoftwareId$ = "..."
	; Set $LicenseKey$ = demandLicenseKey ("", "", $WindowsSoftwareId$)
	
	DefVar $ServiceErrorClass$
	set $ServiceErrorClass$ = getLastServiceErrorClass
	comment "Error class: " + $ServiceErrorClass$
	
	if $ServiceErrorClass$ = "None"
		comment "Everything fine, we got the license key '" + $LicenseKey$ + "'"
	else
		if $ServiceErrorClass$ = "LicenseConfigurationError"
			LogError "Fatal: license configuration must be corrected"
			LogError getLastServiceErrorMessage
			isFatalError
		else 
			if $ServiceErrorClass$ = "LicenseMissingError"
				LogError "Fatal: required license is not supplied"
				isFatalError
			endif
		endif
	endif
else
	LogError "Fatal: license required, but license management not enabled"
	isFatalError
endif
----

[[opsi-winst-string-functions-handling]]
=== String Handling

* `contains(`<str>, <substr>`)` +
A boolean function which returns 'true' if <str> contains <substr>. This function is case sensitive. +
Available since 4.11.3 +
Example:
[source,winst]
----
set $ConstTest$ = "1xy451Xy451XY45"
set $CompValue$ ="xy"
if contains($ConstTest$, $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $CompValue$ ="xY"
if not(contains($ConstTest$, $CompValue$))
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `stringReplace(`<string>, <oldPattern>, <newPattern>`)` +
returns a string, that when given a string  <string> replaces all occurrences of <oldPattern> with <newPattern>. This function is not case sensitive. +
Available since 4.11.3 +
Example:
[source,winst]
----
set $ConstTest$ = "123451234512345"
set $CompValue$ = stringReplace("1xy451Xy451XY45","xy","23")
if ($ConstTest$ = $CompValue$)
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strLength(`<string>`)` +
Returns the number of chars in in <string> +
Available since 4.11.3 +
Example:
[source,winst]
----
set $tmp$ = "123456789"
set $ConstTest$ = "9"
set $CompValue$ = strLength($tmp$)
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strPos(`<string>, <sub string>`)` +
returns the first position of <sub string> in <string>. If <sub string> is not found, then "0" is the return value. The function is case sensitive. +
Available since 4.11.3 +
Example:
[source,winst]
----
set $tmp$ = "1xY451Xy451xy45"
set $ConstTest$ = "7"
set $CompValue$ = strPos($tmp$,"Xy")
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $tmp$ = lower("1xY451Xy451xy45")
set $ConstTest$ = "2"
set $CompValue$ = strPos($tmp$,lower("xy"))
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `strPart(`<string>, <start pos>, <number of chars>`)` +
returns the part of <string> starting with <start pos> and include the next <number of chars> chars. If there are fewer than <number of chars> after <start pos>, then the returned string will be the rest of the chars after <start pos>. +
Available since 4.11.3 +
Example:
[source,winst]
----
set $tmp$ = "123456789"
set $ConstTest$ = "34"
set $CompValue$ = strPart($tmp$,"3","2")
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
set $tmp$ = "123456789"
set $ConstTest$ = "56789"
set $CompValue$ = strPart($tmp$, strPos($tmp$,"56"),strLength($tmp$))
if $ConstTest$ = $CompValue$
	comment "passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "failed"
endif
----

* `unquote(`<string>,<quote-string>`)`  +
returns the unquoted version of <string>, if <string> is quoted with <quote-string> +
Only one char (the first char) of <quote-string> is accepted as a quote char. The leading white spaces are ignored. +
Available since 4.11.2.1



[[opsi-winst-string-functions-others]]
=== Other String Functions

*  `getDiffTimeSec` +
returns a string with the integer number of seconds since the last call of `marktime`. +
Available since 4.11.3.1

* `SidToName(`<well known sid>`)` +
returns a string with the localized name of the group with the <well known sid>. For example, if <well known sid> is equal to 'S-1-5-32-544' then `SidToName` returns 'Administrators'.  +
Available since 4.11.3.1

*  `getLastExitCode` +
returns a string that contains the value of the exitcode of the last process called by a WinBatch / DosBatch / ExecWith section. +
When using a DosBatch or ExecWith section, you will normally get the exitcode from the interpreter that was called. To get the exitcode of your script you have to define it explicitly.

Example:
[source,winst]
----
DosInAnIcon_exit1
		set $ConstTest$ = "1"
		set $CompValue$ = getLastExitCode
		if ($ConstTest$ = $CompValue$)
			comment "DosBatch / DosInAnIcon  exitcode passed"
		else
			set $TestResult$ = "not o.k."
			LogWarning "DosBatch / DosInAnIcon  exitcode failed"
		endif
		
[DosInAnIcon_exit1]
rem create an errolevel= 1
VERIFY OTHER 2> NUL
echo %ERRORLEVEL%
exit %ERRORLEVEL%
----


[[opsi-winst-commands-if-else-bool-functions]]
=== Boolean Expressions


* `runningAsAdmin` +
returns 'true' if the currently running script was executed with Administrator privileges. +
Available since 4.11.1.1

* `isLoginScript` +
returns 'true' if the currently running script was called as 'userLoginScript' using the opsi extension 'User Profile Management'. +
Available since 4.11.2.1

* `contains(`<str>, <substr>`)` +
boolean function which returns 'true' if <str> contains <substr>. This function is case sensitive. +
Available since 4.11.3 

* `isNumber(`<str>`)` +
boolean function which returns 'true' if <str> represents an integer. +
Available since 4.11.3


[[opsi-winst-stringlist-create-by-property]]
=== Stringlists from the product properties

* `getProductPropertyList(`<propname>,<default value>`)` +
returns a stringlist of values that are referred to by the multivalue product property <propname>. If there is no connection to the opsi server, then the resulting stringlist contains only <default value>. +
If you call the function `GetProductProperty` with a multivalue property, then you will get the selected values in a comma-separated string format. This will lead to problems if the returned values contain any comma chars that are not meant to be parsed. +
Available since 4.11.3 +
Example:
[source,winst]
----
;Property "dummymulti" has the values: ("ab", "cd", "ef", "g,h")
set $list$ = GetProductPropertyList ("dummymulti","True")
if not ("" = takeFirstStringContaining($list$,"g,h"))
	comment "GetProductPropertyList passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "GetProductPropertyList failed"
endif

set $ConstTest$ = "ab,cd,ef,g,h"
set $CompValue$ = GetProductProperty ("dummymulti","True")
if ($ConstTest$ = $CompValue$)
	comment "GetProductProperty passed"
else
	set $TestResult$ = "not o.k."
	LogWarning "GetProductProperty failed"
endif
----

[[opsi-winst-stringlist-create-by-registry]]
=== Stringlists from the registry


* `getRegistryKeyList32(`<regkey>`)` +
returns a stringlist with the names of all keys within <regkey>. +
32 Bit mode (with redirection). Available since 4.11.3

* `getRegistryKeyList64(`<regkey>`)` +
returns a stringlist with the names of all keys within <regkey>. +
64 Bit mode (without redirection). Available since 4.11.3

* `getRegistryKeyListSysnative(`<regkey>`)` +
returns a stringlist with the names of all keys within <regkey>. +
Mode (redirection) depends on the architecture of the OS. Available since 4.11.3

* `getRegistryVarList32(`<regkey>`)` +
returns a stringlist with the names of all value entries associated with key <regkey>. +
32 Bit mode (with redirection). Available since 4.11.3

* `getRegistryVarList64(`<regkey>`)` +
returns a stringlist with the names of all value entries associated with key <regkey>. +
64 Bit mode (without redirection). Available since 4.11.3

* `getRegistryVarListSysnative(`<regkey>`)` +
returns a stringlist with the names of all value entries associated with key <regkey>. +
Mode (redirection) depends on the architecture of the OS. Available since 4.11.3

Example: +
At first, we create entries in the registry with the following example code: +
[source,winst]
----
Registry_createkeys /32Bit

[Registry_createkeys]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test]
set "entry1" = "val1"
set "entry2" = "val2"
set "entry3" = "val3"
set "entry4" = "val4"
set "entry5" = "val5"
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key1]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key2]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key3]
openkey [HKEY_LOCAL_MACHINE\SOFTWARE\opsi.org\opsi-winst-test\key4]
----
Given the registry entries in the example above, and the following code:
[source,winst]
----
set $list$ = getRegistryVarList32("hklm\software\opsi.org\opsi-winst-test")
----
we will see the following values in the log: 
----
Set  $list$ = GetRegistryVarList32("hklm\software\opsi.org\opsi-winst-test")
Registry started with redirection (32 Bit)
    retrieving strings from GetRegistryVarList32 [switch to loglevel 7 for debugging]
        (string   0)entry1
        (string   1)entry2
        (string   2)entry3
        (string   3)entry4
        (string   4)entry5
----

Given the registry entries in the example above, and the following code:
[source,winst]
----
set $list$ = getRegistryKeyList32("hklm\software\opsi.org\opsi-winst-test")
----
we will get the following key in the log:
----
Set  $list$ = GetRegistryKeyList32("hklm\software\opsi.org\opsi-winst-test")
Registry started with redirection (32 Bit)
    retrieving strings from GetRegistryKeyList32 [switch to loglevel 7 for debugging]
        (string   1)key1
        (string   2)key2
        (string   3)key3
        (string   4)key4
----


== Secondary Sections

[[opsi-winst-commands-isfatalerror]]
=== Keeping Track of Failed Installations

If a product installation fails, then this should be signaled to the server.

Due to the fact that there is no automatic method that detects a failed installation, testing for a failed installation has to be done using script commands. 

To indicate in a '{opsi-winst}' script that the installation is failed we have to call the statement: +
`isFatalError` +
If this statement is called '{opsi-winst}' stops the normal execution of the script and sets the product result to 'failed' (otherwise it is 'success'). +

Since 4.11.3.2 there is a new variant of this command:

* `isFatalError` <string> +
in this case, a short error message string is passed as 'actionProgress' to the opsi-server and displayed in the opsi-configed.

=== ExecWith Sections

If you call an ExecWith section with the interpreter 'powershell', then the content of the section will be stored in a temporary file with the extension `.ps1`. 

[[opsi-winst-winbatch]]
=== WinBatch Sections

[[opsi-winst-winbatch-params]]
==== Call Parameter (Modifier)

* `/WaitSeconds` [number of seconds] +
If a call includes the parameter /WaitSeconds [number of seconds], then '{opsi-winst}' is waiting the specified time before proceeding. In the default configuration, we also wait for any programs that are currently running to finish. If we combine the parameter /WaitSeconds with the option `/LetThemGo`, then '{opsi-winst}' continues processing after the waiting time is finished.
 
* `/WaitForProcessEnding` <program name> +
Waits for the process called <program name> to end. +
Should be combined with `/TimeOutSeconds`.

Explanation: +
When starting an external process from a winbatch call, the '{opsi-winst}' waits for the current process to finish before executing the next command in the script.

.Sequential processing of a script that waits for the end of a program
image::waitforprocess_scheme_std.png["waitforprocess_scheme_std",width=150]

There are some external programs which start another process and then end without waiting for their child process to end. From the point of view of '{opsi-winst}', the process is ended and the next command could be started.

.End of process while running child process
image::waitforprocess_scheme_fork1.png["waitforprocess_scheme_fork1",width=200]

If you run an uninstall program and a setup program in sequence and the uninstall program works with such a child process, you can have conflicting processes running because the uninstallation and installation processes are running at the same time.

.Overlapping of a child process and a parent process
image::waitforprocess_scheme_fork2.png["waitforprocess_scheme_fork2",width=200]

Using the modifier `/WaitForProcessEnding` helps to avoid such a situation.

* `/TimeOutSeconds` <seconds> +
A timeout setting. After waiting <seconds>, '{opsi-winst}' will end the process. +
Since version 4.11.3, /TimeOutSeconds may be used without a waiting condition (e.g. `/WaitForProcessEnding`) but not in combination with `/WaitSeconds`. +
Example: +
[source,winst]
----
Winbatch_uninstall /WaitForProcessEnding "uninstall.exe" /TimeOutSeconds 20
[Winbatch_uninstall]
"%ScriptPath%\uninstall_starter.exe"
----

* `/RunElevated` +
Starts a process that has a security token with elevated privileges. This modifier has the following restrictions: +
** For NT5 it does not change anything.
** A process started with this modifier has no network access. So you should copy a program to a temporary local directory but do not start it from a network share.
** You may see problems while using the graphical interface. So true silent installations are the better choice in this case.
** Only works if the '{opsi-winst}' has been started using the web service.

*  `getLastExitCode` +
returns a string that contains the value of the exitcode of the the process that was last called by a WinBatch / DosBatch / ExecWith section. +
When using a DosBatch or ExecWith section, you will normally get the exitcode of the interpreter that was called. To get the exitcode of your script you have to define it explicitly.


== Miscellaneous

* wisynth: TuibInstScript.doInfo: optimal fill for LabelInfo

* name of installing product shown in initial info block. fixes #367

* wisynth: executeWith: use extension '.ps1' if interpreter = powershell, fixes #382

* logfiles are not locked for reading (revert to previous methodology) while opsi-winst is running
                         fixes: https://forum.opsi.org/viewtopic.php?f=7&t=3655
                         
* winbatch: tests to determine if a file extension is exe or com, and it not case sensitive.
         fixes: https://forum.opsi.org/viewtopic.php?f=7&t=3592#p18127
         
* Winbatch: The parameter for /timeoutseconds may now be a variable. fixes #352
