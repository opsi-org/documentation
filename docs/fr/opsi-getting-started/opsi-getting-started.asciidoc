////
; Copyright (c) uib gmbh (www.uib.de)
; Cette documentation appartient à uib
; et publié sous licence Creative Commons by-sa allemande
; voir:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; anglais:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; crédits: http://www.opsi.org/credits/
////


:Author:    OpenSides sprl
:Email:     opsi@opensides.be
:Date:      05.03.2014
:Revision:  4.0.4
:doctype:	book

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= Mise en route d'opsi (Version d'opsi 4.0.3)

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]

[[opsi-getting-started-introduction]]
== Présentation
Ces instructions expliquent en détail l'installation et le démarrage d'un serveur OPSI. Elles commencent à partir du package d'installation fourni et conduisent à une installation d'essais d'un client.

La configuration réseau montrée est un exemple et concerne un réseau sans serveur DHCP concurrent (par exemple un réseau de test isolé avec un serveur OPSI et quelques clients pour les premiers essais).

Nous vous recommandons fortement de faire les premiers essais avec OPSI dans un réseau de test, séparé d'autres serveurs DHCP. Une connexion temporaire au réseau principal peut se faire pour le téléchargement des paquets de produit actuels.

Pour une intégration de OPSI dans votre environnement de production existant, Opensides fournit des services de consultation pour vous.

[[opsi-getting-started-introduction-first-steps]]
=== Étapes à suivre pour l'installation et la mise en route
Les quatre étapes pour installer et démarrer un serveur OPSI sont:

. installation de base du serveur
. configuration du serveur: +
configuration du réseau, réglage des mots de passe (administrateur opsi, pcpatch, samba), mise à jour du serveur
. téléchargement et installation des produits OPSI requis pour les clients
. réalisation des paquets des logiciels du système de base de Windows en utilisant le CD original de Windows

À ce moment un client peut être installé automatiquement.

En fonction de vos exigences, OPSI propose différents types d'installations de base.
Les procédures d'installation pour différents types d'installations de base sont décrites dans le chapitre 3 de ce manuel.
Les types d'installations comprennent soit l'utilisation d'une machine existante VMware ou l'installation de opsi
sur la machine hôte.

[[opsi-getting-started-introduction-hardware-preconditions]]
=== Configuration matérielle requise

Pour un serveur OPSI le matériel suivant est recommandé:

* Intel-x86-compatible PC

* carte réseau pris en charge par le noyau Linux standard
* un disque dur avec une capacité de 16 Go ou plus
* un lecteur de CD ROM amorçable

Pour les essais, comme pour l'environnement de production, les exigences en capacité du serveur sont modérés.

Nous recommandons que lorsque l'on travaille avec une machine VMware, l'ordinateur hôte doit avoir au moins un processeur dual et 4 Go de RAM.
Pour les tests un client peut être lancé dans une autre machine VMware sur le même ordinateur hôte.


[[opsi-getting-started-introduction-software-and-configuration-preconditions]]
===Exigence de configuration

Votre serveur et votre réseau doivent se conformer aux exigences suivantes pour installer OPSI et travailler avec :

* *nom de domaine DNS valide* +
Votre nom de domaine DNS doit contenir au moins un nom de domaine et un domaine de premier niveau. Ainsi, le nom de domaine pleinement qualifié (FQDN) doit contenir un ou plusieurs points. +
Noms de domaine valides, par exemple: 'domain.local' , 'uib.de', 'subdomain.domain.de'
Noms de domaine non valable, par exemple: 'mydomain.d' car le nom de domaine de premier niveau c'est d'un seul caractère
Noms de domaine non valable, par exemple: 'mydomain' parce que ce n'est qu'un domaine de premier niveau.
voir aussi: +
http://fr.wikipedia.org/wiki/Nom_de_domaine

* *nom d'hôte DNS valide* +
Les noms d'hôte (aussi le nom d'hôte du client) doivent suivre les règles de nommage. Elles peuvent contenir des lettres ASCII a-z, des chiffres 0-9 et le trait d'union '-'. Les soulignements ne sont pas autorisés. +
voir aussi: +
http://fr.wikipedia.org/wiki/Hostname

* *résolution de nom correcte pour le serveur* +
Exécutez la commande suivante et vérifiez le résultat:
+
[source,shell]
----
`getent hosts $(hostname -f)`
----
+
Le résultat devrait ressembler à l'exemple suivant: +
'192.168.1.1 server.domain.tld server' +
Le résultat a le schéma: +
'<Adresse IP> <nom hôte pleinement qualifié> <nom hôte>' +
Si le résultat est différent de l'exemple ci-dessus (contient par exemple '127.0.0.1 'ou 'localhost ') ou le nom d'hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de nom (DNS ou le fichier `/etc/hosts`).

[[opsi-getting-started-installation]]
== Installation

[[opsi-getting-started-installation-base]]
=== Installation de base du serveur opsi

Ce chapitre décrit les différents types d'installations d'un {opsi-server}. Vous pouvez choisir votre type d'installation et ignorer les autres instructions.

Si toutes les étapes nécessaires ont réussi, le serveur est configuré correctement est prêt pour le démarrage. Enfin, vous devez mettre à jour votre système en fonction du chapitre 'mise à jour du {opsi-server}'.

Nous recommandons d'utiliser une machine virtuelle à des fins d'évaluation.

Suivez les instructions en entrant les commandes dans
[source,shell]
----
les champs marqués
----
(par exemple, avec un copier-coller à partir de ce document)

Si vous avez des problèmes, s'il vous plaît demandez de l'aide à https://forum.opsi.org

[[opsi-getting-started-installation-base-vm]]
==== Lancement d'une Machine Virtuelle

Un '{opsi-server}' peut être installé comme une machine virtuelle, quand les exigences de rendement sont faibles. Pour VMware une machine virtuelle configuré, prêt à l'emploi, est fournie. Vous pouvez télécharger les fichiers VMware ou VirtualBox à partir du site Web de Uib. Afin d'utiliser cette machine, le lecteur VMware gratuit ou Virtualbox sont suffisants pour faire fonctionner cette machine virtuelle.

Vous pouvez également utiliser VMware ESX. Dans ce cas, vous devez utiliser le convertisseur de VMware pour importer la machine virtuelle. Il peut arriver que vous devez changer le contrôleur SCSI manuellement après l'importation dans ESX.


[[opsi-getting-started-installation-base-vm-start]]
===== Premier démarrage

*VMware*

Si vous avez un serveur exécutant VMware ou un lecteur de VMware, cela ne prend que quelques clics de souris pour une installation de base de '{opsi-server}':

* Téléchargez le fichier 'opsi4.0-servervm.zip' depuis internet.

* Décompressez le fichier et un repertoire 'opsidemo' sera créé.

* Démarrez le lecteur VMware. Avec le lecteur VMware, ouvrez le fichier 'opsidemo.vmx' dans le récent répertoire généré 'opsidemo'. Vous pouvez obtenir un message que le CD-ROM et le dispositif de disquettes ont une mauvaise adresse. Vous pouvez ignorer ce message, et la machine virtuelle sera toujours démarrer.

*Virtualbox*

* Téléchargez le fichier 'opsi4.0-servervm.soa' depuis internet.

* Démarrez Virtualbox. Dans le menu 'File' / 'Import Appliance' sélectionnez votre fichier `*.soa` et importez-le.

*Général*

Le lecteur VMware est gratuit et disponible pour tous les systèmes d'exploitation commun sur vmware.com. Habituellement, il peut être installé sans problèmes, si le matériel de l'ordinateur hôte (en particulier la mémoire) répond aux besoins des logiciels systèmes fonctionnant en parallèle.

La machine virtuelle fourni par uib est basé sur Linux. Les propriétés du système hôte sont décrits dans le fichier de configuration 'opsidemo.vmx'. Si vous exécutez l'image '{opsi-server}' sous Windows, ou si vos périphériques sous Linux ont une autre adresse, vous devez adapter le fichier à votre environnement.


[[opsi-getting-started-installation-base-vm-lang]]
===== Choix de la langue
La première étape est de choisir la langue préférée:

.Choix de la langue
image::1stboot-language-selection.png["Screenshot: Sélection de la langue ",width=400]

[[opsi-getting-started-installation-base-vm-1stboot]]
===== Premier démarrage
Le {opsi-server} doit être connecté à Internet pour fonctionner correctement. Le script '1stboot.py' démarre automatiquement au premier démarrage afin de configurer les paramètres réseau du {opsi-server}.

Vous pouvez appeler '1stboot.py' à partir de la ligne de commande si quelque chose s'est mal passé.

WARNING: Vous ne pouvez pas utiliser '1stboot.py' pour renommer votre 'opsi-server' après!

Le fichier journal de '1stboot.py' est situé dans '/var/lib/1stboot/1stboot.log'.

.1stboot.py Masque de démarrage
image::1st-startup-mask.png["Screenshot: 1stboot.py Masque de démarrage",width=400]

Remplissez les informations de configuration de votre réseau et répondez aux questions.

.1stboot Masque de saisie
image::1stboot-input-mask.png["Screenshot: 1stboot Masque de saisie",width=400]

Dans la suite, il vous sera demandé :

server name::		Nom de ce serveur (sans nom de domaine) ex. +opsidemo+

domain::		DNS-Domain (pas de Windows-Domain) – le nom doit inclure un point ex. +opsi.local+

ip address::		Adresse de ce serveur ex. +192.168.1.50+

netmask::		Masque réseau de ce serveur ex. +255.255.255.0+

windows domain::	Nom du domaine Windows (pas le domaine DNS)

country::		Pour la création du certificat SSL: Identification de la nation (2 lettre capital) ex. +DE+

state::			Pour la création du certificat SSL: Identification de l'état fédéral ex. +RPL+

city::	Pour la création du certificat SSL: Identification de la ville ex. +Brussels+

organization::		Pour la création du certificat SSL: Identification de l'organisation ex. +uib gmbh+

organisational unit:: Pour la création du certificat SSL: Identification du bureau (optionnel)

email address::	Pour la création du certificat SSL: adresse mail (optionnel)

gateway::	Adresse IP de la passerelle internet ex. +192.168.1.1+

proxy::	Si l'accès a internet se fait via un proxy, rentrer ici les informations: ex. `http://myuser:mypass@192.168.1.5:8080`

DNS server:: adresse IP du serveur de nom ex. +192.168.1.1+

mail relay:: adresse IP du serveur de mail ex. +192.168.1.1+

tftp server::	adresse IP du serveur tftp (normalement le même serveur)

Password of root::	Mot de passe de root

Une fois terminé le programme '1stboot.py' la serveur VMWare sera redémarré.

Note technique sur le programme 1stboot.py: +
Le programme travaille avec des modèles pour pouvoir modifier les fichiers de configuration. Les modèles sont dans : `/var/lib/1stboot/templates/`. +
Ils peuvent être modifié pour une utilisation ultérieure.

[[opsi-getting-started-installation-base-vm-second-start]]
===== Deuxième démarrage

Après le redémarrage connectez vous comme 'root' avec votre mot de passe root.

L'interface graphique utilisateur du {opsi-server} est démarré (mis en œuvre en tant que gestionnaire de fenêtres durable). Une fenêtre d'accueil du navigateur Firefox revient avec de nouvelles instructions et d'information faisant référence au document de mise en route (le document que vous lisez actuellement).

Si vous obtenez le message qu'il n'y a pas de connexion réseau, vous devez à nouveau redémarrer le serveur. Cela pourrait résoudre le problème.

.Vue de l'interface web de configuration de opsi-server
image::opsiserver_start_gui.png["Screenshot: Vue de l'interface web de configuration de opsi-server",400]

Si les informations de configuration réseau sont correctes, vous êtes en mesure de vous connecter à distance sur le {opsi-server}, par exemple:

* Utilisez 'ssh' en la ligne de commande pour accéder au serveur (dans les systèmes linux toujours existant, sous Windows avec putty: http://www.chiark.greenend.org.uk/~sgtatham/putty/) +

Comme nom d'utilisateur vous pouvez utiliser 'root' et pour vous authentifier le mot de passe de root.

[[opsi-getting-started-installation-base-vm-term]]
===== Fenêtre du terminal

Dans la suite, certaines commandes doivent être saisies dans une interface de ligne de commande. C'est peut-être la meilleure façon de travailler à travers ces instructions.

Les commandes sont entrées dans une fenêtre appelée "fenêtre de terminal". Voici quelques exemples qui expliquent comment accéder à une fenêtre de terminal

* Accès à distance par ssh sur '{opsi-server}' (voir Section 3.1.1.4 du dernier chapitre)

* Ouvrir une fenêtre de terminal dans la surface graphique du {opsi-server} en cliquant sur l'icône de terminal dans la barre d'icônes.

* Ouvrir une fenêtre de terminal dans la surface graphique du {opsi-server} avec un clic droit de la souris dans la surface et le choix de „Terminal“. +
NOTE: l'interface graphique a de nombreuses applications de travail qui sont accessibles en utilisant la série de touches dans le coin supérieur gauche de l'écran.

Il est très avantageux de mettre les commandes d'exemple de ce manuel avec un couper/coller dans une fenêtre de terminal (dans la mesure où l'environnement de l'application le support).

Les extraits de l'exemple des fichiers de configuration sont formatés comme ceci:
[source,configfile]
----
depoturl = smb://nom_de_l'hôte_samba/nom_du_partage/chemin
----

Les extraits pour les commandes que vous avez à exécuter sont formatés comme ceci:
[source,shell]
----
cd /tmp
ls -l
----

Les chevrons '< >' marquent des noms abstraits. Dans un cadre concret toute la mention '<nom abstrait>' doit être remplacé par un vrai nom. +
Exemple: Le partage de fichiers, où opsi place les paquets des logiciels, peut être abstraitement noté comme '<opsi-depot-share>'. Si le partage de fichiers réel est `/var/lib/opsi/depot`, alors vous devez remplacer le nom abstrait avec exactement ce chemin. L'emplacement du paquet '<opsi-depot-share>/ooffice' devient `/var/lib/opsi/depot/ooffice`. .

[[opsi-getting-started-installation-base-vm-network]]
===== Vérifier et si nécessaire corriger la connexion réseau

Si la configuration réseau est correcte et que l'ordinateur est connecté à internet, vous pouvez accéder a n'importe quelle adresse sur Internet avec le navigateur dans la fenêtre de démarrage.

Si la connexion Internet ne fonctionne pas, vous devez ouvrir une fenêtre de terminal (peut-être l'accès à distance n'est pas encore possible, mais le terminal directement sur le serveur oui) et faire les vérifications de connexion réseau habituel.

Vous pouvez rentrer dans la configuration du réseau en entrant la commande suivante dans la fenêtre du terminal:
[source,shell]
----
1stboot.py
----

Un redémarrage est forcé avec la commande
[source,shell]
----
reboot
----

Si la connexion réseau fonctionne, vous pouvez installer les paquets OPSI ou les actualiser, et configurer l'environnement de test pour la première installation. Si vous souhaitez utiliser la machine virtuelle VMware(et ne pas directement installer le {opsi-server} sur votre système hôte) vous pouvez passer à <<opsi-getting-started-installation-config>>.

[[opsi-getting-started-installation-base-deb]]
==== Installation d'un système Debian / Ubuntu

Opsi 4.0 est conçu et testé pour:

* Debian : Lenny, Squeeze

* Ubuntu: Lucid, Maverick, Natty, Oneiric, Precise

* Le support pour Debian Lenny et Ubuntu Maverick est obsolèt.

Lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l'avez pas encore fait).

Dans ce chapitre, nous supposons que vous connaissez le système de paquets de debian (des renseignements sur le sujet, vous les trouverez dans les livres appropriés, sur les pages de manuel ou sous https://www.debian.org/doc/).

Notez que un {opsi-server} a besoin de place de stockage dans `/opt/pcbin` et `/var/lib/opsi`. Dans les deux répertoires un espace libre d'au moins 8 Go est recommandée.

Nous recommandons les installations suivantes:

[source,shell]
----
aptitude install wget lsof host python-mechanize p7zip-full cabextract openbsd-inetd
----

opsi a besoin de samba, qui peut être installé avec:

[source,shell]
----
aptitude install samba samba-common smbclient smbfs samba-doc
----

Si vous souhaitez utiliser MySQL comme Backend (par exemple pour l'inventaire et la gestion des licences), vous aurez besoin d'installer mysql-server ainsi:
[source,shell]
----
aptitude install mysql-server
----

Vérifiez l'entrée de {opsi-server} dans `/etc/hosts` ou la sortie de
[source,shell]
----
getent hosts $(hostname -f)
----

Le résultat devrait ressembler à l'exemple suivant: +
'192.168.1.1 server.domain.tld server' +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>' +
Si le résultat est différent que l'exemple ci-dessus (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d'hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).

Pour commencer l'installation de OPSI, ajoutez la ligne suivante dans le fichier '/etc/apt/sources.list', en fonction de votre système d'exploitation:

Ubuntu Lucid:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04 ./
----

Ubuntu Maverick:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.10 ./
----

Ubuntu Natty:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.04 ./
----

Ubuntu Oneiric:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.10 ./
----

Ubuntu Precise:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_12.04 ./
----
Debian Lenny:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0 ./
----

Debian Squeeze:
[source,configfile]
----
deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_6.0 ./
----

Maintenant exécutez ces commandes pour importer la clé de signature du dépôt:

Ubuntu Lucid:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.04/Release.key | apt-key add -
----

Ubuntu Maverick:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_10.10/Release.key | apt-key add -
----

Ubuntu Natty:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.04/Release.key | apt-key add -
----

Ubuntu Oneiric:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_11.10/Release.key | apt-key add -
----

Ubuntu Precise:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/xUbuntu_12.04/Release.key | apt-key add -
----
Debian Lenny:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_5.0/Release.key | apt-key add -
----

Debian Squeeze:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/Debian_6.0/Release.key | apt-key add -
----

toutes: +
Vérifiez la réussite d'importation de clé:
[source,shell]
----
apt-key list
----
devrait contenir la sortie: +
`pub   1024D/4DC87421 2010-07-23 [verfällt: 2012-09-30] +
uid    home:uibmz OBS Project <home:uibmz@build.opensuse.org>`

Exécutez les commandes suivantes pour installer OPSI sur votre serveur:

[source,shell]
----
aptitude update
aptitude safe-upgrade
aptitude remove tftpd
update-inetd --remove tftpd
aptitude install opsi-atftpd
aptitude install opsi-depotserver
aptitude install opsi-configed
----

Lors de l'installation de tftpd, peut vous être demandé le répertoire pour tftp. Répondez avec `/tftpboot`. A la question sur le support multicast vous pouvez répondre 'no'.

Pendant l'installation de opsiconfd vous seront demandé des informations pour la préparation du certificat SSL.

Au cours de l'installation du {opsi-server} vous devez permettre le patching du fichier `smb.conf`. Répondez avec 'yes' a la question. Il vous sera aussi demandé un mot de passe pour l'utilisateur 'pcpatch'. Définissez un nouveau mot de passe et n'oubliez pas ce mot de passe lors de la poursuite avec les sections suivantes'.

Lors de l'installation du {opsi-server}, ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.

Si vous souhaitez exécuter l'interface de gestion OPSI '{opsi-configed}' directement sur ​​le serveur, vous devez installer l'environnement Java Runtime. Pour installer ces paquets, vous devez rentrer ces commandes:

.Debian:
Dans le fichier `/etc/apt/sources.list` ajoutez les branches +non-free+ and +contrib+ à vos dépôts.

Le résultat peut ressembler à ceci:
[source,configfile]
----
deb http://ftp.de.debian.org/debian/ lenny main non-free contrib
deb-src http://ftp.de.debian.org/debian/ lenny main non-free contrib

deb http://security.debian.org/ lenny/updates main non-free contrib
deb-src http://security.debian.org/ lenny/updates main non-free contrib
----
NOTE: Si vous utilisez 'squeeze' les dépôts seront 'squeeze' au lieu de 'lenny'.

Pour installer Java JRE exécutez:
[source,shell]
----
aptitude update
aptitude install sun-java6-jre sun-java6-plugin
----

.Ubuntu:
Depuis que Ubuntu a enlevé le JRE de Sun/Oracle de ses dépôts, nous vous recommandons d'utiliser OpenJDK. Cela fonctionne très bien si vous démarrez opsi-configed comme application ou via Webstart. L'exécution de opsi-configed à l'intérieur du navigateur comme applet peut entraîner des problèmes avec OpenJDK 6.

.Ubuntu Lucid, Maverick, Natty:
Pour installer le JRE Java exécutez:
[source,shell]
----
aptitude update
aptitude install openjdk-6-jre icedtea-plugin
----

.Ubuntu Oneric, Precise:
Depuis Oneric nous vous recommandons d'utiliser la version 7 de OpenJDK.
Pour installer le JRE Java exécutez:
[source,shell]
----
aptitude update
aptitude install sun-java6-jre sun-java6-plugin
----

En supposant que toutes les étapes ci-dessus se sont terminées avec succès, nous supposons d'une configuration réseau correcte. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

[[opsi-getting-started-installation-base-ucs]]
==== Installation sur un univention corporate server (UCS)

Lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l'avez pas encore fait).

opsi 4.0 est testé et relâché pour UCS 2.4, 3.0 et 3.1

Est possible d'installer opsi4ucs sur un UCS Master, Backup ou Slave. +
L'installation sur Memberservers n'est pas prise en charge.

Le paquet opsi4ucs-ldap-schema doit être installé sur un UCS Master.

La documentation qui suit suppose que OPSI doit être installé sur un UCS Master.

Préparatifs nécessaires:

* La commande
+
[source,shell]
----
hostname -f
----
+
doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.domain.local'

Vérifiez l’entrée de {opsi-server} dans  `/etc/hosts` ou la sortie de
+
[source,shell]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>'. +
Si le résultat est différent que l'exemple ci-dessus (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).

* Samba doit être configuré

* mysql-server doit être installé

* Si la machine doit également agir en tant que serveur DHCP, le démon dhcpd doit être configuré et devrait être opérationnel

[[opsi-getting-started-installation-base-ucs-2]]
===== Installation sur un système UCS 2

L'installation de OPSI avec le backend par défaut Univention est disponible sur le Master, Backup, et Slave.
Il n'est pas possible sur le Memberserver.  Lorsque le serveur opsi-config devrait ajouter un autre opsi-depotserver (en plusieurs endroits),
alors le serveur opsi-config doit être installé sur un UCS-Master or UCS-Backup.

Le paquet opsi4ucs-ldap-schema doit être importé dans le système maître.

La documentation suivante est utilisé pour une installation sur un système maître.

Utilisez la commande suivante pour activer les dépôts UCS sur votre serveur:
[source,shell]
----
ucr set repository/online/component/backports4opsi=yes repository/online/component/backports4opsi/server=apt.univention.de repository/online/component/backports4opsi/parts=unmaintained
----
Vous n'avez pas besoin d'exécuter cette commande sur le maître si vous voulez installer seulement le schéma opsi.
Si vous souhaitez installer OPSI sur un esclave ou sur un serveur de sauvegarde, alors les commandes ci-dessus sont importants pour le serveur.
(Il n'est pas imporant d'entrer les commandes sur le serveur si vous souhaitez importer seulement le opsi4ucs-ldap-schema.)

Ajoutez le dépôt opsi dans votre `/etc/apt/sources.list` avec:
[source,shell]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4 ./" >> /etc/apt/sources.list
----

Maintenant exécutez les commandes pour importer la clé de signature du dépôt:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs2.4/Release.key | apt-key add -
----
Pour installer OPSI sur un UCS Master, exécutez les commandes suivantes:

[source,shell]
----
cd /tmp
wget http://download.uib.de/opsi4.0/archiv/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
dpkg -i /tmp/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
univention-install opsi4ucs
----

Lors de l'installation du {opsi-server} ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.

Pour installer OPSI sur un UCS Backup ou Slave, exécutez les commandes suivantes:

D'abord exécutez les commandes suivantes sur le Master:
[source,shell]
----
cd /tmp
wget http://download.uib.de/opsi4.0/archiv/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
dpkg -i /tmp/opsi4ucs-ldap-schema_4.0.2.2-1_all.deb
----

Maintenant, exécutez les commandes suivantes sur votre système cible (Backup ou Slave):

[source,shell]
----
univention-install opsi4ucs
----

Lors de l'installation du {opsi-server} ils peuvent surgir des avertissements au sujet d'un manque du fichier `/etc/opsi/modules` que vous devez ignorer.

Si le rôle du serveur est quelque chose d'autre que UCS Master, il est requis d'exécuter le script join après l'installation.
[source,shell]
----
univention-run-join-scripts
----

Maintenant vous pouvez trouver un lien vers l'interface de gestion OPSI en accédant à l'URL `https://<servername>:4447/configed/`.

Seuls les membres du groupe 'opsiadmin' sont autorisés à utiliser l'interface de gestion OPSI. S'il vous plaît utilisez Univention-Admin pour modifier les appartenances aux groupes d'un utilisateur. L'administrateur sera ajouté au groupe opsiadmin automatiquement lors de la procédure d'installation de OPSI.

Pour augmenter les performances du serveur LDAP il faudra indexer l'attribut opsiHostId. Pour ce faire, il suffit d'exécuter la commande suivante sur UCS master:
[source,shell]
----
ucr set ldap/index/eq=$(ucr get ldap/index/eq),opsiHostId
/etc/init.d/slapd stop
slapindex
/etc/init.d/slapd start
----

En supposant que toutes les étapes ci-dessus se sont terminée avec succès, nous supposons d'une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: Les commandes unix qui sont utilisés dans les chapitres suivants fonctionnent sur des systèmes Debian. Vous pourriez avoir à les changer en fonction de votre système Linux.


[[opsi-getting-started-installation-base-ucs-3]]
===== Installation sur un système UCS 3

Le backend opsi 'univention' n'est plus disponible pour UCS 3.
Le backend par défaut est le backend file, qui est le même pour les autres distributions.

WARNING:  Because of the reason mentioned above, it is not possible to install the opsi4ucs-ldap-schema on a
UCS 3 system that is the Master.  Especially when the UCS 3 System will be installed with Samba4 (default).

The installation of opsi with the file or MySQL backend is possible on a Rolling Master, Backup, and Slave.

The following documentation describes an installation on a master with Samba4.

The classical installation, with the user: 'pcpatch' in the group: 'pcpatch', does not work with UCS 3.
Samba4 has placed fundamental restrictions on the Active-Directory, such as groups with the same name
as the user (usually in Unix/Linux) are no longer allowed.  For this reason, a new configuration file has
been introduced:  `/etc/opsi/opsi.conf`, which will control how the groups will access Samba-Access. More specifically, for
UCS 3 the group name 'pcpatch' will be called 'opsifileadmins'.  This means
that the user who belonged to the group 'pcpatch' under UCS 3, must now belong to the group 'opsifileadmins'.
This means that a user, who must have access rights for opsi-packages under UCS3 cannot be a member of 'pcpatch',
but must be a member of the group 'opsifileadmins'.  This peculiarity initially applies only to UCS 3, and is different
for different distributions and chapters of the opsi-documentation.  Furthermore, since UCS 3, the user 'pcpatch' is
created as a fully-fledged domain user and is no longer a system user. (Also, the UID of 'pcpatch' and the GID of the
'opsifileadmins' group will no longer be fixed at 992, but will be self-assigned in UDM, which will also
eliminate replication problems with the User and Group).  For more information about this new configuration file,
please refer to the opsi-manual.

Before opsi can be installed, some specific preconditions must be met.  At first, it must be ensured that
pcpatch account will be cleanly replicated to Samba4.  To check that the Univention s4-Connected connector has
the pcpatch account in the Ignore-List, please execute on UCS-Master following commands:

[source,shell]
----
ucr get connector/s4/mapping/user/ignorelist
----

If you see pcpatch in the output, which looks like this:

[source,configfile]
----
root,pcpatch,ucs-s4sync
----

The following command will remove pcpatch from the Ignore-List:

[source,shell]
----
ucr set connector/s4/mapping/user/ignorelist=root,ucs-s4sync
----

After these commands have completed, restart the Connector:

[source,shell]
----
invoke-rc.d univention-s4-connector restart
----

It may take a few minutes for the changes to take effect.

Another problem is that a security feature of UCS does not allow anonymous reading of the Univention-LDAP.
This features is turned off for the default installation of UCS 2.4-x.  Therefore, the opsi config server has no
possibility to know the group membership of each user.  Since no users (neither system nor domain users)
can explicitly give reading rights, there remain two alternatives to provide reading rights from
the Configserver:

Either completely turn off the features:
[source,shell]
----
ucr set ldap/acl/read/anonymous=yes
----

(This will be done automatically with an upgrade from UCS 2.4-x to UCS 3.)

The second option is to partially disable the Configserver:

[source,shell]
----
ucr set ldap/acl/read/ips="127.0.0.1,192.168.1.1"
----

In this case, the address 192.168.1.1 must be replaced with the real IP address of the server.

When any changes have been made to the server, then slapd must be restarted (Note that when slapd restarts
LDAP on a production system, it should be done at the right time when user load is as low as possible):

[source,shell]
----
invoke-rc.d slapd restart
----

Once these settings have been made, opsi4ucs can be installed.  The unmaintained repositories of UCS
are important, and can be set with the following command:

[source,shell]
----
ucr set repository/online/unmaintained="yes"
----

Next, activate the opsi4ucs repository:

[source,shell]
----
echo "deb http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs3.0 ./" >> /etc/apt/sources.list
----

Now import the key to the repository system with th following command:

[source,shell]
----
wget -O - http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/ucs3.0/Release.key | apt-key add -
----

For the installation on a Master, the following commands must be entered:

[source,shell]
----
univention-install opsi4ucs
univention-install opsi-atftpd
univention-install p7zip-full cabextract
aptitude install mysql-server
----

During the {opsi-Server}s installation, please ignore any warnings that say `/etc/opsi/modules` not found.


If the role of the target systems different than Master or Backup, then the following commands run the opsi4ucs Join-Script:

[source,shell]
----
univention-run-join-scripts
----

A link to the management interface can be found at the URL link `https://<servername>:4447/`.

To use the opsi configurations editor, the user must be a member of the group opsiadmin.
The group membership can be edited using Univention-Admin.  The user Administrator will automatically
be added to this group during opsi installation.

Finally the 'opsi_depot' release point must be released in UDM.  To do this set the link to 'yes' under Advanced Settings -> Advanced
Samba Settings:  'follow symlinks'.  The same should be done for the 'opsi_depot_rw', so that the driver integration will
take place without problems.  If the directory '/var/lib/opsi/depot' is found on an extra partition or hard disk, then
the option for those links should be set to 'yes'.

To make sure that opsi is running with the proper settings, restart opsi by entering the following commands:

[source,shell]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

After installing opsi on a UCS 3 system, samba4 on the server has to be restarted with the following command:

[source,shell]
----
/etc/init.d/samba4 restart
----

Since samba4 is a central service, restarting samba4 is not done automatically by the package, but must be done manually.
Please note that after restarting samba, there may be a delay in access to any new releases.

Since UCS 3 this is no direct contact between the Univention LDAP backend and opsi.  Clients must first
be created in LDAP using opsi over UDM, including all system information (in particular the MAC address).
Deleting the LDAP clients in Univention does not mean that the client was also deleted under opsi.

Since opsi has already been run on the server, it is assumed that the network configuration is correct. +
Continue with the installation be skipping forward to <<opsi-getting-started-installation-config-backend>>.

WARNING:  The Unix commands that are used in the following chapters are for Debian systems. You may have to change them to match your Linux system.

[[opsi-getting-started-installation-base-ucs-listener]]
===== opsi4ucs-Listener

In an 'standard' opsi4ucs-installation Windows-Clients have to be created in UDM first and in a second step they have to be created in the opsi-configed.
With the former univention-ldap-backend, both steps had to be done, too, but only the FQDN of the client had to be filled in as HostID into the {opsi-configed}. All other informations have been transferred from LDAP.
With opsi4ucs for UCS3 this former univention-ldap-backend isn't available any longer. So from now on, changes in the LDAP are not automatically transferred to opsi.
For example, if a client's MAC address changes in LDAP and in opsi a netboot-product is set to setup, the boot configuration would be provided with a false MAC address.

A solution for this problem provides the new opsi-listener, programmed by DIGITEC GmbH. (www.DIGITEC-SES.de) The belonging package is part of the official opsi repsitory.

For installing the package run this command on the {opsi-configserver}:

[source,shell]
----
univention-install digitec-opsi-listener
----

This command installs the opsi-listener into the UCS univention-directory-listener and restarts it.
With a standard-installation this listener works without further configuration. If a client is created or removed in LDAP, this information is sent to opsi. So with this ucs-listener there is no need to create a client in opsi in addition.
Don't forget to deploy the {opsi-client-agent} on new windows-clients as described in <<opsi-getting-started-firststeps-software-deployment-client-integration>>. The {opsi-client-agent} isn't automatically deployed with the opsi-listener.

The behavior of the opsi-listener can be controlled via UCR-variables.
These are the possible configurations:


[options="header"]
|=======================
| UCR-variable | Function | Default
| digitec/opsi/listener/host/filter | LDAP search filter opsi-Host-Objekt | (objectClass=univentionWindows)
| digitec/opsi/listener/host/modify | Change an opsi-Host-Object | true
| digitec/opsi/listener/host/delete | Remove an existing opsi-Host-Object, if it is no longer there in LDAP | true
| digitec/opsi/listener/host/create | Create an opsi-Host-Objekt | true
|=======================

These variables may be edited via UCS web interface or via command line.
The following example describes how to change one of the options named above via command line and how to make it undone. (For questions about the handling via UCS web interface, look at the official UCS documentation)



Configuration of the LDAP search filter:

[source,shell]
----
ucr set digitec/opsi/listener/host/filter='(&(objectClass=univentionWindows)(customAttr=opsi))'
----

To make it undone and set it to default use:

[source,shell]
----
ucr unset digitec/opsi/listener/host/filter
----

To activate these configurations, the univention-directory-listener service has to be restarted.

[source,shell]
----
/etc/init.d/univention-directory-listener restart
----

It is possible to run a complete synchronization. This is useful e.g. if opsi is installed in an existing infrastructure. Even if the variables named above have changed a complete synchronization may make sense.
The following command starts this synchronization:

[source,shell]
----
univention-directory-listener-ctrl resync opsilistener
----

The listener writes its messages into: `/var/log/univention/listener.log`.
The loglevel will be taken over from univention-directory-listener and cannot separately be set, what would be usual for other services in opsi.
The loglevel is defined in the UCR-variable: `listener/debug/level`. Please notice, that the opsi-listener doesn't offers the opsi standard loglevels. It takes the loglevels from the univention-directory-listener (e.g. 4 is debug and 2 is normal output. For more loglevel information look at the official UCS-documentation).


[[opsi-getting-started-installation-base-opensuse]]
==== Installation sur openSUSE

S'il vous plaît notez:

* opsi 4.0 est testé et relâché pour openSUSE  12.1 , 12.2.

* Le support pour openSUSE 11.3 est obsolèt.

* uib gmbh recommandent vivement aux fins d'évaluation l'utilisation de opsi-VM.


Lisez <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l'avez pas encore fait).

Préparatifs nécessaires:

* La commande
+
[source,shell]
----
hostname -f
----
+
doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.domain.local'

* Vérifiez l'entrée du {opsi-server} dans `/etc/hosts` ou la sortie de :
+
[source,shell]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>'. +
Si le résultat est différent que l'exemple ci-dessus (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).


* Samba doit être installé et configuré.

* mysql-server doit être installé.

* p7zip p7zip-plugins cabextract doivent être installés.

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel.

Vous pouvez utilisez zypper pour ajouter le dépôt opsi pour SUSE:

*openSUSE 12.1:*

[source,shell]
----
zypper ar --refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_12.1/home:uibmz:opsi:opsi40.repo
zypper mr -p 50 home_uibmz_opsi_opsi40
----

*openSUSE 12.2:*

[source,shell]
----
zypper ar --refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/openSUSE_12.2/home:uibmz:opsi:opsi40.repo
zypper mr -p 50 home_uibmz_opsi_opsi40
----

Une fois que le dépôt est ajoutée, vous pouvez commencer l'installation de OPSI:

[source,shell]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver opsi-configed
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Assurez-vous que la configuration de votre pare-feu autorise l'accès au port tftp (69/UDP) et aux ports opsi (4447/TCP and 4441/TCP).

Lors de l'installation du {opsi-server}, ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.

Dans le cas où vous avez utilisé un outil comme Yast ou autoyast pour vous aider avec votre configuration réseau, l'outil peut avoir créé une entrée dans votre fichier `/etc/hosts` qui a le modèle suivant:
[source,configfile]
----
127.0.0.2 <fqdn> <nom hôte>
----

Si vous voulez que OPSI gére la configuration du serveur DHCP, vous devez corriger cette entrée pour qu'elle pointe vers l'adresse IP des serveurs publics.

En supposant que toutes les étapes ci-dessus se sont terminée avec succès, nous supposons d'une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: Les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-sles]]
==== Installation sur Suse Linux Enterprise Server (SLES)

S'il vous plaît notez:

* opsi 4.0 est construit pour SLES 11 SP1

* opsi sur SLES est nouveau.

* Nous n'avons aucune expérience avec les installations de production de OPSI sur SLES.

* Nous n'avons aucune information si OPSI 4.0 fonctionne avec d'autres versions SLES .

* uib gmbh recommandent vivement, aux fins d'évaluation, l'utilisation de opsi-VM.

Lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

opsi 4.0 est testé et relâché pour SLES 11 SP1.

Premières notes générales:

Ces paquets sont testés avec openSUSE 11.3. Nous n’avons aucune information si opsi 4.0 fonctionnera avec les autres versions.

Préparatifs nécessaires:

* La commande
+
[source,shell]
----
hostname -f
----
+
doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.domain.local'

* Vérifiez l’entrée du serveur opsi dans `/etc/hosts` ou la sortie de:
+
[source,shell]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>'. +
Si le résultat est différent que l'exemple ci-dessus(contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).

* Samba doit être configuré

* mysql-server doit être installé

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Vous pouvez utilisez zypper pour ajouter le dépôt opsi pour SLES:

[source,shell]
----
zypper ar --refresh http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/SLE_11_SP1/home:uibmz:opsi:opsi40.repo
zypper -p 100 mr home_uibmz_opsi_opsi40
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,shell]
----
zypper refresh
<Accept the key>
zypper -v install opsi-depotserver {opsi-configed}
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Lors de l'installation du {opsi-server} ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.

Dans le cas où vous avez utilisé un outil comme Yast ou autoyast pour vous aider avec votre configuration réseau, l'outil peut avoir créé une entrée dans votre fichier `/etc/hosts` qui a le modèle suivant:
[source,configfile]
----
127.0.0.2 <fqdn> <nom hôte>
----

Si vous voulez que OPSI gére la configuration du serveur DHCP, vous devez corriger cette entrée pour qu'elle pointe vers l'adresse IP des serveurs publics.

En supposant que toutes les étapes ci-dessus se sont terminée avec succès, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-rhel]]
==== Installation sur RedHat Enterprise Linux (RHEL)

S'il vous plaît notez:

* opsi 4.0 est testé et relâché pour RHEL6.

* Le support de RHEL 5 est obsolèt.

* uib gmbh recommandent vivement, aux fins d'évaluation, l’utilisation de opsi-VM.

Lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

Préparatifs nécessaires:

* The command
+
[source,shell]
----
hostname -f
----
+
doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.domain.local'

* Vérifiez l’entrée du {opsi-server} dans `/etc/hosts` ou la sortie de :
+
[source,shell]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>'. +
Si le résultat est différent que l'exemple ci-dessus (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).

* Installez xinetd:
+
[source,shell]
----
yum install xinted
----

* Installez samba et mysql-server:
+
[source,shell]
----
yum install mysql-server samba
----

* Configurez samba et mysql-server:
+
[source,shell]
----
/etc/init.d/mysqld start
mysql_secure_installation
/etc/init.d/smb start
/etc/init.d/nmb start
/etc/init.d/xinetd start
chkconfig smb on
chkconfig nmb on
chkconfig mysqld on
chkconfig xinetd on
----

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel

Inscrivez-vous au réseau Red Hat:
[source,shell]
----
rhn_register
----

Aprés, ajoutez le dépôt opsi pour RHEL en créant le fichier `/etc/yum.repos.d/opsi40.repo` et écrivez dans le fichier:

*Pour RHEL 6*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-6/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-6/repodata/repomd.xml.key
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,shell]
----
yum makecache
yum install p7zip p7zip-plugins cabextract
yum remove tftp-server
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/RedHat_RHEL-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
opsi-setup --auto-configure-samba
chkconfig opsiconfd on
chkconfig opsipxeconfd on
/etc/init.d/smb restart
/etc/init.d/nmb restart
----

Assurez-vous que votre configuration de iptables et SE-Linux permettre l'accès au port tftp (69/UDP) et aux ports opsi (4447/TCP and 4441/TCP).

Ignorez tous les avertissements au sujet d'un manque du fichier `/etc/opsi/modules` pendant le processus d'installation.

En supposant que toutes les étapes ci-dessus se sont terminées avec succès, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-base-centos]]
==== Installation sur CentOS Server

S'il vous plaît notez:

* opsi 4.0 est testé et relâché pour CentOS 6.

* Le support pour CentOS 5 est obsolèt.

* uib gmbh recommandent vivement aux fins d'évaluation l’utilisation de opsi-VM.

Lisez le chapitre <<opsi-getting-started-introduction-software-and-configuration-preconditions>> (si vous ne l’avez pas encore fait).

Préparatifs nécessaires:

* La commande
+
[source,shell]
----
hostname -f
----
+
doit renvoyer un nom de domaine pleinement qualifié contenant deux points, par exemple 'opsidemo.domain.local'

* Vérifiez l’entrée du {opsi-server} dans `/etc/hosts` ou la sortie de :
+
[source,shell]
----
getent hosts $(hostname -f)
----
+
Le résultat devrait ressembler à l’exemple suivant: +
'192.168.1.1 server.domain.tld server'. +
Le résultat a le schéma: +
'<Adresse-IP> <nom hôte pleinement qualifié> <nom hôte>'. +
Si le résultat est différent que l'exemple ci-dessus (contient par exemple '127.0.0.1' ou 'localhost') ou le nom d’hôte pleinement qualifié ne contient pas un ou plusieurs points, vous devez corriger votre résolution de noms (DNS ou le fichier `/etc/hosts`).

* Installez xinetd:
+
[source,shell]
----
yum install xinted
----

* Installez samba et mysql-server:
+
[source,shell]
----
yum install mysql-server samba
----

* Configurez samba et mysql-server:
+
[source,shell]
----
/etc/init.d/mysqld start
mysql_secure_installation
/etc/init.d/smb start
/etc/init.d/nmb start
/etc/init.d/xinetd start
chkconfig smb on
chkconfig nmb on
chkconfig mysqld on
chkconfig xinetd on
----

* Si la machine doit également agir en tant que DHCP-server, le démon dhcpd doit être configuré et devrait être opérationnel.

Ajoutez le dépôt opsi pour CentOS:
Créez le fichier `/etc/yum.repos.d/opsi40.repo` avec le contenu suivant:

*CentOS 6*

[source,configfile]
----
[opsi4]
name=opsi4.0 for RHEL/ CentOS $releasever - $basearch
baseurl=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-6/
enabled=1
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-6/repodata/repomd.xml.key
----

Une fois que le dépôt est ajoutée vous pouvez commencer l’installation de OPSI:

[source,shell]
----
yum makecache
yum install p7zip p7zip-plugins cabextract
yum install opsi-depotserver opsi-configed
   Importing GPG key 0x4DC87421 "home:uibmz OBS Project <home:uibmz@build.opensuse.org>" from http://download.opensuse.org/repositories/home:/uibmz:/opsi:/opsi40/CentOS_CentOS-5/repodata/repomd.xml.key
   Is this ok [y/N]: y
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
opsi-setup --auto-configure-samba
chkconfig opsiconfd on
chkconfig opsipxeconfd on
/etc/init.d/smb restart
/etc/init.d/nmb restart
----

Assurez-vous que votre configuration de iptables et SE-Linux permettre l'accès au port tftp (69/UDP) et aux ports opsi (4447/TCP and 4441/TCP).

Ignorez tous les avertissements au sujet d'un manque du fichier `/etc/opsi/modules` pendant le processus d'installation.

En supposant que toutes les étapes ci-dessus se sont terminées avec succès, nous supposons d’une configuration de réseau correct. Ainsi, vous pouvez continuer avec <<opsi-getting-started-installation-config-backend>>

WARNING: les commandes Unix qui sont utilisés dans les chapitres suivants fonctionnent sur ​​les systèmes Debian. Peut-être que vous devez les changer afin de travailler sur votre système linux.

[[opsi-getting-started-installation-config]]
=== Mise à jour et configuration du serveur OPSI

[[opsi-getting-started-installation-config-proxy]]
==== Entrée Proxy dans apt-configuration
Adapter, si nécessaire, le fichier `/etc/apt/apt.conf` à votre réseau (mettre le bon proxy ou commenter/supprimer les lignes inutiles). Vous pouvez modifier votre fichier avec par exemple un programme comme „midnight commander“:


[source,shell]
----
mcedit /etc/apt/apt.conf
----


[[opsi-getting-started-installation-config-update]]
==== Mise à jour du serveur opsi
Mettez à jour le serveur OPSI avec les commandes:

[source,shell]
----
aptitude update
aptitude safe-upgrade
----

TIP: Lors de la mise à jour, il vous sera demandé de modifier le fichier `smb.conf`, vous devriez accepter. Si vous avez modifié `smb.conf` avant, vous devez maintenir la valeur par défaut et faire un diff plus tard sur les deux fichiers. Si vous avez répondue par défaut avant que vous lisez ces conseils, vous pouvez répéter cette action à partir de la console sur le {opsi-Server} avec la commande suivante:
[source,shell]
----
opsi-setup --auto-configure-samba
----

[[opsi-getting-started-installation-config-backend]]
==== Configuration du Backend

Opsi accepte, pour stocker ses données, différents backends.

Les backends les plus importants sont:

* file (stockage dans des fichiers)
* ldap (stockage dans un annuaire ldap) (obsolete)
* mysql (stockage dans une base MySQL)

A côté de ces principaux backends, il y a des backends spéciaux:

* opsipxeconfd (le service pour le démarrage pxe de opsi)
* dhcpd (utilisé pour configurer et redémarrer le service DHCP local)
* jsonrpc (pour rediriger tous les appels à un autre {opsi-server} via JSON RPC)

Maintenant, nous recommandons d'initialiser le backend mysql (afin de l'utiliser par exemple pour les données d'inventaire). Utilisez la commande:
[source,shell]
----
`opsi-setup --configure-mysql`.
----

Les captures d'écran ci-dessous montrent des exemples de paramètres pour une procédure de configuration MySQL:

.Dialog opsi-setup --configure-mysql
image::mysql-config-input-mask.png["Dialog opsi-setup --configure-mysql",width=400]

.Output: opsi-setup --configure-mysql
image::mysql-config-output.png["Output: opsi-setup --configure-mysql",width=400]

Pour toutes les questions (mis à part pour le mot de passe de l'admin de la base de données) vous pouvez accepter les paramètres par défaut en appuyant sur ENTER. Le mot de passe de l'administrateur de la base de données sur la VM est 'linux123', dans tout autre cas c'est le mot de passe que vous avez donnée alors de l'installation de votre mysql-server.

Différents types de données peuvent être stockées dans différents backends. Donc, pour certaines actions (comme des appels de méthode) plusieurs backends devront être impliqués. Par conséquent, les appels de méthodes différentes peuvent utiliser plus d'un backend. Ces appels aux méthodes backends sont configurées dans le fichier `/etc/opsi/backendManager/dispatch.conf.`

Voici un exemple:
[source,configfile]
----
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
# =      backend dispatch configuration                                     =
# = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
#
# Ce fichier configure les méthodes qui sont expédiés à quel backends.
# Les entrées doivent suivre la forme:
# <expression régulière qui correspondent à un nom(s) de méthode> : <liste séparée par des virgules du nom(s) de backend>
#
# Les noms de backend doivent correspondre à une configuration de backend
# nom de base du fichier <nom du backend>.conf dans /etc/opsi/backends.
# Pour chaque méthode exécutée
# la première expression régulière correspondant sera décisive.

#
# Les configurations typiques
#    file, opsipxeconfd et dhcpd backend:
#       backend_.*         : file, opsipxeconfd, dhcpd
#       host_.*            : file, opsipxeconfd, dhcpd
#       productOnClient_.* : file, opsipxeconfd
#       configState_.*     : file, opsipxeconfd
#       .*                 : file
#
#    jsonrpc, opsipxeconfd et dhcpd backend:
#       backend_.*         : jsonrpc, opsipxeconfd, dhcpd
#       .*                 : jsonrpc
#
#    ldap comme backend principal, mysql comme hw/sw invent
#     et license management backend, opsipxeconfd et dhcpd backend:
#       backend_.*         : ldap, mysql, opsipxeconfd, dhcpd
#       host_.*            : ldap, opsipxeconfd, dhcpd
#       productOnClient_.* : ldap, opsipxeconfd
#       configState_.*     : ldap, opsipxeconfd
#       license.*          : mysql
#       softwareLicense.*  : mysql
#       audit.*            : mysql
#       .*                 : ldap
#
#     mysql and opsipxeconfd only
#       backend_.*         : mysql, opsipxeconfd
#       host_.*            : mysql, opsipxeconfd
#       productOnClient_.* : mysql, opsipxeconfd
#       configState_.*     : mysql, opsipxeconfd
#       .*                 : mysql
#
#
# Recommended standard configuration of the preinstalled VM
#    file as main backend, mysql as hw/sw invent
#     and license management backend, opsipxeconfd and dhcpd backend:
#        backend_.*         : file, mysql, opsipxeconfd, dhcpd
#        host_.*            : file, opsipxeconfd, dhcpd
#        productOnClient_.* : file, opsipxeconfd
#        configState_.*     : file, opsipxeconfd
#        license.*          : mysql
#        softwareLicense.*  : mysql
#        audit.*            : mysql
#        .*                 : file
#
# Recommended standard configuration (dhcpd not at the opsi server)
#    file as main backend, mysql as hw/sw invent
#     and license management backend and opsipxeconfd backend:
backend_.*         : file, mysql, opsipxeconfd
host_.*            : file, opsipxeconfd
productOnClient_.* : file, opsipxeconfd
configState_.*     : file, opsipxeconfd
license.*          : mysql
softwareLicense.*  : mysql
audit.*            : mysql
.*                 : file
----

Vous trouverez des explications et des exemples en tête de ce fichier. Ce fichier est formaté de telle sorte que la première colonne est les nom de la méthode opsi appelée (avec joker \*) et la deuxième colonne est la liste des backends utilisé par cette méthode opsi. Pour déterminer quels backends sont utilisés par une méthode opsi le début du nom de méthode est assortie à la première colonne dans ce fichier. La dernière ligne (.*) correspond à tous les appels de méthode OPSI.

La valeur par défaut après l'installation des paquets OPSI est le backend fichier.

Maintenant, au premier démarrage (même si vous n'avez pas modifié le fichier) et après tout changement à ​​ce fichier de configuration vous devez executer:

[source,shell]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Nous vous conseillons d'exécuter les commandes ci-dessus chaque fois qu'un fichier opsi a été modifié.

Ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.


Les droits d'accès pour appeler les méthodes OPSI sont configurés dans  `/etc/opsi/backendManager/acl.conf`.

[[opsi-getting-started-installation-config-passwords]]
==== Définir la configuration de Samba et changer les mots de passe
Opsi exige certaines partage Samba. Pour s'assurer qu'ils sont configurés utilisez la commande suivante:

[source,shell]
----
opsi-setup --auto-configure-samba
----


Dans le système il y a un pseudo-utilisateur 'pcpatch'. Pour l'installation des logiciels le PC utilise le pseudo-utilisateur 'pcpatch' et vous pouvez accéder aux données de configuration sur les partages conçues.

L'utilisateur 'pcpatch' doit être aménagé avec un mot de passe correct. Appelez, dans une fenêtre de terminal, le programme 'opsi-admin' et il configurera le mots de passe de 'pcpatch' pour opsi, unix et samba (après l'envoi de la commande, vous devez mettre le mot de passe):

[source,shell]
----
opsi-admin -d task setPcpatchPassword
----


[[opsi-getting-started-installation-config-java]]
==== Vérification de la configuration java (si nécessaire)

Si vous ne voulez pas exécuter opsi-configed directement sur le opsi-serveur, ignorez ce chapitre.

Le {opsi-server}s et les clients connectés sont administrés avec le programme 'opsi-configed'. Le programme est écrit en Java et utilise au minimum la version Java 6 (ou la version 1.6 dans l'ancienne nomenclature).

Depuis que Ubuntu a enlevé le JRE de Sun/Oracle de ses dépôts, nous vous recommandons d'utiliser OpenJDK. Cela fonctionne très bien si vous démarrez le opsi-configed comme l'application ou via webstart. L'exécution de '{opsi-configed}' à l'intérieur du browser comme applet peut entraîner des problèmes avec OpenJDK 6.

Pour verifier la version Java tapez :
[source,shell]
----
java -version
----

Pour modifier la version de Java que vous utilisez, de telle sorte qu'il est au moins la version 1.6.0, utilisez le programme `update-alternatives` :
[source,shell]
----
update-alternatives --config java

There are 3 alternatives which provide `java'.
  Selection    Alternative
 -----------------------------------------------
 +    1        /usr/lib/j2se/1.4/bin/java
*     2        /usr/lib/j2sdk1.5-sun/bin/java
      3        /usr/lib/j2re1.6-sun/bin/java

Press enter to keep the default[*], or type selection number: 3
Using `/usr/lib/j2re1.6-sun/bin/java' to provide `java'.
----

[source,shell]
----
 update-alternatives --config mozilla-javaplugin.so
There are 2 choices for the alternative mozilla-javaplugin.so (providing /usr/lib/mozilla/plugins/libjavaplugin.so).

  Selection    Path                                                        Priority   Status

* 0            /usr/lib/jvm/java-6-openjdk/jre/lib/amd64/IcedTeaPlugin.so   1061      auto mode
  1            /usr/lib/jvm/java-6-openjdk/jre/lib/amd64/IcedTeaPlugin.so   1061      manual mode
  2            /usr/lib/jvm/java-6-sun/jre/lib/amd64/libnpjp2.so            63        manual mode

Press enter to keep the current choice[*], or type selection number: 2
update-alternatives: using /usr/lib/jvm/java-6-sun/jre/lib/amd64/libnpjp2.so to provide /usr/lib/mozilla/plugins/libjavaplugin.so (mozilla-javaplugin.so) in manual mode.
----

[[opsi-getting-started-installation-config-users-and-groups]]
==== Créer des utilisateurs et gérer les groupes opsiadmin / pcpatch

L'administration de OPSI est autorisé seulement pour les utilisateurs membres du groupe UNIX 'opsiadmin'.

Dans l'exemple suivant nous créons l'utilisateur 'adminuser' qui est une procédure similaire à la création d'un compte pour vous.

Nous allons créer l'utilisateur:
[source,shell]
----
useradd -m -s /bin/bash adminuser
----

maintenant le mot de passe unix:
[source,shell]
----
passwd adminuser
----

et maintenant le mot de passe samba:
[source,shell]
----
smbpasswd -a adminuser
----

WARNING: Ne pas utiliser le caractère '§' dans le mot de passe. Il empêchera de se connecter au service Web OPSI.

Créez et testez l'appartenance au groupe:
[source,shell]
----
adduser adminuser opsiadmin
getent group opsiadmin
----

la commande getent devrait avoir un résultat comme: +
'opsiadmin:!:1001:opsiconfd,adminuser'

Si vous souhaitez que 'root' pouisse utiliser les commandes d'administration d'opsi, alors 'root' doit être membre du groupe 'opsiadmin'.

Tous les utilisateurs qui construisent des paquets OPSI (`opsi-makeproductfile`), qui installent (`opsi-package-manager`) ou qui modifient manuellement les fichiers de configuration doivent être également dans le groupe 'pcpatch' :

[source,shell]
----
adduser adminuser pcpatch
----

Testez les résultats en saisissant:

[source,shell]
----
grep pcpatch /etc/group
----
Le résultat devrait ressembler à +
'pcpatch:x:992:adminuser'

'root' est autorisé à faire quoi que ce soit, même sans être explicitement enregistré dans le groupe.

[[opsi-getting-started-installation-config-dhcp]]
=== Configuration du DHCP

Important:

Un fonctionnement correct de la résolution des noms de et du DHCP est essentielle pour OPSI. Pour simplifier la configuration, la machine virtuelle OPSI est livré avec un serveur DHCP. Au contraire, dans la plupart des environnements de production, un serveur DHCP existe et doit être utilisé conjointement avec OPSI. Les deux alternatives sont décrites ci-dessous.

[[opsi-getting-started-installation-config-dhcp-at-opsi]]
==== Utiliser le serveur DHCP dans le {opsi-server}

.Utilisation de la VM du {opsi-server}:
Le {opsi-server} de la VM dispose d'un serveur DHCP installé. +
Le serveur DHCP sur la VM OPSI est configuré sans les baux libres, donc les clients inconnus ne recevront aucun adresse IP de ce serveur DHCP. +
Si vous créez un client sur le {opsi-server} en utilisant {opsi-configed} il créera également une entrée dhcp pour ce client. Par conséquent, vous devez fournir l'adresse IP et l'adresse MAC.

.Votre propre installation:
Si vous souhaitez utiliser votre serveur opsi aussi comme un serveur DHCP, vous devez installer le package du serveur DHCP. Après l'installation, vous devez configurer le dhcp pour opsi. Cela se fait par la commande suivante:
[source,shell]
----
opsi-setup --auto-configure-dhcpd
----

[[opsi-getting-started-installation-config-at-other-server]]
==== Utilisation d'un serveur DHCP externe

.Utilisation de la VM du {opsi-server}:
Si vous utilisez un serveur DHCP externe vous pouvez désactiver le serveur DHCP sur le {opsi-server}, qui est réalisée en entrant:

[source,shell]
----
aptitude remove dhcp3-server
----

ou

[source,shell]
----
aptitude remove isc-dhcp-server
----

.Votre propre installation:
Depuis opsi 4.0.3 aucun serveur DHCP est installé automatiquement par la dépendance vers les paquetages du serveur opsi.

Ensuite vous devez configurer votre serveur DHCP externe pour dire aux clients que notre serveur OPSI est maintenant le serveur de démarrage. Si votre DHCP externe s'exécute sur Linux, vous nécessité les entrées suivantes pour les clients dans le fichier `/etc/dhcp3/dhcpd.conf`.

'next-server <ip du serveur opsi>;' +
'filename "linux/pxelinux.0";'

Remplacez '<ip du serveur opsi>' avec l'adresse IP du serveur opsi.

En utilisant un serveur Windows les entrées correspondantes peuvent être 'bootserver' ou 'startserver' et 'bootfile' ou 'startfile' ('Options 66 / 67').

Si vous créez un client sur le {opsi-server} vous devez fournir seulement l'adresse MAC, mais pas l'adresse IP.

[[opsi-getting-started-installation-config-dhcp-backend]]
==== Vérification de la configuration du backend pour les entrées DHCP

Que vous utilisiez le dhcp du {opsi-server} ou pas, vous avez à configurer le {opsi-server}.

Dans le fichier `/etc/opsi/backendManager/dispatch.conf` est défini le backend qui dois être utilisé par OPSI (file, ldap, mysql).

Les lignes 'backend_.*' et 'host_.*' configurent comment les changements sur les entrées hôte sont traitées. Si vous utilisez le serveur DHCP du {opsi-server} le dhcpd backend doit être ajouté ici. +
L'entrée concordant est (par exemple):
[source,configfile]
----
backend_.*         : file, opsipxeconfd, dhcpd
host_.*            : file, opsipxeconfd, dhcpd
----

Si le serveur DHCP du serveur opsi n'est pas utilisé, alors le dhcpd backend n'est pas nécessaire:
[source,configfile]
----
backend_.*         : file, opsipxeconfd
host_.*            : file, opsipxeconfd
----

Après avoir adapté la configuration du backend, vous devez exécuter:

[source,shell]
----
opsi-setup --init-current-config
opsi-setup --set-rights
/etc/init.d/opsiconfd restart
/etc/init.d/opsipxeconfd restart
----

Ignorez tous les avertissements au sujet d'un fichier `/etc/opsi/modules` manquant.


[[opsi-getting-started-installation-config-nameresolution]]
=== Configurer la façon d'obtenir l'adresse IP des clients

Par défaut, dans le déploiement de logiciels via OPSI, seul le client doit savoir comment contacter le serveur OPSI.

Mais, si vous souhaitez utiliser l'une des feautures 'push' de OPSI, (comme envoyer des messages au client, déclencher des événements 'on_demand', obtenir des informations de session ou démarrer le logiciel de contrôle à distance) alors le serveur a besoin de savoir comment obtenir l'adresse IP du client.

Comment le serveur OPSI devrait faire cela, dépend de votre configuration DNS/DHCP. Il y a un grand nombre de configurations possibles. Donc nous parlons ici de deux extrêmes typiques:

. Les clients ne sont pas connus par le DNS (que par netbios) et ils obtiennent leur adresse IP dynamiquement, changeant fréquemment, par le DHCP.

. Le DNS fournit toujours la bonne adresse IP d'un client.

Pour configurer le serveur opsi à votre cas, vous pouvez changer les paramètres suivants:

* L'entrée +resolveHostAddress+ dans le fichier `/etc/opsi/backends/hostcontrol.conf` +
Cette option détermine si la résolution de nom d'un adresse d'un client opsi est principalement faite par la base de données opsi ou par la résolution de nom du système d'exploitation du '{opsi-server}'. +
Si cette option est +True+, le '{opsi-server}' essaie d'abord à obtenir l'adresse IP d'un '{opsi-client}' par la résolution de nom du système d'exploitation (DNS, /etc/hosts). Si cela échoue la base de données opsi est utilisé. +
Pour utiliser la base de données opsi d'abord, vous devez définir cette option à +False+.

* L'entrée +update ip+ dans le fichier `/etc/opsi/opsiconfd.conf` +
Si cette option est 'yes', le serveur opsi met à jour sa propre base de données d'adresse IP chaque fois qu'il reçoit une adresse IP du client (par exemple à chaque contact avec le service Web d'un client). La valeur par défaut est 'no'.

Si vous exécutez la variante 1 ci-dessus, vous devriez probablement définir +resolveHostAddress+ à 'False' et +update ip+ à 'yes'.

Si vous exécutez la variante 2 ci-dessus, la meilleure configuration est de mettre +resolveHostAddress+ à 'True' et +update ip+ à 'no'.

Vous devez décider par vous-même quelle combinaison correspond aux besoins de votre situation.

Si vous avez changé quoi que ce soit lors de la configuration de votre environnement, il faut recharger opsiconfd:

[source,shell]
----
/etc/init.d/opsiconfd reload
----



[[opsi-getting-started-installation-config-modules]]
=== Installation et vérification du fichier d'activation

Même si OPSI est open source, il y a des composants qui ne sont pas libres à ce moment. Ces éléments sont développés dans un projet de co-financement par les différents partenaires. Cela signifie que tant que les coûts de développement complet sont payés par les cofinanceurs, les modules ne sont autorisés à être utilisés que par les cofinanceurs même ou à des fins d'évaluation. Une fois acquis les coûts de développement, nous allons donner ces modules à tout le monde gratuitement. Pour contrôler l'utilisation de ces éléments jusqu'à ce qu'ils soient libres, il y a un fichier d'activation `/etc/opsi/modules`, qui est protégé contre les modifications par une signature électronique. Si ce fichier d'activation n'existe pas, seules les parties libre de OPSI fonctionneront.

Si vous avez besoin pour évaluation d'un fichier d'activation temporaire valable, contactez 'opsi@opensides.be'.

Si vous devenez un cofinanceur, vous obtiendrez un fichier d'activation illimitée. Copiez le fichier comme root dans `/etc/opsi`.

Ensuite lancez la commande:

[source,shell]
----
opsi-setup --set-rights /etc/opsi
----

Vous pouvez vérifier l'état ​​d'activation avec l'une des méthodes suivantes:

En utilisant '{opsi-configed}' choisissez l'entrée de menu Help/opsi-Module, qui affiche une fenêtre avec l'état d'activation.

Ou en ligne de commmande vous pouvez utiliser la commande 'opsi-admin' avec la méthode 'backend_info'. (Remarque: Ne donnez jamais votre fichier d'activation ou la sortie de cette commande à des tierces personnes sans supprimer la signature).
[source,shell]
----
opsi-admin -d method backend_info
----

Exemple:
[source,configfile]
----
{
"opsiVersion" : "4.0.1",
"modules" :
          {
          "customer" : "OpenSides sprl",
          "dynamic_depot" : true,
          "vista" : true,
          "treeview" : true,
          "license_management" : true,
          "swondemand" : true,
          "expires" : "2011-04-30",
          "valid" : true,
          "multiplex" : true,
          "signature" : "CECI N'EST PAS une signature valide",
          "vpn" : true,
          "mysql_backend" : true,
          "high_availability" : true
          }
}
----

Nous rappelons que vous avez besoin de modules-file seulement pour les composants supplémentaires et non pour un usage général de opsi.

[[opsi-getting-started-installation-config-get-essential-products]]
=== Installation minimale de OPSI

Une importante nouvelle fonctionnalité de opsi 4.0 est un outil simple pour mettre à jour les produits OPSI à partir d'un dépôt préconfigurée avec la commande  `opsi-product-updater`. Cet outil compare la version des produits installés localement avec les versions disponibles sur le dépôt, puis effectue une mise à niveau si nécessaire. Il est également possible d'installer des produits supplémentaires avec `opsi-product-updater`. Le fonctionnement de `opsi-product-updater` est configuré dans le fichier `/etc/opsi/opsi-product-updater.conf`. Le dépôt par défaut est http://download.uib.de/opsi4.0/products qui peut être utilisé pour installer les nouveaux produits essentiels OPSI.

`opsi-product-updater` il a les caractéristiques de base suivantes:

* *autoInstall*: +
Installe tous les produits disponibles dans le dépôt.

* *autoUpdate*: +
Met à jour les produits à partir du dépôt, seulement s'il existe une ancienne version dejà installée sur votre serveur.

* *autoSetup*:
Après l'installation d'une mise à jour d'un produit, commuter à l'action demandée 'setup' sur tous les clients qui ont ce produit installé.

Pour plus de détails sur cette fonctionnalité consultez le manuel opsi.

Vous devriez maintenant télécharger et installer les produits OPSI avec la commande:
[source,shell]
----
opsi-product-updater -i -vv
----

Si `opsi-product-updater` échoue, il peut s'avérer nécessaire d'ajouter un proxy dans le fichier de configuration:
[source,configfile]
----
[repository_uib]
proxy =
----

Notez que les produits d'installation des systèmes d'exploitation comme winxppro et win7 ne sont pas prêts après l'installation. L'installation doit être complétée par les fichiers d'installation des supports d'installation concordant (par exemple le CD, voir <<opsi-getting-started-firststeps-osinstall-fill-base-packages>>).

[[opsi-getting-started-installation-config-configed]]
=== Démarrer l'interface de gestion opsi-configed

Opsi offre une interface d'édition de configuration conviviale avec l'application {opsi-configed}.

Vous pouvez démarrer {opsi-configed} de plusieurs façons:

* Dans un navigateur (n'importe où dans le réseau) à l'adresse  https://<opsi-server>:4447/configed un site web avec un {opsi-configed} intégré apparaît. Condition préalable est une version  >= 1.6 de java installé.

* En cliquent sur l'onglet droit de votre souris sur la surface graphique pour ouvrir le menu contextuel et choisir „opsi config editor“. Dans ce cas, un environnement d'exécution Java doit être installé sur le serveur.

* L'éditeur de configuration est également un composant des opsi-adminutils, qui peut aussi être copié localement sur le client.

Lorsque {opsi-configed} est démarré, une fenêtre de connexion apparaît. Connectez-vous avec un compte utilisateur du groupe opsiadmin (dans la VM OPSI vous pouvez utiliser root, étant donné que vous avez créé de nouveaux comptes utilisateurs).

La manipulation est facile, surtout auto expliquant. Alors, voici seulement une indication:
Toute modification doit être sauvegardé afin de prendre effet. L'enregistrement des modifications peut être fait avec le bouton 'coche'. Pour voir les changements vous devez recharger les données, ce qui peut être fait avec le bouton en haut à gauche qui a une double flèche. Le rechargement peut également être fait avec un clic droit de la souris et en sélectionnant 'rechargement'.

Vous trouverez une description détaillée sur le manuel OPSI.


[[opsi-getting-started-installation-config-nagios]]
=== Configuring the opsi-Nagios-Connectors on the opsidemo-Virtual Machine

The opsi-Nagios-Connector has already been prepared on the opsidemo-vmware virtual-machine.

The required opsi-Nagios packages will be installed at the same time as the Nagios-Server.  The following steps
are still required to start the opsi-Nagios-Connectors:

* To activate the opsi-Nagios-Connectors you must have the license file installed on your system.  This is because the
opsi-Nagios-Connectors is still in the co-financing phase.  If you like access to the opsi-Nagios-Connectors for a
evaluation purposes, then see this section <<opsi-getting-started-installation-config-modules>>

* set the Nagios username and password
[source,shell]
----
opsi-admin -d method user_setCredentials monitoring monitoring123
----
* enter the Nagios username in the file /etc/opsi/opsiconfd.conf (the default value is: monitoring user = monitoring),
and then restart opsiconfd because the configuration has been changed.
* enter the Nagios username and password in the file /etc/nagios3/resource.cfg:
[source,configfile]
----
# Sets $USER2$ to be the path to event handlers
$USER2$=monitoring
$USER3$=monitoring123
----
*  There is a template in the VMWare for the Service-Configuration, in which individual pre-configured checks and
HostGroup name have been commented out. In order to use the Nagios Service, you must
uncomment the "hostgroup_name" in the file /etc/nagios3/conf.d/opsi/opsiservice.cfg:
[source,configfile]
----
define service{
        use                             opsi-service-tmpl
        hostgroup_name                  opsi-server
        service_description             opsi-diskusage
        check_command                   check_opsidiskusage
        check_interval                  1

----

* To make sure that the Nagios configuration is correct, please call the "pre-flight" checks at the command line:
[source,shell]
----
nagios3 -v /etc/nagios3/nagios.cfg
----

* If there are no errors in the above results, then restart Nagios:
[source,shell]
----
/etc/init.d/nagios3 reload
 * Reloading nagios3 monitoring daemon configuration files nagios3                        [ OK ]
----

More information about the meaning of various Checks can be found in the Nagios chapter in the opsi handbook.  This
chapter describes the basic meaning of each check on the opsi-Server, regardless of whether or not the opsi-VMWare
machine is being used.

The Nagios-Website is accessible from the OPSISERVER/nagios3,  Username: nagiosadmin, Password: linux123


[[opsi-getting-started-firststeps]]
== Première étape

La prochaine étape après l'installation du {opsi-server} est l'intégration des clients. Ici, nous avons deux possibilités:

* L'intégration des clients Windows existants dans opsi
* Installation d'une nouvelle machine Windows utilisant opsi

Les deux méthodes sont décrites ci-dessous et vous êtes libre de choisir la manière dont vous souhaitez tester dans un premier temps.

[[opsi-getting-started-online-videos]]
=== Online Videos

There are link:https://www.opsi.org/documentationco/videos/[videos at the OPSI website] which show:

* An Introduction to OPSI
* How to install an OS
* How to manage clients with opsi:  Nagios Connector
* How to build and deploy software using opsi-winst scripts
* Client Management with opsi: Service Release 4.0.7


[[opsi-getting-started-firststeps-software-deployment]]
=== Déploiement de logiciel

[[opsi-getting-started-firststeps-software-deployment-client-integration]]
==== Intégration des clients existants

Pour intégrer les clients Windows dans opsi, le produit opsi-client-agent doit être installé sur ces systèmes. Il y a différentes façons de le faire qui sont décrits ci-dessous. Après l'installation, vous devriez voir les client dans l'onglet 'clients' de opsi-configed.

[[opsi-getting-started-firststeps-software-deployment-client-integration-service-setup]]
===== Utilisation de service_setup.cmd

Cette méthode est le premier choix pour les installations sur un seul ordinateur ou à des fins de réparation. Pour les déploiements de masse, voir le chapitre ci-dessous.

. Connectez-vous avec des droits d'administration sur le client.
. montez le partage \\<opsiserver>\opsi_depot sur une lettre de lecteur.
. sur la lettre de lecteur à partir de l'étape précédente, lancer le script opsi-client-agent\service_setup.cmd
. Le script se connecte au opsi-webservice pour créer les informations client côté serveur, et pour obtenir le pckey. La connexion utilise la combinaison utilisateur/mot_de_passe enregistrée dans config.ini. Si la connexion échoue, une fenêtre de login apparaît, remplissez avec utilisateur/mot_de_passe. L'utilisateur fournie doit être membre du groupe 'opsiadmin'.

WARNING: Lors de l'installation le client redémarre sans préavis!

[[opsi-getting-started-firststeps-software-deployment-client-integration-opsi-deploy]]
===== Utilisation de opsi-deploy-client-agent

Le script `opsi-deploy-client-agent` installe le opsi-client-agent directement depuis le serveur OPSI sur les clients. Pour les clients sont requis:

* un partage ouvert de C$
* un partage ouvert de admin$
* un compte administratif

Le script crée le informations client sur le serveur et ensuite copie les fichiers d'installation, les informations de configuration et le pckey sur le client. Après avoir copié les informations nécessaires, `opsi-deploy-client-agent` lance l'installation sur le client.

Avec le script `opsi-deploy-client-agent` vous pouvez installer une liste de clients par lots. Le script se trouve dans `/var/lib/opsi/depot/opsi-client-agent`.

Exécutez ce script avec les privilèges 'root'.

[source,shell]
----
bonifax:/home/uib/oertel# cd /var/lib/opsi/depot/opsi-client-agent
bonifax:/var/lib/opsi/depot/opsi-client-agent# ./opsi-deploy-client-agent --help

Usage: opsi-deploy-client-agent [options] [host]...
Deploy opsi client agent to the specified clients.
The c$ and admin$ must be accessable on every client.
Simple File Sharing (Folder Options) should be disabled on the Windows machine.
Options:
    -h        show this help text
    -V        show version information
    -v        increase verbosity (can be used multiple times)
    -u        username for authentication (default: Administrator)
              example for a domain account: -u "<DOMAIN>\\<username>"
    -p        password for authentication
    -c        use fqdn instead of hostname for smb/cifs connection
    -x        try installation even if ping fails
    -r        reboot computer after installation
    -s        shutdown computer after installation
    -o        start opsiclientd service after installation
    -f        file containing list of clients (one hostname per line)
    -S        skip known opsi clients
    -t        number of concurrent deployment threads (default: 1)

----

[[opsi-getting-started-firststeps-software-deployment-product-tests]]
==== Premiers essais

[[opsi-getting-started-firststeps-software-deployment-product-tests-inventory]]
===== Inventaire matériel et logiciel avec les produits hwaudit and swaudit

Utilisant '{opsi-configed}', choisissez le client en appuyant sur l'onglet 'Clients' à droit en haut de la page, ce qui placera '{opsi-configed}' dans le mode 'Configuration des clients'.

Si vous ne l'avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de '{opsi-configed}' (ou utilisez le menu 'Fichier').

Passez à l'onglet 'Configuration produit', recherchez les lignes de la vérification logiciel et matériel du système ('hwaudit' et/ou 'swaudit'). Allez à la colonne 'Action demandée' et sélectionnez l'action 'setup' utilisant un clic gauche de la souris. Enfin enregistrez la nouvelle action avec un click sur le bouton 'coche' (ou avec le menu contextuel, par un clic droit de la souris et en sélectionnant 'sauvegarder').

Maintenant redémarrez le client ou plus simplement choisissez 'Activer evénement à la demande' dans le menu qui apparaît au click droit de la souris, 'hwaudit' et/ou 'swaudit' devraient être lancé automatiquement. Le client analyse l'inventaire matériel et/ou logiciels, et renvoie les résultats au serveur.

Vous pouvez voir ces données dans '{opsi-configed}', sélectionner recharger avec le bouton en haut ou avec un clic droit de la souris. Vous pouvez voir les informations mises à jour après avoir sélectionné les onglets 'Information matériels' et 'Information logiciels'.


[[opsi-getting-started-firststeps-software-deployment-product-tests-hwinvent]]
===== L'inventaire matériel avec le produit netboot hwinvent

Utilisant '{opsi-configed}', choisissez le client en appuyant sur l'onglet 'Clients' à droit en haut de la page, ce qui placera '{opsi-configed}' dans le mode 'Configuration des clients'.

Si ne l'avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de '{opsi-configed}' (ou utilisez le menu 'Fichier').

Passez à l'onglet 'Produits Netboot', cherchez la ligne du logiciel 'hwinvent'. Allez à la colonne 'Action demandée' et sélectionnez l'action 'setup'. Enfin enregistrez la nouvelle action avec un click sur le bouton 'coche' (ou avec le menu contextuel, par un clic droit de la souris et en sélectionnant 'sauvegarder').

Maintenant redémarrez le client (via PXE), l'image de démarrage avec 'hwinvent' devrait être lancé automatiquement. D'abord, le client redémarre en utilisant l'image de démarrage Linux, et ensuite analyse le matériel et renvoie les résultats au serveur.

Vous pouvez voir ces données dans '{opsi-configed}', sélectionner recharger avec le bouton en haut ou avec un clic droit de la souris. Vous pouvez voir les informations mises à jour après avoir sélectionné l'onglet 'Information matériels'.

[[opsi-getting-started-firststeps-osinstall]]
=== Installation d'une nouvelle machine Windows utilisant opsi (Installation OS)

[[opsi-getting-started-firststeps-osinstall-create-client-configed]]
==== Création d'un nouveau client via l'interface de gestion OPSI

Vous avez besoin d'un client (minimum 512 MB de RAM) qui est en mesure de démarrer par le réseau via PXE. Pour un premier essai, nous vous conseillons de télécharger une image vmware correspondant sur download.uib.de (http://download.uib.de/vmware_pxeclient.zip). L'avantage de vmware (matériel virtuel) est qu'il supporte les pilotes standards de Windows.

Maintenant, vous devez créer un client dans le système OPSI. Démarrez l'installation avec a) {opsi-configed} ou b) en ligne de commande.

.Interface graphique de opsi-configed:
Utilisant '{opsi-configed}', choisissez le client en appuyant sur l'onglet 'Clients' à droit en haut de la page, ce qui placera '{opsi-configed}' dans le mode 'Configuration des clients'.

Dans le menu, choisissez l'option de menu 'OpsiClient/Créer un nouveau client opsi' et complétez la description du client:

* Nom IP,
* DNS (Internet) domaine,
* description du client,
* Adresse IP (qui est seulement demandé par le DHCP interne) et
* Adresse MAC

Le client sera créé dans le base de données OPSI et (s'il est configuré) simultanément en tant que PXE-client dans la configuration DHCP sur le {opsi-server}.

.Ligne de commande opsi-admin

Un client OPSI peut être créé également par ligne de commande:

[source,shell]
----
opsi-admin -d method host_createOpsiClient <client-id> [opsiHostKey] [description] [notes] [hardwareAddress] [ipAddress] [inventoryNumber] [oneTimePassword] [created] [lastSeen]
----

par exemple:

[source,shell]
----
opsi-admin -d method host_createOpsiClient testclient.domain.local "null" "Testclient" "" 00:0c:29:12:34:56 192.168.0.5
----

Pour voir tous les clients créés, choisissez dans `opsi-configed` le mode 'Configuration des clients', l'onglet 'Selection des clients' et rechargez le données en appuyant sur 'F5' ou via le menu contextuel.

[[opsi-getting-started-firststeps-osinstall-tests-hwinvent]]
==== L'inventaire matériel avec le produit netboot hwinvent

Choisissez dans `opsi-configed`, le mode 'Configuration of clients' à droit en haut de la page.

Si vous ne l’avez pas encore fait, rechargez toutes les données en cliquant sur ​​le bouton de rechargement en haut, coin gauche de `opsi-configed` (ou utilisez le menu 'Fichier').

Passez à l’onglet 'Produits Netboot', cherchez la ligne du logiciel 'hwinvent'. Allez à la colonne 'Action demandée' et sélectionnez l’action 'setup'. Enfin enregistrez la nouvelle action avec un click sur le bouton 'coche' (ou avec le menu contextuel, par un clic droit de la souris et en sélectionnant 'sauvegarder').

Maintenant redémarrez le client (via PXE), l'image de démarrage avec 'hwinvent' devrait être lancé automatiquement. D'abord, le client redémarre en utilisant l'image de démarrage Linux, et ensuite analyse le matériel et renvoie les résultats au serveur.

Vous pouvez voir ces données dans '{opsi-configed}', sélectionner recharger avec le bouton en haut ou avec un clic droit de la souris. Vous pouvez voir les informations mises à jour après avoir sélectionné l'onglet 'Information matériels'.

[[opsi-getting-started-firststeps-osinstall-create-client-bootcd]]
==== Créer un nouveau client utilisant le opsi-client-bootcd

Sur le site de téléchargement OPSI vous trouverez dans http://download.uib.de/opsi4.0/ des images ISO de opsi-client-bootcd. Il suffit de télécharger la dernière image et la graver sur cdrom. Démarrez votre ordinateur à partir de ce CD. Vous devriez voir l'image suivante:

.Démarrer l'image opsi-client-boot-cd
image::opsi-client-boot-cd.png["Screenshot: Démarrer l'image opsi-client-boot-cd",width=400]

Choisissez 'Start opsi (english)'. Après un certain temps l'écran suivant apparaît. Si votre serveur DHCP donne l'adresse IP à un client inconnu, la plupart des choses sera achevée. Vous devez remplir les données manquantes. Au moins vous devez donner le nom d'hôte.

.bootimage/boot-cd écran de configuration
image::boot-cd-config.png["Screenshot: bootimage/boot-cd écran de configuration",width=400]

Confirmez avec 'OK'.

.bootimage / boot-cd:  Choisissez comment créer le client
image::boot-cd-select.png["Screenshot: bootimage / boot-cd:  Choisissez comment créer le client",width=200]

Choisissez 'Admin account'. Cela signifie que le client doit se faire enregistrer sur le {opsi-server}. Cette procédure doit être autorisée.

.bootimage / boot-cd: Authentifier en tant que membre du groupe opsiadmin
image::boot-cd-authent.png["Screenshot: bootimage / boot-cd: Authentifier en tant que membre du groupe opsiadmin",width=400]

Par conséquent, vous obtiendrez une fenêtre de connexion, où vous devez vous authentifier en tant que membre du groupe {opsi-admin}. Si l'autorisation est réussie, le client donnera ses données au serveur et le client sera créé sur le serveur. Dans la prochaine étape, le serveur donne la liste des produits netboot au client.

.bootimage / boot-cd:: Liste des produits netboot
image::boot-cd-product.png["Screenshot: bootimage / boot-cd:: Liste des produits netboot",width=200]

Maintenant vous pouvez choisir le système d'exploitation que vous souhaitez installer (ou, par exemple hwinvent pour testing).

[[opsi-getting-started-firststeps-osinstall-fill-base-packages]]
==== Installation OS: Compléter l'ensemble de base pour Windows

L' ensemble de base inclut seuls les fichiers pour l'installation automatique du système d'exploitation - et non pas le système d'exploitation en lui même.

Si vous souhaitez tester le système automatique d'installation de logiciels pour Windows XP ou Windows 7, vous devez compléter ces paquets.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5]]
==== NT 5 family: XP, 2003

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt5-i386]]
===== Copiez le répertoire i368

a) copiez le répertoire `i386` d'un CD d'installation pour Microsoft Win2003/WinXP professionnel dans le répertoire `/var/lib/opsi/depot/win2003` ou `/var/lib/opsi/depot/winxppro`. Lorsque la copie de fichiers est terminé, vous devez changer les droits du répertoire `i386/`. Basculez vers le répertoire `winxppro` ou `win2003` et tapez la commande suivante:
[source,shell]
----
opsi-setup --set-rights i386
----

Les fichiers peuvent également être copiés sur le réseau. Donc, vous devez vous connecter au partage 'opsi_depot_rw' comme utilisateur 'pcpatch' au {opsi-server}. Vous trouverez le répertoire correspondant sous `install\winxppro` ou `install\win2003`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6]]
==== NT 6 family: Vista / 2008 / Win7

Parce que ces installations commencent seulement à partir d'un environnement Win32/Win64 nous devons construire une PE-Image, qui sera utilisé pour démarrer l'installation.

'"Pour installer une version 64-bit de Windows vous devez utiliser une version 64-bit de Windows PE. De même, pour installer une version 32-bit de Windows, vous devez utiliser une version 32-bit de Windows PE."' +
http://technet.microsoft.com/en-us/library/cc766093.aspx

Donc vous avez besoin du Kit d'installation automatisée (Windows AIK): +
http://www.microsoft.com/downloads/details.aspx?displaylang=en&FamilyID=696dd665-9f76-4177-a811-39c26d3b3b34

Ce site vous fournit un fichier ISO, qui pourra être gravés sur CD ou monté dans une machine virtuelle. Le contenu de ce CD doit être installé dans un système d'exploitation mentionnés dans la configuration système requise.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-pe]]
===== Création d'un PE

Les commandes pour créer un Windows PE dans la version 32- or 64-bit sont presque les mêmes, sauf pour les entrées *<ARCH>* ci-dessous. Ceux-ci doivent être soit *x86* , *amd64* ou *ia64*.

* Créer un environnement: +
Ouvrez un terminal en tant qu'administrateur (Start => Programs => Accessories => clic droit sur „Command Prompt“ => Run as… => Administrator) et exécutez la commande suivante:
[source,shell]
----
"%ProgramFiles%\Windows AIK\Tools\PETools\copype.cmd" <ARCH> C:\winpe
----

* Préparer l'image pour opsi: +
Ouvrez un terminal en tant qu'administrateur et exécutez la commande suivante (sur une seule ligne):
[source,shell]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /mountrw "C:\winpe\winpe.wim" 1 "C:\winpe\mount"
----

* entrez la commande suivante (de nouveau dans une seule ligne):
[source,shell]
----
echo c:\opsi\startnet.cmd > "C:\winpe\mount\Windows\System32\startnet.cmd"
----
(Remarque: Le fichier `startnet.cmd` sera créé par l'image de démarrage linux de OPSI en exécutant le script `setup.py`. Le fichier `startnet.cmd` contient l'appel pour wpeinit.)

* entrez la commande suivante (de nouveau dans une seule ligne):
[source,shell]
----
"%ProgramFiles%\Windows AIK\Tools\<ARCH>\imagex.exe" /commit /unmount "C:\winpe\mount"
----

* entrez la commande suivante (de nouveau dans une seule ligne):
[source,shell]
----
move "C:\winpe\winpe.wim" "C:\winpe\ISO\sources\boot.wim"
----

* Copiez le répertoire `C:\winpe\ISO` (avec les nom de destination `winpe`) dans `/var/lib/opsi/depot/win7/` (ou `/var/lib/opsi/depot/win2008`). +
Régler les droits d'accès au fichier en saisissant (par exemple):
[source,shell]
----
opsi-setup --set-rights /var/lib/opsi/depot/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-extendpe]]
===== Extension d'un PE

Dans certains cas, il est utile de étendre un PE. Surtout en utilisant du matériel Dell. Dell fournit des pilotes réseaux et stockage spéciaux pour l'utilisation en PE. Ces instructions ne fonctionne qu'avec Windows 7. (Windows Vista ne hérite pas le nécessaire dims- Deployment Image Servicing and Management.) Ces instructions ont la condition préalable, que vous avez suivi le chapitre "Créer un PE".

NOTE: Windows Automated Installation Kit n'est pas nécessaire pour les instructions suivantes.

D'abord vous devez télécharger les Dell-PE-drivers à partir du site web de Dell. Vous avez besoin, pour Windows 7, des pilotes WINPE 3.0 de Dell. Le fichier CAB téléchargé doit être extrait sur le disque local. Ceux-ci peut être fait avec 7zip ou l'outil en ligne de commande Expand.exe. Pour des raisons de clarté, il est recommandé de créer un répertoire "dell-driver" sur le disque local et d'extraire le fichier CAB dans ce répertoire.

* Utilisez DISM pour scanner l'image, afin de déterminer le numéro d'index requis. Normalement, une image PE est un seul fichier, vous pouvez donc utiliser l'indice 1, mais il est préférable de vérifier d'abord. Démarrer un terminal en tant qu'administrateur (Start => Programs => Accessories => clic droit sur „Command Prompt“ => Run as… => Administrator) et exécutez la commande suivante:
[source,shell]
----
dism /Get-WimInfo /WimFile:C:\winpe\ISO\sources\boot.wim
----

Dans la sortie de cette commande, vous pouvez voir, quelles images sont incluses dans le fichier image.

* La commande suivante monte l'image pour la modification:
[source,shell]
----
dism /Mount-Wim /WimFile:C:\winpe\ISO\sources\boot.wim /index:1 /MountDir:c:\winpe\mount
----

* Pour intégrer les pilotes extraits dans l'image montée, vous devez exécuter cette commande:
[source,shell]
----
dism /Image:C:\winpe\mount /Add-Driver /Driver:c:\dell-driver\winpe\x64 /Recurse
----

Si l'architecture est 32Bit, le `x64` doit être remplacé par `x86`. Le pilote-CAB de Dell hérite des pilotes pour les deux architectures.

NOTE: Si un seul pilote doit être intégré, laissez de côté l'option `/Recurse` et pointez directement vers le fichier inf du pilote au lieu du répertoire du pilote. Avec l'option `/ForceUnsigned` il est possible d'intégrer des pilotes non signés à l'image.

* Pour finir, l'image doit être démonté et les changements doivent être commités:
[source,shell]
----
dism /Unmount-Wim /MountDir:c:\winpe\mount /Commit
----

* Copiez le répertoire `C:\winpe\ISO` avec le nom `winpe` dans `/var/lib/opsi/depot/win7/` (ou dans `/var/lib/opsi/depot/win2008`). +
Réglez les droits d'accès du fichier en saisissant (par exemple):
[source,shell]
----
opsi-setup --set-rights /var/lib/opsi/depot/win7/winpe
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-unattend]]
===== unattend.xml

Le fichier de contrôle pour l'installation sans assistance est le `unattend.xml` que vous trouverez dans `/var/lib/opsi/depot/win7/custom`. Si vous souhaitez apporter des modifications à ce fichier, faitez-le dans ce répertoire et non pas dans le répertoire OPSI.

Le fichier `unattend.xml` livré avec le paquet opsi, contient l'activation du compte administrateur avec le mot de passe 'nt123'.

Vous trouverez de la documentation pour `unattend.xml` (après l'installation du kit WAIK) dans le répertoire `c:\Program Files\Windows\Waik\docs\chms`.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-drivers]]
===== Intégration des pilotes

L'intégration des pilotes fonctionne à la manière habituelle décrite dans le manuel OPSI: Placez vos répertoires pilotes dans `/var/lib/opsi/depot/win7/drivers/drivers` et puis exécutez le script `create_driver_links.py`.

Gardez à l'esprit que Vista/Win7 acceptent seulment les pilotes signés. Donc, si vous souhaitez utiliser des packs de pilote comme les packs de pilote à partir de driverpacks.net, assurez-vous d'utiliser uniquement les versions Vista/Win7.

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-installfiles]]
===== Fournir les fichiers d'installation

Copiez le DVD d'installation complète dans +
`/var/lib/opsi/depot/win7/installfiles`
Réglez les droits d'accès de fichier en saisissant:
[source,shell]
----
opsi-setup --set-rights /var/lib/opsi/depot/win7/installfiles
----

[[opsi-getting-started-firststeps-osinstall-fill-base-packages-nt6-logfiles]]
===== Les fichiers journaux de l'installation

* `c:\Windows\Panther\setupact.log`: +
Fichier journal jusqu'à la fin de la phase 4 de l'installation (fonctionnant sous WinPE)

* `c:\Windows\Panther\setupact.err`: +
Fichier journal des erreurs jusqu'à la fin de la phase 4 de l'installation (fonctionnant sous WinPE)

* `c:\Windows\Panther\UnattendGC\setupact.log`: +
Fichier journal d'une phase spécialisé

* `c:\Windows\Panther\UnattendGC\setupact.err`: +
Fichier journal des erreurs d'une phase spécialisé

* `c:\Windows\System32\Winevt\Logs\*`

* `c:\Windows\ntbtlog.txt` (seulement avec le protocole de démarrage activé)

[[opsi-getting-started-firststeps-osinstall-productkey]]
==== Clé de produit Windows

Si vous utilisez le module de gestion de licence OPSI, vous pouvez gérer vos clés de produit Windows par la gestion des licences. Vous trouverez les informations sur la façon de le faire dans le manuel OPSI.

Si vous ne souhaitez pas utiliser le module de gestion des licences, la clé de produit peut être fourni utilisant les propriétés du produit:

Si vous avez encore créé un client, vous pouvez utiliser l'interface de gestion OPSI pour entrer la clé de produit:

* choisissez un client
* allez à l'onglet 'Produits netboot'
* sélectionnez le produit (par exemple winxppro)
* allez à la propriété du produit 'productkey' (dans le coin inférieur droit de l'interface de gestion de opsi)
* entrez votre clé
* quittez le champ de saisie et enregistrez les modifications

Une autre possibilité est d'utiliser la ligne de commande. En donnent un serveur opsi vous pourrez lire/modifier les valeurs par défaut du serveur.
Pour lire les valeurs par défaut du serveur, vous pouvez utiliser (peut-être vous devez modifier le productId et vous devez changer '<opsiserver.domain.local>' avec le FQDN de votre serveur opsi. Soyez sûr que vous écrivez les commandes suivantes dans une seule ligne):
[source,shell]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}'
----

Pour modifier les valeurs par défaut du serveur la façon la plus simple c'est de lire les objets dans un fichier, modifier le fichier et mettre à jour les objets avec le fichier modifié.

Lisez d'abord la configuration actuelle dans un fichier (peut-être vous devez modifier le productId et vous devez changer '<opsiserver.domain.local>' avec le FQDN de votre serveur opsi. Soyez sûr que vous écrivez les commandes suivantes dans une seule ligne):
[source,shell]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}' > /tmp/property_config.json
----

Maintenant vous devez modifier le fichier `/tmp/property_config.json` et modifier les entrées dans les valeurs. Enfin, vous devez mettre à jour les objets avec le fichier modifié (commande en une seule ligne):
[source,shell]
----
opsi-admin -d method productPropertyState_updateObjects < /tmp/property_config.json
----

La réussite des modfications peut être vérifié avec la commande suivante (peut-être vous devez modifier le productId et vous devez changer '<opsiserver.domain.local>' avec le FQDN de votre serveur opsi. Soyez sûr que vous écrivez les commandes suivantes dans une seule ligne):
[source,shell]
----
opsi-admin -d method productPropertyState_getObjects [] '{"productId":"winxppro","objectId":"opsiserver.domain.local"}'
----

[[opsi-getting-started-firststeps-osinstall-start]]
==== Démarrer l'installation de Windows

Pour démarrer un'installation de Windows:

* choisissez un client

* allez à l'onglet 'Produits netboot'

* sélectionnez le produit (par exemple winxppro)

* définir le 'action demandée' pour l'installation

* enregistrez les modifications en cliquant sur le crochet rouge (qui vire au vert)

Maintenant le client devrait charger l'image de boot linux de OPSI via le réseau et le démarrer. Avant que les installations Windows démarrent, vous devez confirmer une fois.


[[opsi-getting-started-firststeps-osinstall-structure]]
==== Structure des produits d'une installation sans assistance

Ce chapitre décrit les produits suivants

* win2k
* winxppro
* winvista
* win2003
* win2008
* winvista-x64
* win2008-x64
* win7
* win7-x64
* win2008r2

[[opsi-getting-started-firststeps-osinstall-structure-dirs]]
===== Aperçu de l'arborescence des répertoires

[source,configfile]
----
<productid>-
           |-i386/				    		NT5 seulement: fichiers d'installation
           |-installfiles/					NT6 seulement: fichiers d'installation
           |-winpe/				   			NT6 seulement
           |-opsi/				  			scripts et modèles depuis opsi.org
           |  |-$oem$/						NT5 seulement: $oem$ selon MS
           |  |-postinst.d/					scripts après installation de l'OS, depuis opsi.org
           |  !-unattend.txt.template		Modèles depuis opsi.org
           |-custom/				  		Modèles du client
           |  |-$oem$/						$oem$ selon MS du client
           |  |-postinst.d/					scripts après installation de l'OS, depuis le client
           |  !-unattend.(txt/xml)			unattend.txt du client
           |-drivers/				  		répertoire des pilotes
           |  |-drivers/					répertoire des pilotes
           |  |-pciids/						liens symboliques vers les pilotes
           |  |-vendors/					liens symboliques vers les pilotes
           |  |-classes/					liens symboliques vers les pilotes
           |  |-usbids/						liens symboliques vers les pilotes
           |  |-hdaudioids/					liens symboliques vers les pilotes
           |  |-pci.ids						PCI-IDs DB
           |  !-usb.ids						USB-IDs DB
           |-setup.py				  		script d'installation
           |-<productid>_<version>.control	méta-données (uniquement pour info)
           |-<productid>.files		    	Liste des fichiers (créé automatiquement)
           |-create_driver_links.py			script de gestion des pilotes
           |-show_drivers.py			    script de gestion des pilotes
           |-download_driver_pack.py		script de gestion des pilotes
           !-extract_driver_pack.py			script de gestion des pilotes
----

[[opsi-getting-started-firststeps-osinstall-structure-files]]
===== Les fichiers

* `setup.py` +
C'est le script d'installation qui est exécuté par l'image de démarrage

* `<productid>_<version>.control` +
Contient le méta-données du produit préparé par le responsable du paquet. Ce fichier est ici seulement à titre d'information. Les modifications apportées à ce fichier seront sans aucun effet.

* `<productid>.files` +
Ce fichier est créé automatiquement et ne devrait pas être changé.

* `create_driver_links.py` +
`show_drivers.py` +
`download_driver_pack.py` +
`extract_driver_pack.py` +
Ce sont des scripts pour l'intégration pilote simplifié qui sont décrits dans son chapitre (<<opsi-getting-started-firststeps-osinstall-driverintegration,"L'intégration simplifié du pilote pour l'installation automatisée de l'OS">>).

[[opsi-getting-started-firststeps-osinstall-structure-i386]]
===== Répertoire i386 / installfiles / winpe

* `i386` +
Ce répertoire contient le fichier d'installation du répertoire `i386` du cd d'installation de Windows (NT5 = de Windows 2000 à XP)
Il est possible d'avoir plusieurs répertoires i386 (`i386` , `i386_en` , `i386_xxx`). Le répertoire 'i386' utilisé pour l'installation est contrôlée par la propriété du produit 'i386_dir'.

* `installfiles` +
Ce répertoire contient tous les fichiers d'installation du DVD de Windows (NT6 = Windows Vista et suivants)

* `winpe` +
Ce répertoire contient une image WinPE bootable, pour Windows Vista et suivants.

[[opsi-getting-started-firststeps-osinstall-structure-opsicustom]]
===== Répertoire opsi / custom

Ces deux répertoires contiennent des scripts et des fichiers de configuration pour l'installation de l'OS. Pendant l'installation ils travaillent ensemble avec une priorité pour les fichiers du répertoire personnalisé (custom).

Le répertoire OPSI contient des fichiers et des modèles qui sont mis à jour par opsi.org et peuvent-être remplacé par la mise à jour suivante. Donc ce n'est pas une bonne idée d'apporter des modifications personnalisées à cet endroit. S'il vous plaît utilisez le répertoire personnalisé pour cette finalité qui n'est pas objet de modifications par opsi.org.

Le sous-répertoire `postinst.d` contient des scripts qui sont exécutés après l'installation de l'OS et complété par `postinst.cmd`. Ces scripts sont nécessaires pour installer par exemple opsi-client-agent. Les scripts seront exécutés dans l'ordre alphabétique. Pour rendre plus facile à voir dans quel ordre les scripts sont exécutés, le nom commence toujours avec 2 chiffres (`10_dhcp.cmd`). Si vous voulez faire des extensions s'il vous plaît utilisez le répertoire custom/postinst.d et les numéros de départ entre les 10, 20, 30 ,... (par exemple `13_myscript.cmd`). Le numéros de départ 10,20, 30,... sont réservés à l'usage de opsi.org / uib gmbh. Le script `99_cleanup.cmd` est le dernier et sert a lancer un redémarrage.

[[opsi-getting-started-firststeps-osinstall-structure-drivers]]
===== Répertoire drivers

Ce répertoire est utilisé pour l'intégration des pilotes et est décrits dans le chapitre suivant.

[[opsi-getting-started-firststeps-osinstall-driverintegration]]
==== L'intégration simplifié du pilote pour l'installation automatisée de l'OS

Si un groupe d'ordinateurs a des pilotes qui ne font pas partie de l'installation par défaut de Windows, il est préférable de mettre ces ordinateurs dans un pool et d'intégrer leurs pilotes durant l'installation.

Opsi prend en charge l'intégration automatique des pilotes durant l'installation, et simplifie donc le déploiement du pilote. Vous n'avez qu'à placer les drivers dans le bon répertoire. Lorsque le script d'installation est appelé il cherche dans ces répertoires et crée un catalogue. L'image de démarrage utilise automatiquement ce catalogue pour intégrer les bons pilotes. Opsi prend en charge l'installation automatique des pilotes standard, des pilotes USB, des pilotes HD audio, des pilotes du contrôleur de disque (les pilotes en mode texte).

Afin d'être immédiatement installé avec l'installation de Windows, vous devez placer les pilotes sur le serveur dans un format spécifique. Les pilotes doivent être placés dans le répertoire des pilotes, avec le format '\*.inf', où le nom du fichier décrit le pilote pour le programme d'installation de Windows. Tous les pilotes dans le format 'setup.exe' ou '*.zip', ne sont pas utilisés ici. Si vous avez un ordinateur qui a déjà les pilotes installé, vous pouvez extraire les pilotes appropriés à l'aide du programme 'double driver' (http://www.boozet.org/dd.htm).

Il y a plusieurs niveaux d'intégration du pilote:

* Packages de pilotes génériques

* Pilotes préférés pour votre matériel, mais ne sont pas affectés à des ordinateurs spécifiques

* Les pilotes qui seront affectées manuellement à des ordinateurs

* Les pilotes qui seront automatiquement attribués aux ordinateurs en utilisant les champs <vendor>/<model>

Ci-dessous, un exposé détaillé sur la façon d'inclure chacun de ces pilotes.

[[opsi-getting-started-firststeps-osinstall-driverintegration-generaldrivers]]
===== Packages de pilotes génériques

Lorsque la configuration matérielle est très hétérogène, alors il peut être judicieux de travailler avec les packages de pilotes génériques. +
Les pilotes génériques peuvent être placés sous `./drivers/drivers`. +
Vous pouvez trouver par exemple les paquets de pilotes génériques ici http://driverpacks.net/ . +
Téléchargez le package du pilote approprié dans un répertoire temporaire, puis décompressez le package du pilote en utilisant le script opsi extract_driver_pack.py comme suit:
[source,shell]
----
./extract_driver_pack.py <path to the temporary directory with the compressed driverpacks>
----
Cela vas décompresser et enregistrer les pilotes dans le répertoire `./drivers/drivers/`. +
Il peut arriver que les pilotes trouvés par opsi à cet endroit ne fonctionnent pas nécessairement avec votre matériel. +
Pour les pilotes qui se trouvent dans `./drivers/drivers/`, le pilote sera identifié à l'aide du matériel correspondant PCI IDs (par exemple USB- ou HD_Audio-ID) dans le fichier de description, puis intégré dans l'installation de Windows en fonction des besoins.

[[opsi-getting-started-firststeps-osinstall-driverintegration-preferred]]
===== Pilotes préférés

Dans le cas que vous avez à supporter du matériel spécial, et vous pouvez trouver les pilotes supplémentaires auprès des fabricants, utilisez la procédure suivante pour les inclure dans l'installation. +
Placez les pilotes supplémentaires dans leur propre répertoire sous: +
`./drivers/drivers/preferred`. +
(le nom et la profondeur de la structure du répertoire n'est pas important).  Les pilotes qui se trouvent dans le répertoire `./drivers/drivers/preferred` seront intégrés dans l'installation de Windows, en supposant que opsi trouve une correspondance convenable pour le matériel basé sur le PCI IDs (ex.. USB or HD_Audo-ID) dans le fichier de description. +
Des problèmes peuvent survenir lorsque le même PCI IDs des pilotes se trouve dans `preferred`. Dans ce cas, un mappage direct des pilotes des périphériques est nécessaire.

[[opsi-getting-started-firststeps-osinstall-driverintegration-additional]]
===== Les pilotes qui seront attribuées manuellement aux ordinateurs

Lors de l'installation des pilotes supplémentaires sur la base du PCI-IDs ou USB-IDs, ils doivent être installés dans le répertoire `./drivers/drivers/additional` (le nom et la profondeur de la structure du répertoire n'est pas important).  Vous pouvez mapper un ou plusieurs pilotes pour le client à l'aide de la propriété du produit 'additional_drivers' et d'une liste de répertoires du pilote sous `./drivers/drivers/additional`.  Les répertoires spécifiés par 'additional_drivers' sont recherchés de façon récursive jusqu'à ce que tous les pilotes sont trouvés.  Cette méthode peut être utilisée pour créer un répertoire spécifique basé sur le type de client (ex. dell-optiplex-815).

Quand un pilote est trouvé dans le répertoire des pilotes qui est spécifié par 'additional_drivers' et correspond également à l'identifiant PCI, d'autres pilotes dans `drivers/preferred` ou `drivers/` ne seront pas utilisés.  Par conséquent les pilotes  dans 'additional_drivers' ajoutent des fonctionnalités qui n'auraient pas été trouvé avec les pilotes normaux.  En outre, les pilotes qui sont manuellement lié à un client à l'aide de 'additional_drivers' ont priorité sur les autres pilotes ('additional_drivers' peut être considéré comme 'super-preferred').

[[opsi-getting-started-firststeps-osinstall-driverintegration-byaudit]]
===== Les pilotes qui seront automatiquement attribués à des ordinateurs à l'aide des champs <vendor>/<model>

Les mécanismes décrits précédemment qui mappent directement les pilotes des périphériques est automatisé depuis la version 4.0.2 Release 2 de opsi.  Opsi recherchera dans le répertoire `./drivers/drivers/additional/byAudit` un nom de répertoire qui correspond au champ 'Vendor' qui a été donnée dans l'inventaire du matériel. Ce répertoire 'Vendor' recherchera un répertoire 'Model' qui correspond à ce qu'on voit dans l'inventaire matériel.   Si ce répertoire est trouvé, alors il sera attribué manuellement à la propriété du produit 'additional_drivers'. +
Le nom du répertoire 'byAudit' est sensible à la casse.  Les noms de répertoires pour 'Vendor' et 'Model' ne sont pas sensibles à la casse ('Dell' et 'dELL' sont traités de la même manière).

[[opsi-getting-started-firststeps-osinstall-driverintegration-structure]]
===== Structure du répertoire des pilotes et des fichiers des pilotes:

[source,configfile]
----
/var/
  !-lib/
     !-opsi/depot/
        !-winxppro/
           !-drivers
              |-classes/            (Liens vers des classes de pilotes de périphériques)
              |-hdaudioids/         (liens vers les pilotes HD-Audio)
              |-pciids/             (liens vers les pilotes PCI-ID)
              |-pci.ids             (base de données PCI)
              |-usbids/             (liens vers les pilotes USB-ID)
              |-usb.ids             (base de données USB)
              |-vendors/            (Liens vers les pilotes du fabricant)
              !-drivers             (place pour les packages de pilotes génériques)
                 |-additional/      (pilotes assignées manuellement)
                    |-byAudit/		Pilotes spécifiques au modèle que
                       |-<vendor>		seront affectés par
                          |-<model>		l'inventaire du matériel
                 |-buildin/         (données pour la version i386)
                 |-preferred/       (pilotes certifiés)
                 |-exclude/	    (pilotes exclus)
                 !-mydriverpacks/   (pack de pilotes exemple)
----

[[opsi-getting-started-firststeps-osinstall-driverintegration-processing]]
===== Traitement des différents niveaux d'intégration des pilotes

La priorité est donnée aux pilotes qui sont trouvés en utilisant la propriété 'additional_drivers' ou à l'aide des données d'inventaire dans `./drivers/drivers/additional/byAudit`.  Les tests seront effectués lors de l'intégration du pilote pour déterminer quels pilotes sont déjà installés sur quelles périphériques matériels. Quand un pilote est introuvable pour un périphérique, la méthode suivante sera utilisée pour rechercher les pilotes.

Pour les appareils qui ont des pilotes qui n'ont pas été énumérés dans 'additional_drivers', opsi va rechercher, et intégrer, un pilote approprié basé sur le PCI ID (ex. USB-, HD_Audio-ID).

'Intégration' des pilotes signifie ce qui suit:

* Le pilote sera copié sur le disque dur local dans `c:\drv\<num>`.

* L'installation de Windows recherche le sous-répertoire du pilote dans `c:\drv\` , où le nom du sous-répertoire sera lu à partir du fichier unattended à la racine du sous-répertoire 'unattend'.

[[opsi-getting-started-firststeps-osinstall-driverintegration-drivercheck]]
===== Ajout d'un Pilote et Vérification

Après tout changement dans le répertoire `./drivers/drivers` , appelez la commande suivante à partir du répertoire racine des produits Netboot afin de définir les permissions:
[source,shell]
----
opsi-setup --set-rights ./drivers
----

Ensuite, appelez le script `./create_driver_links.py`.  Le script recherche à travers les sous-répertoires './drivers/drivers' et génère une liste de liens en utilisant le PCI-IDs, USB-IDs, HD-Audio-IDs qui permet au matériel de connaître les pilotes.  Le script va utiliser les pilotes dans les répertoires préférés.

Le script `setup.py` examine le matériel des ordinateurs installés et identifie les pilotes nécessaires.  Ceux-ci seront copiés sur le disque et le fichier Unattended.txt sera corrigé.  Le script `create_driver_links.py` examine les produits NT5 une à la fois dans l'arbre 'i386' et extrait les fichiers. inf des pilotes nécessaires dans 'windows_builtin'.  Si vous apportez une modification à l'arborescence du répertoire i386 (ex. après l'installation d'un Service Pack), supprimez ce répertoire et lancez à nouveau `create_driver_links.py`.  Les pilotes reconnus pour les produits NT6, sont trouvés dans WinPE à 'windows_builtin'.

Avec la commande suivante, on peut voir l'inventaire matériel pour un client:
[source,shell]
----
./show_drivers.py <clientname>
----
Lorsque cette commande est appelée, il vous montrera une sélection des pilotes qui seront choisis pour l'installation Bootimage via PCI-IDs, USB-IDs, HD-Audio-IDs, et 'additional_drivers' (ou 'byAudit'),  et le matériel qui n'a toujours pas de pilote.

Utilisez le résultat de `show_drivers.py` pour vérifier et voir quels pilotes doivent être installés.

Il se pourrait que les fabricants incluent des pilotes différents pour différents systèmes d'exploitation (ex. Vista ou Win7) ou différentes configurations (ex. SATA ou SATA RAID).  Le script `create_driver_links.py` ne peut pas faire cette distinction.  Si vous pensez que le mauvais pilote a été installé, déplacez le pilote dans le répertoire 'drivers/exclude' et appelez à nouveau `create_driver_links.py`.  Les pilotes dans le répertoire 'drivers/exclude' ne sont pas utilisés au cours de l'intégration.

Exemple de sortie d'un appel `show_drivers.py`:

[source,opsifiles]
----
./show_drivers.py pcdummy

PCI-Devices
   [(Standardsystemgeräte), PCI Standard-PCI-zu-PCI-Brücke]
      No driver - device directory  /var/lib/opsi/depot/winxppro/drivers/pciids/1022/9602 not found
   [ATI Technologies Inc., Rage Fury Pro (Microsoft Corporation)]
      Using build-in windows driver
   [(Standard-IDE-ATA/ATAPI-Controller), Standard-Zweikanal-PCI-IDE-Controller]
      /var/lib/opsi/depot/winxppro/drivers/drivers/D/M/N/123
   [Realtek Semiconductor Corp., Realtek RTL8168C(P)/8111C(P) PCI-E Gigabit Ethernet NIC]
      /var/lib/opsi/depot/winxppro/drivers/drivers/preferred/realtek_gigabit_net_8111_8168b
   [IEEE 1394 OHCI-konformer Hostcontroller-Hersteller, OHCI-konformer IEEE 1394-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/winxppro/drivers/pciids/197B/2380' not found
   [Advanced Micro Devices, Inc., AMD AHCI Compatible RAID Controller]
      /var/lib/opsi/depot/winxppro/drivers/drivers/preferred/ati_raid_sb7xx
   [(Standard-USB-Hostcontroller), Standard OpenHCD USB-Hostcontroller]
      No driver - device directory '/var/lib/opsi/depot/winxppro/drivers/pciids/1002/4397' not found
   [ATI Technologies Inc, ATI SMBus]
      /var/lib/opsi/depot/winxppro/drivers/drivers/preferred/ati_smbus

USB-Devices
   [(Standard-USB-Hostcontroller), USB-Verbundgerät]
      /var/lib/opsi/depot/winxppro/drivers/drivers/preferred/brother_844x_pGerb
   [Microsoft, USB-Druckerunterstützung]
      /var/lib/opsi/depot/winxppro/drivers/drivers/preferred/brother_844x_pGerb

Additional drivers
   [ati_hdaudio_azalia]
     /var/lib/opsi/depot/winxppro/drivers/drivers/additional/ati_hdaudio_azalia
----

Exemple avec  'additional_drivers':
[source,opsifiles]
----
 ./show_drivers.py e5800
Manually selected drivers (additional)
   [hp_e5800]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI3.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDX861A.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI1.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXCPC.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64/HDXHPAI2.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/autorun.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/ibxHDMI/IntcDAud.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/HDMI/IntcHdmi.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/Graphics/kit24890.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/IIPS/Impcd.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit/hp64win7.inf]

PCI-Devices
   [8086:27C8]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C8
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27DA]  Intel : Intel(R) N10/ICH7 Family SMBus Controller - 27DA
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27C9]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27C9
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27DF]  Intel : Intel(R) ICH7 Family Ultra ATA Storage Controllers - 27DF
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27CA]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CA
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:2E30]  Intel : Intel(R) 4 Series Chipset Processor to I/O Controller - 2E30
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/not_preferred/x64/C/Intel/1
   [8086:27CB]  Intel : Intel(R) N10/ICH7 Family USB Universal Host Controller - 27CB
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:2E32]  Intel Corporation : Intel(R) G41 Express Chipset
      Manually selected [hp_e5800] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp50134/Graphics
   [8086:27CC]  Intel : Intel(R) N10/ICH7 Family USB2 Enhanced Host Controller - 27CC
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:244E]  Intel : Intel(R) 82801 PCI-Brücke - 244E
      Using build-in windows driver
      This driver will not be integrated, because same device already integrated in: '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/not_preferred/x64/C/Intel/1/dmi_pci.inf'
   [8086:27D0]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D0
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27B8]  Intel : Intel(R) ICH7 Family LPC Interface Controller - 27B8
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27D2]  Intel : Intel(R) N10/ICH7 Family PCI Express Root Port - 27D2
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27C0]  Intel : Intel(R) N10/ICH7 Family Serial ATA Storage Controller - 27C0
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/R293337/WIN7
   [8086:27D8]  Microsoft : High Definition Audio-Controller
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/8086/27D8' not found
   [10EC:8136]  Realtek : Realtek RTL8102E/RTL8103E-Familie-PCI-E-Fast-Ethernet-NIC (NDIS 6.20)
      Manually selected [hp_e5800] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp54284/Realtek 64bit

USB-Devices
   [0461:0010]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/usbids/0461' not found
   [0461:4D20]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/usbids/0461' not found
   [058F:6366]  Kompatibles USB-Speichergerät : USB-Massenspeichergerät
      No driver - vendor directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/usbids/058F' not found
   [0461:0010]  (Standard-USB-Hostcontroller) : USB-Verbundgerät
      No driver - vendor directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/usbids/0461' not found

HD-Audio-Devices
   [10EC:0662]  Realtek High Definition Audio
      Manually selected [hp_e5800] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/hp_e5800/sp52852/Vista64
----

Exemple avec 'byAudit':
[source,opsifiles]
----
 ./show_drivers.py pctry5detlef
Manually selected drivers (additional)
   [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)/atiilhag.inf]
      [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio/oem21.inf]

PCI-Devices
   [1002:5B70]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series Secondary (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0053]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/0053' not found
   [10DE:005D]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/005D' not found
   [1022:1100]  AMD : AMD HyperTransport(tm)-Konfiguration
      Using build-in windows driver
   [10DE:0054]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/evb_potsdam_fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1101]  AMD : AMD-Adresszuordnungskonfiguration
      Using build-in windows driver
   [10DE:0055]  (Standard-IDE-ATA/ATAPI-Controller) : Standard-Zweikanal-PCI-IDE-Controller
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/evb_potsdam_fsc__esprimo_p625/FTS_NVIDIASATAAHCIDRIVERVISTA64V103042MCP78__1026963/NVIDIA_SATA_AHCI_DRIVER_Vista64_V10.3.0.42_MCP78 (textmode capable)
   [1022:1102]  AMD : AMD DRAM und HyperTransport(tm)-Nachverfolgungsmoduskonfiguration
      Using build-in windows driver
   [10DE:0057]  NVIDIA : NVIDIA nForce-Netzwerkcontroller
      Using build-in windows driver
   [1022:1103]  AMD : Sonstige AMD-Konfiguration
      Using build-in windows driver
   [10DE:0059]  Realtek : Realtek AC'97 Audio
      Manually selected [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/MEDIA/Realtek AC'97 Audio
   [10DE:005E]  NVIDIA : NVIDIA nForce4 HyperTransport-Brücke
      /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/preferred/ga-ma78-pcbon4/chipset_win7-64/SMBUS
   [104C:8025]  Texas Instruments : OHCI-konformer Texas Instruments 1394-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/104C/8025' not found
   [10DE:005A]  (Standard-USB-Hostcontroller) : Standard OpenHCD USB-Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/005A' not found
   [10DE:0050]  (Standardsystemgeräte) : PCI Standard-ISA-Brücke
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/0050' not found
   [10DE:005B]  (Standard-USB-Hostcontroller) : Standard PCI-zu-USB erweiterter Hostcontroller
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/005B' not found
   [1002:5B60]  ATI Technologies Inc. : Radeon X300/X550/X1050 Series (Microsoft Corporation - WDDM)
      Manually selected [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series Secondary (Microsoft Corporation - WDDM)
      Multiple selected [/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi] /var/lib/opsi/depot/win7-x64-professional-msdn/drivers/drivers/additional/byAudit/nvidia/awrdacpi/pctry5detlef/Display/Radeon X300-X550-X1050 Series (Microsoft Corporation - WDDM)
   [10DE:0052]  NVIDIA : NVIDIA nForce PCI-Systemverwaltung
      Using build-in windows driver
   [10DE:005C]  (Standardsystemgeräte) : PCI Standard-PCI-zu-PCI-Brücke
      No driver - device directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/pciids/10DE/005C' not found

USB-Devices
   [1241:1111]  (Standardsystemgeräte) : USB-Eingabegerät
      No driver - vendor directory '/var/lib/opsi/depot/win7-x64-professional-msdn/drivers/usbids/1241' not found

HD-Audio-Devices
   No devices installed
----

TIPS::
* Les noms de répertoires `NDIS1` sont pilotes Vista ; `NDIS2` sont pilotes Win7

* Certains pilote de puces contiennent des fichiers de description, sans pour autant fournir des pilotes.  Un exemple serait 'cougar.inf' ou `ibexahci.inf` de Intel. Si un tel 'Pseudo-Driver' était placé dans `additional_drivers` (ou 'byAudit'), alors les autres pilotes dans le sous-répertoire 'preferred' peuvent être exclus.  Il est préférable de déplacer ces répertoires dans le sous-répertoire 'preferred'.

* Les pilotes SATA et SATA-RAID se référer au même PCI ID.  Le pilote SATA-RAID ne peut pas fonctionner avec un système à disque unique.

* Vérifiez la sortie de `./show_drivers` attentivement !

[[opsi-getting-started-softwintegration]]
== Intégration de nouveaux paquets logiciels dans le déploiement de logiciels opsi.

L'objectif principal de la distribution de logiciels est d'accomplir l'installation du logiciel automatiquement sans interaction de l'utilisateur. L'installation de logiciels et l'activité des utilisateurs doivent être strictement séparés. Dans la plupart des cas, le processus d'installation nécessite des privilèges d'administration que l'utilisateur n'a généralement pas. Donc, le processus d'installation doit être effectuée de façon indépendante de l'utilisateur. De cette façon, l'utilisateur ne peut pas interférer ni être affecté par un processus d'installation du logiciel.

Pour ce faire, vous devez écrire un script pour le moteur d'installation de opsi-winst.

[[opsi-getting-started-softwintegration-tutorial]]
=== Un petit tutoriel: Comment écrire un script opsi-winst

[[opsi-getting-started-softwintegration-tutorial-introduction]]
==== Introduction

Ce tutoriel devrait vous aider à commencer avec opsi. Ce n'est pas un remplacement pour la formation professionnelle (que vous pouvez commander par uib) ou encore l'étude des manuels complets.

Vous trouverez les manuels OPSI à: +
http://download.uib.de/doku
http://opsi-fr.opensides.be/opsi-doc/stable/

Les plus importants:
Winst reference card et Winst manual

Wiki (Script, Conseils, Liens): +
https://forum.opsi.org/wiki/

Forum de Support: +
http://forum.opsi.org

Formation et Support: +
Suivez une formation par uib gmbh ou un partner opsi: +
http://www.opsi.org/fr/support/

[[opsi-getting-started-softwintegration-tutorial-general]]
==== Méthodes d'installation non interactive

Peu importe si vous utilisez OPSI ou un autre produit, il existent trois façons d'installer un logiciel sans interaction de l'utilisateur:

. *Unattended ou installation en mode silencieux* +
Les programmes d'installation existante, du fabricant de logiciels d'origine, peuvent être exécuté à partir d'un script opsi-winst en mode 'silent' ou 'unattended'. Cela dépend du programme d'installation si le mode d'installation silencieuse est prise en charge. Un cas particulier de cette méthode est l'installation sans assistance de paquets MSI.

. *Installation interactive avec réponses enregistrées* +
Les réponses interactives, requis par le programme d'installation d'origine, peuvent être donnée automatiquement à l'aide de l'outil gratuit 'Autoit' ou Autohotkey. Cela signifie fournir un script autoIt pour une installation automatique.

. *Analyse et Repaquetage* +
La configuration standard peut être analysé et 'enregistré' pour faire les tâches d'installation directement par le programme 'opsi-winst'. Habituellement, ça veut dire créer le fichier d'installation du système de fichiers local et patcher le registre.

NOTE: opsi prend en charge toutes ces variantes. +
Habituellement, une combinaison de toutes les différentes manières, dans un script, fait le meilleur travail. Par example faire l'installation de base par la configuration d'origine si possible, puis faire un peu de personnalisation, par un patch du registre ou un fichier de configuration de base.


[[opsi-getting-started-softwintegration-tutorial-script-structure]]
==== Structure d'un script winst

Dans un premier temps un exemple simple d'un script winst:
[source,winst]
----
[Actions]
WinBatch_tightvnc_silent_install

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent
----

Un script winst contient des sections *primary* et *secondary*. Les entêtes de sections sont entre crochets, comme vous le savez à partir des fichiers ini. La section principale est ici [Actions] et la section secondaire est ici [winbatch_...].

Le travail de base comme le démarrage des programmes ou la copie de fichiers n'est pas fait dans les sections primaires, mais dans les sections secondaires. Ces sections secondaires sont à sujet précis et ont une syntaxe spécifique en fonction de leur thème spécifique.

Le nom d'une section secondaire commence avec un mot réservé pour le type de section secondaire suivi d'un identificateur libre.

A cet exemple, la section primaire +[Actions]+  appelle une section secondaire +[WinBatch_tightvnc_silent_install]+. +
Cette section secondaire est du type +WinBatch+. Le contenu des sections secondaires de type 'winbatch' sont exécutées par l'API Windows. Dans ce cas, le programme `tightvnc-1.3.9-setup.exe` sera lancé avec le paramètre +/silent+.

[[opsi-getting-started-softwintegration-tutorial-primary-sections]]
==== Sections primaires

Initial::
La section +[Initial]+ est utilisée pour définir les paramètres d'exécution. +
Cette section est facultative.

Actions::
La section +[Actions]+ est le coeur du programme principale. +
Certaines parties du code, qui sont appelés plus d'une fois, peuvent être écrite en sous-sections.

Sous-sections::
Sections primaires qui peuvent être appelée plusieurs fois ou qui ont leur code dans des fichiers externes.

Les sections primaires sont le programme principal qui contrôle le flux du programme. Pour cela vous avez:

* Variables: chaînes et les listes de chaînes
* déclarations if else endif
* for loops par le biais des listes de chaînes
* Fonctions

.code double pour la désinstallation
image::opsi-winst-without-delsub.png["code double pour la désinstallation",width=300]

.éviter le code doubles en utilisant les sous-sections
image::opsi-winst-with-delsub.png["éviter le code doubles en utilisant les sous-sections",width=300]

[[opsi-getting-started-softwintegration-tutorial-secondary-sections]]
==== Types important de sections secondaires

Files::
Fichier des opérations similaires

* copie (en ce qui concerne les informations de interne version, récursif, ...)
* suppression des fichiers ou des répertoires
* création des répertoires

WinBatch::
Est utilisé pour appeler des programmes par l'intermédiaire de l'API Windows. Par exemple, pour appeler les programmes d'installation en mode silencieux.

DosBatch/DosInAnIcon::
Le contenu de ces sections est interprété par `cmd.exe` comme un fichiers batch normale. +
Une variante des 'DosBatch' est 'DosInAnIcon', qui est appelé dans une fenêtre réduite.

ExecWith::
Le contenu des cette section est interprété par le programme qui est donné comme paramètre pour cette section (par exemple AutoIt).

Registry::
Les sections 'Registry' sont utilisées pour les manipulations du registre.

Linkfolder::
Les sections 'Linkfolder' sont utilisés pour la manipulation du menu de démarrage et des icônes du bureau.

[[opsi-getting-started-softwintegration-tutorial-global-constants]]
==== Constantes globales

Les constantes globales sont des espaces réservés qui peuvent être utilisés dans les sections primaires et secondaires. Ces espaces réservés sont remplacés par leurs valeurs à l'exécution.

Exemples:

+%ProgramFiles32Dir%+:: c:\program files
+%Systemroot%+::        c:\windows
+%System%+::            c:\windows\system32
+%Systemdrive%+::       c:\
+%Scriptpath%+::        <chemin d'accès au script exécutant>

[[opsi-getting-started-softwintegration-tutorial-second-example]]
==== Deuxième exemple: tightvnc

Aux fins des explications un script simple pour une installation de TightVNC. Ce script ne doit contenir que l'appel à WinBatch pour l'installation en mode silencieux. Mais si vous appelez cette installation en mode silencieux plus d'une seule fois, il apparaît une fenêtre de confirmation (qui est un bug dans l'installateur). Cette fenêtre de confirmation sera fermé par un script 'autoit' si elle apparaît.

tightvnc.ins:
[source,winst]
----
[Actions]
Message "Installer tightvnc 1.3.9 ..."
ExecWith_autoit_confirm "%ScriptPath%\autoit3.exe" WINST /letThemGo
WinBatch_tightvnc_silent_install
KillTask "autoit3.exe"

[WinBatch_tightvnc_silent_install]
"%ScriptPath%\tightvnc-1.3.9-setup.exe" /silent

[ExecWith_autoit_confirm]
; Wait for the confirm dialog which only appears if tightvnc was installed before as service
; Waiting for the window to appear
WinWait("Confirm")
; Activate (move focus to) window
WinActivate("Confirm")
; Choose answer no
Send("N")
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands]]
==== Commandes élémentaires pour les sections primaires

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-string-variable]]
===== Variable chaîne de caractères

Déclaration d'une variable:: DefVar <nom de la variable>

Fixer une valeur:: Set <nom de la variable> = <value>

Exemple:
[source,winst]
----
DefVar $ProductId$
Set $ProductId$ = "firefox"
----

IMPORTANT: L'utilisation de variable chaîne de caractères est différente dans les sections primaires et secondaires. Dans la section primaire les Variable chaîne de caractères sont traités comme des objets indépendants. Les variable chaîne de caractères peuvent seulement être déclaré et réglé sur les valeurs dans les sections primaires. Par conséquent, vous devez utiliser un opérateur ('+') pour concaténer des variables et chaînes de caractères dans une expression de chaîne. +
Exemple:`"Installation de "+$ProductId$+" ..."` +
Dans les sections secondaires les variables chaîne de caractères sont utilisés comme un espace réservé pour leurs valeurs. +
Example: `"Installation de $ProductId$ ..."` +
Vous devez garder cela à l'esprit si vous copiez et collez les expressions de chaîne entre les sections primaires et secondaires. +
L'avantage des ce genre de manipulation des variables de chaîne est qu'il est possible d'utiliser ces variables dans les sections secondaires qui sont interprétés par d'autres programmes (DosBatch / Execwith).

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-message]]
===== Message / showbitmap

Afficher du texte pendant l'exécution: +
`Message <chaîne de caractères>`

Exemple:
[source,winst]
----
Message "Installation de "+ $ProductId$ +" ..."
----

Afficher une image lors de l'installation: +
`ShowBitMap [<nom du fichier>] [<sous-titre>]`

Exemple:
[source,winst]
----
ShowBitmap "%ScriptPath%\python.png" "Python"
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-if-else-endif]]
===== if [else] endif

*Syntaxe:*
[source,winst]
----
if <condition>
	;déclaration(s)
[
else
	;déclaration(s)
]
endif
----

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-functions]]
===== Fonctions

HasMinimumSpace:: Vérifie l'espace libre sur le disque dur.
FileExists:: Vérifie l'existence d'un fichier ou d'un répertoire.

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-error]]
===== Erreur, journalisation et commentaires

comment char ';':: Les lignes commençant par ';' char sont tout simplement ignorés.
comment:: écrit un commentaire dans le fichier journal
LogError:: écrit des messages d'erreur dans le fichier journal
isFatalError:: abandon l'execution des scripts et retourne l'état d'installation 'failed' au serveur.

[[opsi-getting-started-softwintegration-tutorial-elementary-commands-requirements]]
===== Exigences

requiredWinstVersion:: Version minimale requise pour opsi-winst


[[opsi-getting-started-softwintegration-tutorial-template]]
==== Troisième exemple: Le modèle générique 'opsi-template'

On vous encourage à utiliser ce modèle à chaque fois que vous créez des produits propres opsi. Ne utilisez pas une copie de ce manuel mais regardez sur http://download.uib.de pour une nouvelle version du paquet 'opsi-template'. Utilisant la commande opsi-package-manager vous pouvez installer ce paquet (-i) ou l'extraire (-x) sur votre serveur, puis récupérer les scripts.

.setup.ins: script d'installation
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/credits/

[Actions]
requiredWinstVersion >= "4.10.5"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ProductId$
DefVar $MinimumSpace$
DefVar $InstallDir$
DefVar $ExitCode$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
;$ProductId$ should be the name of the product in opsi
; therefore please: only lower letters, no umlauts,
; no white space use '-' as a seperator
Set $ProductId$       = "opsi-template"
Set $MinimumSpace$    = "1 MB"
; the path were we find the product after the installation
Set $InstallDir$      = "%ProgramFiles32Dir%\<path to the product>"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError
	; Stop process and set installation status to failed
else
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$

	if FileExists("%ScriptPath%\delsub32.ins")
		comment "Start uninstall sub section"
		Sub "%ScriptPath%\delsub32.ins"
	endif

	Message "Installing " + $ProductId$ + " ..."

	if $LicenseRequired$ = "true"
		comment "Licensing required, reserve license and get license key"
		Sub_get_licensekey
	endif

	comment "Start setup program"
	ChangeDirectory "%SCRIPTPATH%"
	Winbatch_install
	Sub_check_exitcode

	comment "Copy files"
	Files_install /32Bit

	comment "Patch Registry"
	Registry_install /32Bit

	comment "Create shortcuts"
	LinkFolder_install

endif

[Winbatch_install]
; Choose one of the following examples as basis for your installation
; You can use $LicenseKey$ var to pass a license key to the installer
;
; === Nullsoft Scriptable Install System ================================================================
; "%ScriptPath%\Setup.exe" /S
;
; === MSI package =======================================================================================
; You may use the parameter PIDKEY=$Licensekey$
; msiexec /i "%ScriptPath%\some.msi" /l* "$LogDir$\$ProductId$.install_log.txt" /qb! ALLUSERS=2 REBOOT=ReallySuppress
;
; === InstallShield + MSI=====================================================================================
; Attention: The path to the log file should not contain any whitespaces
; "%ScriptPath%\setup.exe" /s /v" /l* $LogDir$\$ProductId$.install_log.txt /qb! ALLUSERS=2 REBOOT=ReallySuppress"
; "%ScriptPath%\setup.exe" /s /v" /qb! ALLUSERS=2 REBOOT=ReallySuppress"
;
; === InstallShield =====================================================================================
; Create setup.iss answer file by running: setup.exe /r /f1"c:\setup.iss"
; "%ScriptPath%\setup.exe" /s /sms /f1"%ScriptPath%\setup.iss" /f2"$LogDir$\$ProductId$.install_log.txt"
;
; === Inno Setup ========================================================================================
; http://unattended.sourceforge.net/InnoSetup_Switches_ExitCodes.html
; You may create setup answer file by: setup.exe /SAVEINF="filename"
; You may use an answer file by the parameter /LOADINF="filename"
; "%ScriptPath%\setup.exe" /sp- /silent /norestart /nocancel /SUPPRESSMSGBOXES

[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"

[Registry_install]
; Example of setting some values of an registry key:
;
; openkey [HKEY_LOCAL_MACHINE\Software\$ProductId$]
; set "name1" = "some string value"
; set "name2" = REG_DWORD:0001
; set "name3" = REG_BINARY:00 af 99 cd

[LinkFolder_install]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of creating an shortcut to the installed exe in AllUsers startmenu:
;
; set_basefolder common_programs
; set_subfolder $ProductId$
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters:
; 	working_dir: $InstallDir$
; 	icon_file:
; 	icon_index:
; end_link
;
; Example of creating an shortcut to the installed exe on AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters: <some_param>
; 	working_dir: $InstallDir$
; 	icon_file: <path to icon file>
; 	icon_index: 2
; end_link

[Sub_get_licensekey]
if opsiLicenseManagementEnabled
	comment "License management is enabled and will be used"

	comment "Trying to get a license key"
	Set $LicenseKey$ = demandLicenseKey ($LicensePool$)
	; If there is an assignment of exactly one licensepool to the product the following call is possible:
	; Set $LicenseKey$ = demandLicenseKey ("", $ProductId$)
	;
	; If there is an assignment of a license pool to a windows software id, it is possible to use:
	; DefVar $WindowsSoftwareId$
	; $WindowsSoftwareId$ = "..."
	; Set $LicenseKey$ = demandLicenseKey ("", "", $WindowsSoftwareId$)

	DefVar $ServiceErrorClass$
	set $ServiceErrorClass$ = getLastServiceErrorClass
	comment "Error class: " + $ServiceErrorClass$

	if $ServiceErrorClass$ = "None"
		comment "Everything fine, we got the license key '" + $LicenseKey$ + "'"
	else
		if $ServiceErrorClass$ = "LicenseConfigurationError"
			LogError "Fatal: license configuration must be corrected"
			LogError getLastServiceErrorMessage
			isFatalError
		else
			if $ServiceErrorClass$ = "LicenseMissingError"
				LogError "Fatal: required license is not supplied"
				isFatalError
			endif
		endif
	endif
else
	LogError "Fatal: license required, but license management not enabled"
	isFatalError
endif


[Sub_check_exitcode]
comment "Test for installation success via exit code"
set $ExitCode$ = getLastExitCode
; informations to exit codes see
; http://msdn.microsoft.com/en-us/library/aa372835(VS.85).aspx
; http://msdn.microsoft.com/en-us/library/aa368542.aspx
if ($ExitCode$ = "0")
	comment "Looks good: setup program gives exitcode zero"
else
	comment "Setup program gives a exitcode unequal zero: " + $ExitCode$
	if ($ExitCode$ = "1605")
		comment "ERROR_UNKNOWN_PRODUCT	1605	This action is only valid for products that are currently installed."
		comment "Uninstall of a not installed product failed - no problem"
	else
		if ($ExitCode$ = "1641")
			comment "looks good: setup program gives exitcode 1641"
			comment "ERROR_SUCCESS_REBOOT_INITIATED	1641	The installer has initiated a restart. This message is indicative of a success."
		else
			if ($ExitCode$ = "3010")
				comment "looks good: setup program gives exitcode 3010"
				comment "ERROR_SUCCESS_REBOOT_REQUIRED	3010	A restart is required to complete the install. This message is indicative of a success."
			else
				logError "Fatal: Setup program gives an unknown exitcode unequal zero: " + $ExitCode$
				isFatalError
			endif
		endif
	endif
endif
----

.delsub32.ins: sous-section externe de désinstallation
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/


Set $MsiId$ = '{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'
Set $UninstallProgram$ = $InstallDir$ + "\uninstall.exe"

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists($UninstallProgram$)
	comment "Uninstall program found, starting uninstall"
	Winbatch_uninstall
	sub_check_exitcode
endif
if not (GetRegistryStringValue32("[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $MsiId$ + "] DisplayName") = "")
	comment "MSI id " + $MsiId$ + " found in registry, starting msiexec to uninstall"
	Winbatch_uninstall_msi
	sub_check_exitcode
endif

comment "Delete files"
Files_uninstall /32Bit

comment "Cleanup registry"
Registry_uninstall /32Bit

comment "Delete program shortcuts"
LinkFolder_uninstall

[Winbatch_uninstall]
; Choose one of the following examples as basis for program uninstall
;
; === Nullsoft Scriptable Install System ================================================================
; maybe better called as
; Winbatch_uninstall /WaitforProcessending "Au_.exe" /Timeoutseconds 10
; "$UninstallProgram$" /S
;
; === Inno Setup ========================================================================================
; "$UninstallProgram$" /silent /norestart /SUPPRESSMSGBOXES /nocancel


[Winbatch_uninstall_msi]
msiexec /x $MsiId$ /qb! REBOOT=ReallySuppress

[Files_uninstall]
; Example for recursively deleting the installation directory (don't forget the trailing backslash):
;
; del -sf "$InstallDir$\"

[Registry_uninstall]
; Example of deleting a registry key:
;
; deletekey [HKEY_LOCAL_MACHINE\Software\$ProductId$]

[LinkFolder_uninstall]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of deleting a shortcut from AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
; delete_element $ProductId$
[Sub_check_exitcode]
;(.... see above .....)
----

.uninstall32.ins: script de désinstallation
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/

[Actions]
requiredWinstVersion >= "4.11.2.6"

DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $LogDir$
DefVar $ExitCode$
DefVar $ProductId$
DefVar $InstallDir$
DefVar $LicenseRequired$
DefVar $LicensePool$

Set $LogDir$ = "%SystemDrive%\tmp"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "opsi-template"
Set $InstallDir$      = "%ProgramFiles32Dir%\<path to the product>"
Set $LicenseRequired$ = "false"
Set $LicensePool$     = "p_" + $ProductId$
; ----------------------------------------------------------------


comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub32.ins")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub32.ins"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Sub_free_license
endif

[Sub_free_license]
comment "License management is enabled and will be used"

comment "Trying to free license used for the product"
DefVar $result$
Set $result$ = FreeLicense($LicensePool$)
; If there is an assignment of a license pool to the product, it is possible to use
; Set $result$ = FreeLicense("", $ProductId$)
;
; If there is an assignment of a license pool to a windows software id, it is possible to use
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; set $result$ = FreeLicense("", "", $WindowsSoftwareId$)
----

[[opsi-getting-started-softwintegration-tutorial-create-and-test-script]]
==== Création interactive et test d'un script opsi-winst

Vous pouvez interactivement adapter et tester un script utilisant winst32.exe.

Créez un répertoire (par exemple `c:\test`) et copiez les scripts à partir de opsi-template (`setup.ins`, `delsub.ins` et `uninstall.ins`) dans ce répertoire.

Démarrez {opsi-winst} (`winst32.exe`) par double clic. Si opsi-client-agent est installé sur votre ordinateur, vous trouverez opsi-winst dans le répertoire `C:\program files\opsi.org\opsi-client-agent\opsi-winst`. Si opsi-client-agent n'est pas installé, vous trouverez opsi-winst dans le partage
`\\<opsiserver\opsi_depot_rw` dans le dossier `install\opsi-winst\files`.

Après le démarrage de {opsi-winst} vous verrez la fenêtre suivante:

.opsi-Winst démarré en mode interactif
image::opsi-script-interactiv.png["Screenshot: opsi-Winst démarré en mode interactif",400]

* 'Select Script' est utilisée pour choisir le script que vous voulez exécuter.
* 'Start' lancera l'exécution du script sélectionné.
* 'View Log' est utilisé pour lire le fichier journal de la dernière exécution du script.

Sélectionnez le script 'setup.ins' et exécutez-le.

.{opsi-winst} fenêtre de vue du fichier de logs
image::winst-log-view.png["{opsi-winst} fenêtre de vue du fichier de logs",400]

* Regardez le fichier des logs pour voir comment opsi-winst interprète le script.

* Copiez setup.exe que vous souhaitez installer dans le répertoire où les scripts sont (par exemple `c:\test`).

* Ouvrez le script `setup.ins` avec un éditeur. Vous pouvez utiliser n'importe quel éditeur de texte que vous aimez. Nous suggérons 'jEdit' avec coloration syntaxique pour opsi-winst qui fait partie des produits indispensables OPSI.

.jEdit avec un script opsi
image::jedit-with-winst-script.png["jEdit avec un script opsi",400]

* Vous pouvez maintenant modifier le script en utilisant l'éditeur. Enregistrez les modifications (garder l'éditeur ouvert)

* Maintenant, passez à {opsi-winst} et relancez le script. (Vous n'avez pas à sélectionner de nouveau le script. Il suffit d'appuyer sur le bouton 'start').

* Il suffit de regarder le fichier journal pour voir comment le flux du programme change en fonction de vos modifications dans le script.

* De cette façon, bouclant dans les étapes: +
 - Modifier le script et enregistrer +
 - exécuter le script +
 - consulter le fichier journal +


Vous trouverez dans le prochain chapitre quelques conseils sur des problèmes. Dans le chapitre suivant, sera décrit comment créer un produit opsi à partir de vos scripts et de vos fichiers et comment l'installer sur le serveur OPSI.


[[opsi-getting-started-softwintegration-tutorial-template-details]]
==== Informations et conseils sur les problèmes

[[opsi-getting-started-softwintegration-tutorial-find-switches]]
===== Recherche de commutateurs unattend ou silencieux

Pour une configuration „unattended“ ou „silent” la configuration d'origine va être remplacé par un mode unattended non interactif par des arguments applicables en ligne de commande.

Le problème est de trouver le bon commutateur

.Regardez sur Internet:
Avant de commencer à intégrer un nouveau produit, ce serait d'abord mieux de jeter un oeil à internet pour voir si quelqu'un a déjà fait ce travail:

Vous trouverez des scripts {opsi-winst} prêts à l'emploi, distribués par la communauté, à: link:https://forum.opsi.org/wiki/[opsi wiki]

Vous trouverez un ensemble de liens vers des sites avec des collections de commutateur à: link:https://forum.opsi.org/wiki/doku.php?id=userspace:software_integration_web_links[opsi wiki: Software integration web-links]

.Recherchez dans le site du producteurs du logiciel:
Un grand nombre de fabricants de logiciels sont conscients des besoins de distribution de logiciels "unattended", donc il y a souvent quelques conseils et des instructions dans la documentation du produit ou sur le site des éditeurs de logiciels.

.Identifiez le fabricant du programme d'installation:
La plupart des programmes d'installation sont construits en utilisant des frameworks comme 'Inno', 'NSIS', 'Installshield' ou 'Wise'. Chacun de ces frameworks de configuration a ses propres commutateurs. La méthode suivante peut être utilisée pour déterminer le framework et d'autres informations nécessaires:  Les chaînes d'entrée peuvent être déterminées en utilisant le programme en ligne de commande 'strings' étant donné le programme d'installation 'setup.exe', et les noms du framework en sortie peut être trouvé en utilisant 'grep' ou 'findstr'.

Les commandes Linux ressemblent à ceci (changez <mysetup.exe> avec le nom de votre setup.exe):

[source,shell]
----
strings <mysetup.exe> | grep -i -E "(inno|nsis|installshield|wise)"
----

Windows n'a pas de commande native `strings`, vous devrez donc l'installer. Vous pouvez télécharger le programme `strings.exe` depuis: http://technet.microsoft.com/en-us/sysinternals/bb897439

Pour utiliser ce programme, entrez les commandes suivantes dans l'interface de ligne de commande (changer <mysetup.exe> avec le nom de votre setup.exe):
[source,shell]
----
strings.exe <mysetup.exe> | findstr /i /r "inno installshield nsis wise"
----

La même méthode est utilisée dans `opsi-setup-detector`.  Voir l'exemple ci-dessous:

.opsi setup detector
image::opsi-setup-detector.png[width="100mm"]

Ce programme GUI peut être appelé depuis le menu contextuel de Windows Explorer.

.opsi setup detector dans le menu contextuel de Windows Explorer
image::opsi-setup-detector-context-small-en.png[width="70mm"]

'opsi setup detector' peut être téléchargé comme une application autonome à partir de:

https://download.uib.de/opsi4.0/products/localboot/

Sur opsi.org, vous pouvez trouver un lien web link:https://forum.opsi.org/wiki/doku.php?id=userspace:software_integration_web_links[opsi wiki: Software integration web-links] +
à la section 'Commutateurs d'installation spécifiques', qui a des liens vers des sites Web qui donnent des conseils sur les moyens de détecter le fabricant du programme d'installation.

[[opsi-getting-started-softwintegration-tutorial-winst-commands]]
===== Certaines commandes opsi-winst plus importantes

La reference card vous donne une brève description des commandes opsi-winst :
link:https://download.uib.de/opsi_stable/docopsi-script-reference-card-en.pdf[opsi-script reference card]

Tous les détails de la syntaxe sont décrites dans le manuel opsi-winst :
link:https://download.uib.de/opsi_stable/docopsi-script-manual-en.pdf[opsi-script manual]

Voici quelques conseils pour les éléments importants:

.Stringlisten
Les listes de chaînes sont puissantes, spécialement pour examiner la sortie d'autres programmes. Lisez le manuel opsi-winst pour plus de détails.

.ExitWindows
* `ExitWindows /Reboot` +
Redémarrer après que le script est terminé

* `ExitWindows /ImmediateReboot` +
Redémarrer maintenant

* `ExitWindows /ImmediateLogout`
Quitter maintenant {opsi-winst}

.Product Properties
Pour certains produits, il est important d'avoir les propriétés du produit qui peuvent modifier les spécifications d'installations du client. Comment créer ces propriétés est décrit ci-dessous dans <<opsi-getting-started-softwintegration-create-opsi-package,"Création d'un paquet opsi">>.

Pour évaluer ces propriétés {opsi-winst} utilise la fonction `GetProductProperty`

[source,winst]
----
if GetProductProperty("example-property", "no") = "yes"
	Files_copy_extra_files
endif
----

[[opsi-getting-started-softwintegration-tutorial-opsiadmin]]
===== Installation avec un utilisateur connecté

Comme point de départ, nous supposons que vous avez fait une installation "unattended" en utilisant un script opsi-winst. L'installation fonctionne bien lorsqu'elle est lancée comme un utilisateur connecté (avec des privilèges administratifs).
Mais avec certains logiciels, vous verrez que quand elle commence à partir du déploiement de logiciels (opsi-client-agent) elle échoue. Une raison possible de cette différence pourrait être que le processus d'installation requiert un environnement utilisateur ou un profil.

Dans le cas d'un paquet MSI l'option 'ALLUSERS=2' pourrait aider.
Exemple:

[source,winst]
----
[Actions]
DefVar $MsiLogFile$
Set $MsiLogFile$ = "c:\tmp\myproduct.log"
winbatch_install_myproduct

[winbatch_install_myproduct]
msiexec /qb /l* $MsiLogFile$ /i "%ScriptPath%\files\myproduct.msi" ALLUSERS=2
----

Une autre possibilité est que l'installation démarre un deuxième processus et s'arrête avant que le deuxième processus est terminé. Donc, du point de vue de opsi-winst la tâche est terminée alors qu'en fait, le deuxième processus travail encore (installation / désinstallation). +
Dans ce cas, vous pouvez utiliser le modificateur +/WaitSeconds <secondes>+ ou
+/WaitForProcessEnding "program.exe" /TimeOutSeconds "<secondes>"+ appelant la section winbatch pour attendre la fin du deuxième processus.

Une autre façon plus complexe pour résoudre le problème est de créer un compte d'utilisateur administratif temporaire et de l'utiliser pour l'installation du programme. Pour une description détaillée sur la façon de faire s'il vous plaît consultez le manuel-opsi-winst au chapitre 8.3 'Script pour l'installation dans le cadre d'un administrateur local' et utilisez le modèle 'opsi-template-with-admin'.

[[opsi-getting-started-softwintegration-tutorial-msi]]
===== Travailler avec les paquets MSI

Avec Windows 2000, Microsoft a lancé son propre concept d'installation basé sur le service Microsoft Installer „MSI“. Entre temps de nombreux programmes d'installation sont compatibles MSI.

Pour être conformes MSI, il doivent fournir un paquet avec des instructions d'installation pour le MSI. Habituellement il s'agit d'un fichier nommé 'product.msi'.

En pratique, le „setup.exe“ d'un produit contient un fichier 'product.msi' et un programme de contrôle supplémentaire pour l'installation. Le programme de contrôle décompresse le 'product.msi' et affiche une fenêtre demandent le démarrage de l'installation. Si cela a été approuvé le programme de contrôle vérifie que MSI est installé et lui passe le 'product.msi'. S'il n'y a pas de MSI approprié, le programme de contrôle commence d'abord l'installation du MSI.

Lorsque vous interrompez l'installation à ce point, vous trouverez souvent des paquets MSI décompressé dans un répertoire temporaire.

Ce paquet peut être utilisé pour une installation "unattended", par exemple, avec la déclaration:
[source,winst]
----
msiexec /i "%ScriptPath%\Product.msi" /qb-! ALLUSERS=2 REBOOT=ReallySuppress
----

[[opsi-getting-started-softwintegration-tutorial-customizing]]
===== Personnalisation après une installation silent/unattended

Après une installation silencieuse réussie un peu plus de personnalisation peut être utile. Opsi-winst est un outil puissant pour faire ce travail. Au début, vous aurez à connaître quels correctifs doivent être appliqués. Par exemple cela pourrait signifier d'analyser les paramètres de registre que sont affectés par les outils de personnalisation graphique.

Vous pouvez utiliser les outils décrits dans <<opsi-getting-started-softwintegration-tutorial-analyse-and-repackage>> plus bas. Plus d'outils peuvent être trouvé ici:

* link:http://www.sysinternals.com/[sysinternals]
* link:https://sourceforge.net/projects/regshot/[regshort]


[[opsi-getting-started-softwintegration-tutorial-autoit]]
===== Intégration du programme d'installation avec des réponses automatisées

Un autre moyen rapide d'intégration est de fournir un fichier de réponses automatisées pour le processus d'installation. Pour être plus précis, le fichier de réponses est utilisé par un outil de contrôle, qui attend, pour la configuration à venir, des fenêtres interactives, auxquelles il passe ensuite les entrées, tel que définie dans le fichier de réponses. Comme outil de contrôle, nous recommandons 'AutoIt'. Le programme AutoIt et la documentation vous la trouverez sur le site: http://www.hiddensoft.com/autoit3.

AutoIt fournit un grand nombre de commandes pour contrôler le processus d'installation. Aussi plusieurs états d'erreur peuvent être manipulé (s'ils sont connus à l'avance) dans le script à la section '[ADLIB]'.

Bien qu'il y est un enjeu fondamental dans l'utilisation de AutoIt: +
AutoIt-Script doit fournir des données pour chaque fenêtre, qui pourraient surgir lors de l'installation. Donc, si une fenêtre inattendue surgit, qui n'est pas traitée dans la section [ADLIB], AutoIt ne fournit aucune entrée pour cette fenêtre et l'installation s'arrête à ce moment d'attente pour l'entrée. Cette entrée peut être faite par un utilisateur interactivement et ensuite le script peut reprendre et gèrer les fenêtres suivante connues.

Il y a un autre chemin critique dans une installation AutoIt: +
L'utilisateur peut interférer avec l'installation si la souris et le clavier ne sont pas désactivés. C'est pourquoi nous considérons l'installation 'unattended' ou 'silent' comme une solution plus stable.

Une combinaison des deux pourrait faire un bon travail: +
La configuration 'silent' fait le travail principale et un script AutoIt gère les conditions particulières qui pourraient survenir.

Si dans OPSI vous utilisez la possibilité d'exécuter l'installation sur un bureau autre que le bureau actuel ou si le bureau actuel est verrouillé, vous trouverez quelques fonctions autoit qui ne fonctionneront pas correctement dans ces conditions.

Donc vous devez éviter l'utilisation des commandes autoit suivantes dans les scripts '{opsi-winst}':

* winwait()

* winactivate()

* Send()

Comme ces commandes sont largement utilisés, nous avons besoin de substituts:

*winwait()* +
peut être remplacé par +
winexists() +
de la façon suivante (avec la fonctionnalité supplémentaire de 30 secondes de timeout):
[source,configfile]
----
$seconds = 0
$exists = 0
While ($seconds <= 30) and ($exists = 0)
    $exists = WinExists("Setup")
    $seconds = $seconds + 1
    sleep(1000)
WEnd
----

*Send()* +
peut être remplacé par +
controlsend() ou controlclick() +
Donc vous devez utiliser `Au3info.exe` pour obtenir le 'ControlId' dont vous avez besoin dans cette commandes. S'il vous plaît utilisez le 'ControlId' numérique, les autres variantes semblent ne pas fonctionner correctement:
[source,configfile]
----
ControlClick("Setup", "", 1)
----

Voici une partie de notre script d'installation de jedit comme exemple. +
Dans ce script, nous produisons également un fichier journal des activités AutoIt, qui peut être intégré dans le fichier journal de '{opsi-winst}' par les commandes suivantes:
[source,winst]
----
setloglevel=7
set $resultlist$ = loadTextFile("c:\tmp\au3.log")
setloglevel=6
----

Exemple:
[source,configfile]
----
[ExecWith_autoit_confirm]
; exact title match
Opt("WinTitleMatchMode", 3)
$mylog = FileOpen("C:\tmp\au3.log", 2)
FileWriteLine($mylog,"auto-it started - waiting for the window")
; do not use winwait(), it will fail on other desktops than current
$seconds = 0
$exists = 0
While ($seconds <= 30) and ($exists = 0)
    $exists = WinExists("Setup")
    FileWriteLine($mylog,"winexists result (1=exists): " & $exists )
    $seconds = $seconds + 1
    sleep(1000)
WEnd
FileWriteLine($mylog,"window detected - sending answer")
; say no
$result = ControlClick("Setup", "", 1)
FileWriteLine($mylog,"answer sended: result (1=success) : " & $result)
FileClose($mylog)
Sleep(500)
;and good bye
Exit
----

voir aussi: +
http://www.autoitscript.com/wiki/FAQ#Why_doesn.27t_my_script_work_on_a_locked_workstation.3F +
http://www.autoitscript.com/autoit3/docs/ +
http://www.autoitscript.com/autoit3/docs/intro/controls.htm +
http://www.autoitscript.com/autoit3/docs/functions.htm


[[opsi-getting-started-softwintegration-tutorial-analyse-and-repackage]]
===== Analyser et reconditionner

Quand un développeur de logiciel construit une configuration pour le déploiement, il connaît généralement au sujet des composantes nécessaires du logiciel qui doit être installé. Mais si quelqu'un a juste obtenu la configuration comme une boîte noire, il doit d'abord analyser ce qui fait la configuration. Cela peut être fait par le suivi des activités de configuration avec des outils appropriés (par exemple surveillance de tous les fichiers, et tous accès au Registre) ou en comparant les états du système avant et après l'installation.

Pour analyser les états avant/après , il y a beaucoup d'outils. Par exemple:

* link:http://download.fyxm.net/download-now-InstallWatch-Pro-OS-OS-Info-83813.html[InstallWatch Pro]

* link:http://www.itninja.com/media/downloads/appdeploy-repackager.msi[appdeploy-repackager]


[[opsi-getting-started-softwintegration-tutorial-deinstall]]
===== Comment désinstaller des produits

Pour désinstaller un logiciel à partir d'un ordinateur, vous avez besoin d'un script 'uninstall' pour effectuer la suppression. La difficulté fondamentale dans la suppression de logiciels est de distinguer ce qu'exactement doit être enlevée. Pas tous les fichiers fourni avec un logiciel peuvent être supprimé par la suite. Parfois, un paquet est livré avec des modules standard, qui sont également utilisés par d'autres programmes. Souvent, seul le fabricant du logiciel lui-même sait quelles parties doivent être enlevés. La configuration du fabricant pourrait offrir une option "unattended" de désinstallation qui peut être intégrée dans le script de désinstallation de OPSI. Sinon opsi-winst fournit plusieurs commandes pour la suppression des logiciels:

.En utilisant une routine de désinstallation
Si le fabricant de produits offre une option de suppression de logiciels, il doit être vérifié s'il peut être exécuté sans surveillance (en mode silencieux). S'il exige une certaine interaction avec l'utilisateur, un script autoIt combinée avec la routine de désinstallation pourrait faire le travail. La déclaration de désinstallation peut être intégré dans une section [winbatch] du script opsi-winst:
[source,winst]
----
[WinBatch_start_ThunderbirdUninstall]
"%SystemRoot%\UninstallThunderbird.exe" /ma
----

Lorsque vous utilisez un programme de désinstallation, il devrait toujours être vérifié si tous les fichiers ont été supprimés et que l'ordinateur est toujours dans un état stable.

Les produits qui sont installés par MSI viennent souvent aussi avec une option de désinstallation, qui est généralement le `msiexec.exe` paramètre `/x`. Et le paramètre `/qb-!` est pour le mode "unattended" (sans interaction de l'utilisateur). Donc, c'est la déclaration pour désinstaller sans surveillance:

[source,winst]
----
msiexec.exe /x some.msi /qb-! REBOOT=ReallySuppress
----

Au lieu du nom du package, vous pouvez aussi utiliser le GUID (Global Unique ID), avec `msiexec.exe`. Ce GUID identifie le produit dans le système et peut être trouvé dans le répertoire du registre
'HKLM\Software\Microsoft\Windows\CurrentVersion\Uninstall'

Une demande en utilisant le GUID ressemble à ceci:
[source,winst]
----
msiexec.exe /x {003C5074-EB37-4A75-AC4B-F5394E08B4DD} /qb-!
----

Si aucune de ces méthodes est disponible ou suffisante, la désinstallation peut se faire par un script opsi-winst comme décrit dans la suite:

.Commandes opsi-winst utiles pour la désinstallation

Si un produit a été installé par des fonctions opsi-winst, ou s'il n'y a pas de routine de désinstallation pour le produit, la désinstallation complète doit être faite par un script opsi-winst. opsi-winst est livré avec des fonctions puissantes de désinstallation. Dans ce chapitre, nous allons avoir un aperçu, pour des informations détaillées se référer au manuel opsi-winst.

La base de la suppression est de supprimer un ou plusieurs fichiers du système de fichiers. Cette commande peut être exécutée à partir d'une section du fichier opsi-winst:
[source,winst]
----
delete -f <nom du fichier>
----

ou de supprimer un répertoire, y compris les sous-répertoires:

[source,winst]
----
delete -sf <nom du répertoire>\
----

Le paramètre 'f' signifie 'force' – pour supprimer les fichiers de toute façon, même s'ils sont marqués comme 'read only' – et le paramètre 's' signifie y compris les 'sous-répertoires'. Un fichier ou un répertoire peut être supprimé de tous les profils utilisateur en utilisant l'option '/AllNTUserProfiles' (voir le  manuel-opsi-winst- pour plus de détails).

Les répertoires contenant les fichiers avec l'attribut 'hidden' ou 'system' peuvent être supprimés en utilisant une section 'DosInAnIcon':

[source,winst]
----
[DosInAnIcon_deleteDir]
rmdir /S /Q "<répertoire>"
----

Pour arrêter un processus en cours avant la suppression, utilisez la commande `killtask` avec le nom du processus (regardez le gestionnaire des tâches pour le nom du processus):

[source,winst]
----
KillTask "thunderbird.exe"
----

Si le produit – ou une partie – s'exécute comme un service, vous devrez arrêter le service avant la suppression des fichiers. Une façon de le faire, est de mettre le service à l'etat “inactive“ dans le registre et redémarrer l'ordinateur. Ou d'arrêter le service en utilisant la commande 'net stop', qui n'a pas besoin d'un redémarrage:
[source,winst]
----
net stop <servicename>
----

Aussi la suppression de fichiers DLL nécessite une attention particulière, car les DLL pourraient également être utilisés par d'autres produits. Il n'y a pas de concept général pour leurs manipulation.

Pour supprimer les entrées de registre avec opsi-winst vous pouvez utiliser la commande DeleteVar. Cette commande supprime les entrées de la clé actuellement ouverte:

[source,winst]
----
DeleteVar <VarName>
----

Pour supprimer une clé de registre avec tous les sous-clés et variables de registre, vous pouvez utiliser la commande DeleteKey de opsi-winst :
[source,winst]
----
DeleteKey [HKLM\Software\Macromedia]
----


[[opsi-getting-started-softwintegration-tutorial-64bit]]
===== Les problèmes connus au niveau du support 64 Bits

L'installateur OPSI {opsi-winst} est un programme 32 bits. Il n'y a pas de problème connu pour l'installation de logiciels 32 bits sur un système 64 bits à l'aide de opsi-winst. Pour l'installation de logiciel 64 bits certaines constantes, comme  '%ProgramFilesDir%' donnent des valeurs erronées.

Les nouvelles versions de {opsi-winst} ont des commandes spéciales pour traiter ces problèmes. Alors, lisez le manuel opsi-winst (link:https://download.uib.de/opsi_stable/docopsi-script-manual-en.pdf[opsi-script manual]) pour ces problèmes.


[[opsi-getting-started-softwintegration-create-opsi-package]]
=== Création d'un paquet opsi

OPSI a un format de package qui contient les fichiers d'installation, le script d'installation {opsi-winst} et les méta-données.

Les avantages essentiels de ce format sont les suivants:

* Menu simplifié, la manipulation entraîné avec le programme 'opsi-newprod'.
* Maintien de tous les méta-données dans un fichier qui est facile à modifier.
* Le menu en option guide l'installation du paquet avec les options par défaut.
* Les informations sur le paquet, y compris la version du produit, la version du paquet et des extensions personnalisées seront sauvés. Les informations sur les paquets sont stockées dans le répertoire d'installation et doivent être considérées dans le nom de paquet et dans opsi-configeditor. De cette façon, les versions de paquet différents peuvent être manipulés facilement (gestion du cycle de vie des produits).
* Pour la création et le déballage des produits les privilèges root ne sont pas requis. Les privilèges du groupe 'pcpatch' sont suffisants.

Le paquet lui-même est simplement une archive Gzip cpio compressée. Cette archive contient trois répertoires:

* `CLIENT_DATA` +
contient les fichiers qui doivent être copiés dans le répertoire du produit (`/var/lib/opsi/depot/<productid>`).

* `OPSI` +
Le fichier nommé `control` détient les méta-données du produit (comme les dépendances du produit). Les fichiers `preinst` et `postinst` seront exécutés avant et après l'installation. Toute extensions personnalisées peuvent être ajoutées ici.


[[opsi-getting-started-softwintegration-create-opsi-package-handling]]
==== Créer, compresser et décompresser un nouveau produit

Afin de créer un nouveau paquet OPSI vous devez vous connecter au serveur et faire des choses en ligne de commande. Pour ce faire à partir de Windows, vous pouvez utiliser link:http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html[putty.exe].

Les commandes essentielles pour créer et installer des paquets sont les suivants:

* `opsi-newprod`
* `opsi-makeproductfile`
* `opsi-package-manager -i <{opsi-product}-file>`

Les privilèges du groupe 'pcpatch' sont nécessaires pour créer un nouveau produit.

Vous devez créer les produits dans le répertoire `/home/opsiproducts`. Ce répertoire est également disponible en tant que part 'opsi_worbench' . Le groupe 'pcpatch' doit être propriétaire du répertoire et les permissions du répertoire sont 2770 ('set group ID' est mis pour le groupe pcpatch).

[[opsi-getting-started-softwintegration-create-opsi-package-newprod]]
===== Créer avec opsi-newprod

WARNING: Ne pas utiliser de symboles spécifiques à chaque pays (tréma), puisque les codes des pays pourraient varier pour des tables de codes différents.


Vous devriez aller dans le répertoire de produits et commencer la création du nouveau produit avec `opsi-newprod`. La question suivante est pour le type de produit à créer. Choisissez le type 'localboot' pour les produits qui doivent être installable par '{opsi-client-agent}'/'{opsi-winst}'. Le type de produit 'netboot' est utilisé pour des produits qui sont activés en tant que bootimage (comme l'installation de l'OS)

.Choisissez le type de produit: localboot
image::newprod-localboot.png["Screenshot: Choisissez le type de produit: localboot",width=400]

Confirmez votre choix avec l'onglet 'OK' (ou le bouton F12). Ensuite remplissez les paramètres de base du produit. En haut de la fenêtre il y a une explication pour les champs d'entrée.

.Entrée de l'information produit
image::newprod-product-info.png["Screenshot: Entrée de l'information produit",width=400]

Product Id:: est un nom distinct courte pour le produit, indépendant de la version du produit (nous vous conseillons d'utiliser uniquement des lettres ASCII et '-', aucun espace blanc, pas de caractères spéciaux)

Product name:: est le nom complet du produit

Description:: est une description supplémentaire du produit.

Advice:: quelques informations supplémentaires sur la manipulation du produit (une note).

Product version:: est la version du paquet logiciel (max 32 caractères).

Package Version:: est la version du package pour la version du produit. Cela permet de différer les paquets avec la même version produit mais avec par exemple un script '{opsi-winst}' modifié.

License required:: n'est pertinente que pour les produits netboot.

Priority:: contrôle la séquence d'installation. Les valeurs possibles sont entre 100 (au tout début) et -100 (à la fin). Note: les dépendances de produits ont également une influence sur la séquence d'installation. Voir le manuel d'OPSI pour plus de détails.

Lorsque l'information de produit est complète, veuillez specifier lequel scripts d'action devraient être fournis:

.Entrée des noms de script {opsi-winst} pour les différentes actions
image::newprod-script-names.png["Screenshot: Entrée des noms de script {opsi-winst} pour les différentes actions",width=400]

Après avoir édité l'information produit, vous devez mentionner le script que vous souhaitez utiliser pour différentes activités.

Habituellement *+Setup script+* est nommé `setup.ins`

Habituellement *+Uninstall script+* est nommé `uninstall.ins`

Un *+Update-Script+* sera utilisé pour des changements mineurs sur les grands installations existantes. Si ce produit est commuté sur l'action demandée 'setup', le script update sera exécuté après le script de configuration, automatiquement.

Un *+Always-Script+* sera exécuté à chaque démarrage de '{opsi-client-agent}' (par exemple à chaque démarrage).

Un *+Once-Script+* a l'état résultant `not_installed`. C'est un genre très spécial de script et vous ne devriez l'utiliser que si vous savez vraiment ce que vous faite.

Un *+Custom-Script+* ne change d'état résultant ni d'actions résultant. C'est un genre très spécial de script et vous ne devriez l'utiliser que si vous savez vraiment ce que vous faite.

A *+userLoginScript+* est utilisé pour modifier le profile des utilisateurs après que l'utilisateur s'est connecté au système. Il fonctionne uniquement avec l'extension opsi 'Roaming Profile Support' qui est décrit au chapitre 'Roaming Profile Support' du manuel d'opsi.


|=======================
| Type | état résultant | actions résultant
| setup | installé | aucune
| uninstall | pas installé | aucune
| update | installé | aucune
| always | installé | toujours
| once | pas installé | aucune
| custom | _inchangée_ | _inchangée_
| User login | _inchangée_ | _inchangée_
|=======================

L'étape suivante consiste à définir un ou plusieurs dépendances du produit. S'il n'y a pas de dépendances des produits mettre 'No'.

.Créer des dépendances au produit: No/Yes
image::newprod-product-new-dependency.png["Screenshot: Créer des dépendances au produit: No/Yes",width=400]

Pour créer une dépendance au produit insérer les données suivantes (l'aide est disponible dans le haut de la fenêtre):

Dependency for Action:: Pour quel action du produit la dépendance sera créé (configuration, désinstaller ...).

Required product id:: Identifiant du produit du produit requis.

Required product class id:: Pour une utilisation future, le laisser vide!

Required action:: Sélectionnez l'action requise (le cas échéant) pour le produit demandé. Les actions peuvent être 'setup', 'deinstall', 'update'. Si aucune 'action requise' est définie, un 'required installation status' doit être défini

Required installation status:: Sélectionnez le statut requis du produit requis (le cas échéant). Habituellement, cela est 'installed'. Ainsi, le produit nécessaire sera installé ,s'il n'est pas encore installé, sur le client. Si aucune 'required installation status' est défini, un 'required action' doit être défini

Requirement type:: C'est ce qui concerne ​​l'ordre d'installation. Si le produit requis doit être installé avant l'installation du produit actuel, ce réglage est à 'before'. S'il doit être installé après le produit actuel, définir 'requirement type' à 'after'. Laissez vide si l'ordre d'installation n'a pas d'importance.

NOTE: La possibilité de définir des actions de désinstallation ou de dépendance est cassé.
Après la définition d'une dépendance au produit vous sera demandé si vous souhaitez créer une autre dépendance au produit. Si vous choisissez 'Yes', la procédure de définition d'une dépendance au produit est répété; si vous choisissez 'No' il vous sera demandé de définir certaines propriétés du produit, ce qui signifie la définition de commutateurs supplémentaires pour la personnalisation du produit.

NOTE: La séquence d'installation résulte d'une combinaison des dépendances du produit et des priorités du produit. Pour en savoir plus sur la façon dont cela est fait et ce que vous pouvez configurer voir au manuel opsi.

.Une (autre) propriété de produit à créer?
image::newprod-new-property.png["Screenshot:  Une (autre) propriété de produit à créer?",width=400]

Si vous répondez 'Yes' vous aurez à décrire les propriétés du produit.

Les propriétés du produit sont spécifiques du client et sont un nom (clé) qui peut contenir des valeurs différentes. Ces valeurs peuvent être évaluées par le script '{opsi-winst}' et aboutir à installer différentes options au moment de l'installation.

Au début, nous avons à déclarer si notre propriété est une valeur texte ('unicode') ou une valeur logique par exemple vrai/faux ('boolean'). Si vous ne savez pas choisissez 'unicode'.


.Choisissez le type de données de la propriété
image::newprod-property-type.png["Screenshot: Choisissez le type de données de la propriété",width=400]

Ensuite une description de l'interrupteur doit être spécifié. Cette description sera indiqué dans 'opsi-configeditor' comme un texte d'aide et aussi au déballage du paquet. Ensuite, vous pouvez définir l'ensemble des valeurs de l'interrupteur (séparés par des virgules). Si cela est laissé vide, toute valeur est permise pour le commutateur.

.Description des propriétés du produit
image::newprod-property-desc.png["Screenshot: Description des propriétés du produit",width=400]

Dans la suite, vous pouvez définir la valeur par défaut de la propriété du produit (commutateur).

.La valeur par défaut de la propriété du produit
image::newprod-property-default.png["Screenshot: La valeur par défaut de la propriété du produit",width=400]

Si vous choisissez le type de données 'boolean', la description ne contient que  'Property name' et 'Property description'.

.Description de la propriété booléenne
image::newprod-property-boolean.png["Screenshot: Description de la propriété booléenne",width=400]

Après avoir défini une propriété du produit, il vous sera demandé si vous souhaitez créer une autre propriété du produit. Si vous choisissez 'Yes' la procédure de définition d'une propriété est répétée; si vous choisissez 'No', il vous sera demandé le nom et l'email du responsable du produit. Ces données seront écrites sur le ficher des modifications.

.Entrée des données du mainteneur
image::newprod-maintainer.png["Screenshot: Entrée des données du mainteneur",width=400]

Maintenant, les définitions de base pour le nouveau produit sont faites.

En utilisant la commande list (`ls`) vous pouvez voir la structure de répertoire tel que décrit ci-dessus. Allez au repertoire `OPSI` et lister le contenu. Le fichier `control` contient maintenant les données que vous avez défini et vous pouvez charger le fichier dans un éditeur pour afficher ou modifier les entrées.

.Exemple d'un fichier `control`:

[source,configfile]
----
[Package]
version: 1
depends:
incremental: False

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice:
version: 3.14
priority: 10
licenseRequired: False
productClasses:
setupScript: setup.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:
customScript:
userLoginScript:

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----

Comme prochaine étape, vous devrez copier le script de produits '{opsi-winst}' et les fichiers de données nécessaires dans le dossier `CLIENT_DATA`.

Donc, si le script que vous avez écrit est dans `c:\test` pour le moment il vous suffit de monter le partage '\\<opsiserver\opsi_workbench' par exemple à 'w:' et copier le contenu complet de `c:\test` dans le répertoire 'CLIENT_DATA'.

[[opsi-getting-started-softwintegration-create-opsi-package-makeproductfile]]
===== Construire un paquet avec opsi-makeproductfile

Ensuite vous pouvez construire le paquet. Allez dans le répertoire racine du produit et démarrez 'opsi-makeproductfile'. Le paquet du produit sera construit.

Le paquet qui en résulte peut être installé sur {opsi-server} avec la commande +
`opsi-package-manager -i <nom du paquet>`.

`opsi-makeproductfile` peut être démarré avec différentes options:

[source,shell]
----
#  opsi-makeproductfile --help

Usage: opsi-makeproductfile [-h] [-v|-q] [-F format] [-l log-level] [-i|-c custom name] [-I required version] [-t temp dir] [source directory]
Provides an opsi package from a package source directory.
If no source directory is supplied, the current directory will be used.
Options:
   -v          verbose
   -q          quiet
   -l          log-level 0..9
   -n          do not compress
   -F          archive format [tar|cpio], default: cpio
   -h          follow symlinks
   -I          incremental package
   -i          custom name (add custom files)
   -c          custom name (custom only)
   -C          compatibility mode (opsi 3)
   -t          temp dir
----

Utilisez l'option '-C' (mode de compatibilité pour opsi 3) pour construire un paquet sur un serveur opsi 4 qui doivent être installables aussi bien sur un serveur opsi 3.

S'il y a déjà un fichier de package avec les mêmes informations de version, opsi-makeproductfile demandera une confirmation d'écrasement:

[source,shell]
----
Package file '/home/opsiproducts/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----
Choisir 'o' écrasera, 'c' avortera et 'n' va demander des informations sur la nouvelle version.

Le package créé peut être installé dans {opsi-server} avec la commande: +
`opsi-package-manager -i <nom du paquet>`

Pour plus d'informations sur opsi-package-manager voir le manuel d'opsi.

[[opsi-getting-started-more-info]]
== En savoir plus
Vous trouverez beaucoup d'informations plus détaillées dans le manuel d'opsi.

Si vous avez besoin d'aide durant l'évaluation vous en aurez dans https://forum.opsi.org

Pour les installations de production, nous vous recommandons notre support commercial:
http://www.opensides.be/slideshow/fr/offre-de-maintenance-et-de-soutien-de-opensides



