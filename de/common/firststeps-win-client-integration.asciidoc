[[firststeps-software-deployment-client-integration]]
=== Integration vorhandener Windows-Clients in opsi

Um vorhandene Windows-Clients in opsi aufzunehmen, muss auf diesen der {opsi-client-agent} installiert werden.
Dies kann auf mehrere Arten durchgeführt werden.
Nachdem Sie, wie im Folgenden beschrieben, den {opsi-client-agent} installiert haben, erscheint der Client auch in der Client-Liste des {opsi-configed}, sofern Sie ihn dort noch nicht hinzugefügt hatten.

[[firststeps-software-deployment-client-integration-service-setup]]
Grundsätzlich gibt es die Möglichkeit die Installation des Agents <<firststeps-software-deployment-client-integration-oca-installer,auf dem Client auszuführen>> oder <<firststeps-software-deployment-client-integration-opsi-deploy,vom Server aus>> die Installation anzustoßen.

Das Ausführen der Installation direkt auf dem Client eignet sich für einzelne Rechner.
Für einen Massen-Rollout des Agents eignet sich <<firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>.
Falls bereits eine andere Möglichkeit existiert Software zu verteilen, so ist es ebenfalls möglich darüber den opsi-client-agent zu verteilen.

Sobald der Agent installiert ist, können vorhandene opsi-Produkte auf diesen Clients <<firststeps-software-deployment-product-tests,installiert>> werden.

[[firststeps-software-deployment-client-integration-oca-installer]]
==== Verwendung des opsi-client-agent-installer auf Windows


include::../common/firststeps-oca_installer.asciidoc[]

Die nachfolgend beschriebenen Methoden: service_setup / silent_setup dienen nur noch zur Abwärtskompatibilität zu opsi 4.1 und den entsprechenden opsi-client-agent Versionen 4.1. Bitte verwenden Sie soweit möglich <<firststeps-software-deployment-client-integration-oca-installer,den opsi-client-agent Installer>>.

[[firststeps-software-deployment-client-integration-service-setup_nt6]]
==== Verwendung von service_setup.cmd auf Windows NT6 (Veraltet)

Die hier beschriebene Methode dient nur noch zur Abwärtskompatibilität zu opsi 4.1 und den entsprechenden opsi-client-agent Versionen 4.1. Bitte verwenden Sie soweit möglich <<firststeps-software-deployment-client-integration-oca-installer,den opsi-client-agent Installer>>.

. Loggen Sie sich mit administrativen Rechten auf dem Client ein.
. Mounten Sie den share `\\<opsiserver>\opsi_depot` auf einen Laufwerksbuchstaben.
. Starten Sie das Script `opsi-client-agent\service_setup.cmd` +
Starten Sie da Script nicht elevated (also rechte Maustaste: 'als Administrator') sonst kann das Script evtl. nicht gestartet werden, da eine elevated Prozess kein Zugriff auf ein Netzlaufwerk hat.
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script (winst32.exe) elevated. Daher bekommen Sie an dieser Stelle evtl. eine UAC Anfrage.
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client rebootet nach der Installation.

////
[[firststeps-software-deployment-client-integration-service-setup_nt5]]
==== Verwendung von service_setup.cmd auf Windows NT5 (Veraltet)

Die hier beschriebene Methode dient nur noch zur Abwärtskompatibilität zu opsi 4.1 und den entsprechenden opsi-client-agent Versionen 4.1. Bitte verwenden Sie soweit möglich <<firststeps-software-deployment-client-integration-oca-installer,den opsi-client-agent Installer>>.

. Loggen Sie sich mit administrativen Rechten auf dem Client ein.
. Mounten Sie den share `\\<opsiserver>\opsi_depot` auf einen Laufwerksbuchstaben.
. Starten Sie das Script `opsi-client-agent\service_setup_NT5.cmd`
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script (winst32.exe).
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist.

CAUTION: Der Client rebootet nach der Installation.
////

[[firststeps-software-deployment-client-integration-opsi-deploy]]
==== Verwendung von opsi-deploy-client-agent

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.

Voraussetzung hierfür sind bei den Clients:

* ein offener c$ share
* ein offener admin$ share
* ein administrativer account
* keine oder eine nicht interferierende Antivirus-Lösung bei Benutzung der `winexe`

Auf dem Server muss das Programm `winexe` vorhanden sein.
Diese ist Teil des Pakets `opsi-windows-support`.

Das `opsi-deploy-client-agent` Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation.

Das Kopieren der Installationsdateien kann auf zwei Wegen geschehen.
Die erste Variante wird mittels 'mount' C$ auf dem Server verfügbar machen und dort die Daten zur Installation hin kopieren.
Die zweite Variante wird den c$-Share des Clients mittels 'smbclient'
auf dem Server einhängen und dann die Installationsdateien dorthin
kopieren.

Mit dem `opsi-deploy-client-agent` Skript kann auch eine ganze Liste von Clients bearbeitet werden.
Dazu können entweder beliebig viele Clients als letzter Parameter übergeben werden oder mit der Option '-f' die Clients aus einer Datei eingelesen werden.
Bei der Verwendung einer Datei, muss in jeder Zeile ein Client stehen.

Das Script kann mit IP-Adressen, Hostnamen und FQDNs arbeiten. Es wird versuchen automatisch zu erkennen welche Art von Adresse übergeben wurde.

Mögliche Parameter können Sie mit dem Parameter `--help` in Erfahrung bringen:
[source,prompt]
----
opsi_server:/home/user# cd /var/lib/opsi/depot/opsi-client-agent
opsi_server:/var/lib/opsi/depot/opsi-client-agent# ./opsi-deploy-client-agent --help
usage: opsi-deploy-client-agent [-h] [--version] [--verbose]
                                [--debug-file DEBUGFILE] [--username USERNAME]
                                [--password PASSWORD]
                                [--use-fqdn | --use-hostname | --use-ip-address]
                                [--ignore-failed-ping]
                                [--reboot | --shutdown | --start-opsiclientd]
                                [--hosts-from-file HOSTFILE]
                                [--skip-existing-clients]
                                [--threads MAXTHREADS] [--smbclient | --mount]
                                [--keep-client-on-failure | --remove-client-on-failure]
                                [host [host ...]]

Deploy opsi client agent to the specified clients. The c$ and admin$ must be
accessible on every client. Simple File Sharing (Folder Options) should be
disabled on the Windows machine.

positional arguments:
  host                  The hosts to deploy the opsi-client-agent to.

optional arguments:
  -h, --help            show this help message and exit
  --version, -V         show program's version number and exit
  --verbose, -v         increase verbosity (can be used multiple times)
  --debug-file DEBUGFILE
                        Write debug output to given file.
  --username USERNAME, -u USERNAME
                        username for authentication (default: Administrator).
                        Example for a domain account: -u
                        "<DOMAIN>\\<username>"
  --password PASSWORD, -p PASSWORD
                        password for authentication
  --use-fqdn, -c        Use FQDN to connect to client.
  --use-hostname        Use hostname to connect to client.
  --use-ip-address      Use IP address to connect to client.
  --ignore-failed-ping, -x
                        try installation even if ping fails
  --reboot, -r          reboot computer after installation
  --shutdown, -s        shutdown computer after installation
  --start-opsiclientd, -o
                        start opsiclientd service after installation
  --hosts-from-file HOSTFILE, -f HOSTFILE
                        File containing addresses of hosts (one per line).If
                        there is a space followed by text after the address
                        this will be used as client description for new
                        clients.
  --skip-existing-clients, -S
                        skip known opsi clients
  --threads MAXTHREADS, -t MAXTHREADS
                        number of concurrent deployment threads
  --smbclient           Mount the client's C$-share via smbclient.
  --mount               Mount the client's C$-share via normal mount on the
                        server for copying the files. This imitates the
                        behaviour of the 'old' script.
  --keep-client-on-failure
                        If the client was created in opsi through this script
                        it will not be removed in case of failure. (DEFAULT)
  --remove-client-on-failure
                        If the client was created in opsi through this script
                        it will be removed in case of failure.
----
