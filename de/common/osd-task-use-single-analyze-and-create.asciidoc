[[opsi-setup-detector-use-single-analyze-and-create]]
===== opsi-setup-detector: Analysiere eine Datei und erzeuge ein opsi Paket

Im folgenden wird der Ablauf anhand des Punktes `Analysiere eine Datei und erzeuge ein opsi Paket` erläutert.

.opsi-setup-detector Start
image::osd_page_start_de.png["Startpage", pdfwidth=90%]

Nach der Auswahl der Aufgabe erscheint ein Dateiauswahl-Dialog zur Auswahl der zu analysierenden Setup Datei. Nach der Auswahl beginnt direkt die Analyse.

[[opsi-setup-detector-use-single-analyze]]
===== opsi-setup-detector: Analyse


.opsi-setup-detector Analyse
image::osd_page_analyze_de.png["Analyse", pdfwidth=90%]

War die Analyse nicht erfolgreich, endet sie hier mit `Sorry unknown Installer`.

image::osd_unknown_select_installer.png["Sorry unknown Installer", pdfwidth=40%]
In diesem Dialog kann gewählt werden, ob die Erzeugung abgebrochen wird, oder ob die Erzeugung nach dem Muster eines wählbaren bekannten Installerstyps fortgesetzt werden soll.

Bei einer erfolgreichen Analyse wird direkt zum Ergebnis gewechselt.

.opsi-setup-detector Ergebnis der Analyse
image::osd_page_setup1_de.png["Ergebnis der Analyse", pdfwidth=90%]

* *Erkannter Setup Typ:* Typ des erkannten Installer

* *MST allowed:*

* *Link* mit Infos zum Installer

* *Setup Datei:*  Pfad und Name der analysierten Setup-Datei

* *MST Datei:*  Bei MSI-Installern oder Installern welche MSI enthalten, kann hier eine MST-Datei angegeben werden welche in den MSI Aufruf integriert wird.

* *MsiId:*  Bei MSI-Installern oder Installern welche MSI enthalten, der MSI-Produktcode

* *Software Version:*  Die Version der zu installierenden Software soweit ermittelbar

* *Setup Datei Größe MB:*  Größe der Setup Datei in MB

* *Benötigter Platz MB:*  Dieser Wert ist eine Schätzung aus sechsmal die Größe der Setup-Datei und kann gegebenenfalls angepasst werden

* *InstallDir:*  Soweit erkannt das Verzeichnis in das die Software installiert werden wird

* *Unattended Installationskommando:*  Das ermittelte Kommando zu einer nicht interaktiven Installation

* *Unattended Deinstallationskommando:*  Das ermittelte Kommando zu einer nicht interaktiven Deinstallation

* *Deinstallations Programm:*  Das ermittelte Deinstallations Programm

Die hier ermittelten Werte können nun bei Bedarf korrigiert oder ergänzt werden.
Der Button `Nächster Schritt` führt zur ersten Seite der Produktkonfiguration.
Hier werden die Metadaten des zu erstellenden opsi Produktes eingegeben.

CAUTION: Die hier ermittelten Werte können falsch sein und sind wahrscheinlich unvollständig ! +
Nach einer ersten Installation sollten Sie unbedingt die Werte von *InstallDir*,
*Deinstallations Programm* und *Software Version* überprüfen und gegebenenfalls in Ihrem Script anpassen.

[[opsi-setup-detector-product-configuration1]]
===== opsi-setup-detector: Produktkonfiguration 1

.opsi-setup-detector Produktkonfiguration 1
image::osd_page_product1_de.png["Produktkonfiguration 1", pdfwidth=90%]

* *opsi Product ID:* dies ist der Name des zu erzeugenden opsi Paketes und wird aus dem weiter unten stehenden Produkt Namen erzeugt, wobei Leerzeichen und andere ungültigen Zeichen durch ein '-' ersetzt werden. Die vorgeschlagene opsi Product ID kann natürlich geändert werden.

* *Produkt Name:* der Name der zu installierenden Software. Dieser muss evtl. händig korrigiert werden

* *Produkt Version:* die aus dem Name der Setup-Datei ermittelte Versionsnummer muss wahrscheinlich händig korrigiert werden. Sie darf nur Ziffern und Punkte enthalten, da sie für die Versionierung des opsi Paketes verwendet wird.

* *Beschreibung:* In diesem Feld wird als Vorgabe der Produkt Name vorgegeben und sollte mit weiteren Hinweisen ergänzt werden, die dann als Produktbeschreibung des opsi Paketes gesetzt werden.

* *Lizenz pflichtig:* Wenn dieses Häkchen gesetzt wird, wird beim Patchen des opsiscripts '$LicenseRequired$=true' gesetzt.

[[opsi-setup-detector-product-configuration-priority_dependecy]]
===== opsi-setup-detector: Priorität und Abhängigkeiten

.opsi-setup-detector Produktkonfiguration 2
image::osd_page_product2_de.png["Produktkonfiguration 2", pdfwidth=90%]

*Für normale Anwendungssoftware müssen Sie hier nichts tun,
da die Voreinstellungen 'passen'. Sie können auf den Button `Nächster Schritt` drücken.*

Ansonsten sei hier erläutert, welche Einstellungen hier möglich sind:

Priorität:: beeinflusst die Installationsreihenfolge. *Empfohlen für Anwendungssoftware: 0* +
Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge.

*Abhängigkeiten*

Hier können Abhängigkeiten zwischen Podukten definiert werden. +
Wenn in der Konfiguration die Zugangsdaten zu Ihrem opsi-server hinterlegt sind, so wird versucht eine Verbindung zum opsi-server aufzubauen. Wenn das Passwort aus Sicherheitsgründen nicht hinterlegt ist, wird hier nach dem Passwort gefragt: +

image::osd_password_dlg.png["Password Dialog", pdfwidth=40%]


.opsi-setup-detector Dependency Editor
image::osd_dependency_editor.png["Dependency Editor", pdfwidth=40%]

Productid:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht. +
Wenn es eine Verbindung zum opsi-server gibt, so wird dies hier in grüner Schrift angezeigt und die bekannten `productIds` können über das Auswahlfeld gewählt werden. Gibt es keine Verbindung zum opsi-server, so wird dies in roter Schrift angezeigt und die `productId` muss eingegeben werden.

Abhängigkeits Modus:: Sie können entweder die *Aktion* +setup+ anfordern oder (siehe unten) den *Status* (+installed+).

Aktion oder Status:: Für *Status*: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (+installed+). Liegt ein anderer Status vor, so wird das Produkt auf +setup+ gestellt. +
Für *Aktion*: Aktionsanforderung welche bei dem Produkt, zu dem eine Abhängigkeit besteht, gesetzt werden soll (+setup+) +
Bei der Erzeugung eines `Meta Produkts` ist dieser Bereich disabled um unsinnige Einstellungen zu vermeiden.

Abhängigkeits Typ:: Installationsreihenfolge. Wenn das Produkt, zu dem eine Abhängigkeit besteht, installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann, dann ist dies +before+. Muss es nach dem aktuellen Produkt installiert werden so ist dies +after+. Ist die Reihenfolge egal so muss hier nichts eingetragen werden. +
Bei der Erzeugung eines `Meta Produkts` ist dieser Bereich disabled um unsinnige Einstellungen zu vermeiden.

*Hinweis:*

Leider gibt es derzeit keinen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-) setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

[[opsi-setup-detector-product-configuration-properties]]
===== opsi-setup-detector: Properties

Hier können veränderbare Eigenschaften (Produktvariablen) für das Produkt definiert werden.

.opsi-setup-detector Property Editor
image::osd_property-editor.png["Property Editor", pdfwidth=40%]



[cols="10,20,20"]
|==========================
|  Feld / Funktion  |  Beschreibung  |  Hinweise
|  Property Name  |  Name der Produktvariable  |
Dieser Bezeichner wird in der Produktkonfiguration im opsi-configed angezeigt und ist innerhalb der Skripte mit der Funktion `GetProductProperty` auslesbar.
|  Property Type  |  Variablentyp  |  Mögliche Werte: `Text` / bool
|  Multivalue  |  Bestimmt, ob die Produktvariable nur genau einen oder mehrere Werte annehmen kann  |  Nur bei Typ `Text` verfügbar
|  Editierbar  |  Bestimmt, ob die Vorgabewerte mit neuen oder zusätzlichen Werten überschrieben werden können oder nicht  |  Nur bei Typ `Text` verfügbar
|  Beschreibung  |  Beschreibung der Variablenfunktion  |  Wird im opsi-configed als Tooltip angezeigt
|  Possible Werte  |  Komma-separiert Liste der möglichen Eingabewerte  |
Falls Editierbar auf “True” gesetzt wurde, kann die Liste später innerhalb von opsi-configed ergänzt werden. +
Nur bei Typ `Text` verfügbar
|  Default Wert  |  Vorgabewert  |  Auswahlliste;
Nur bei Typ `Text` verfügbar: Freitextfeld.
Nur bei Typ Multivalue verfügbar: Mehrfachauswahl
|==========================

[[opsi-setup-detector-product-configuration-icon]]
===== opsi-setup-detector: Produkt Icon

.opsi-setup-detector Produktkonfiguration 3 (Icon)
image::osd_page_producticon_de.png["Produktkonfiguration 3 (Icon)", pdfwidth=90%]

Hier kann ein Icon für die Anzeige während der Installation ausgewählt werden oder Sie übernehmen mit `Nächster Schritt` das DefaultIcon (Zahnrad) und wechseln zum nächsten Reiter.. +


Um ein anderes Icon auszuwählen wählen Sie über den Button `Öffne Icon Verzeichnis` in Verzeichnis aus in dem Sie Icons erwarten. Als Vorauswahl bekommen Sie einbeim `opsi-setup-detector` mitgeliefertes Verzeichnis von 'open source' Icons: 128x128. Wählen Sie ein Unterverzeichnis und die Icons werden angezeigt. +
Nun können Sie aus der Anzeige ein Icon auswählen.

Nachdem die Produktkonfiguration vollständig ist, kann nun das Produkt erzeugt werden.

[[opsi-setup-detector-product-create]]
===== opsi-setup-detector: Produkt erzeugen


.opsi-setup-detector Produkt erzeugen
image::osd_page_create_de.png["Produkt erzeugen", pdfwidth=90%]

* `Pfad zur opsi-workbench` ist ein Laufwerksbuchstabe oder UNC Pfad auf dem der share `opsi_workbench` Ihres opsi-servers gemounted ist.

* Links neben dem Button `opsi Paket erstellen` befinden sich drei mögliche Auswahl Optionen, die sich auf die Funktion des Buttons beziehen:

* `Erstellungs Modus` ist ein Auswahlbereich bei dem die Vorgänge bei der Paketerstellung bestimmt werden können:

* `Erstelle opsi Produkt Dateien` erzeugt falls noch nicht vorhanden, den Verzeichnisbaum für das neue opsi Paket auf der gewählten `opsi-Workbench`. Die für das Pakte benötigten Dateien werden erzeugt bzw. kopiert.

* `Erstelle opsi Produkt Dateien und baue opsi Paket` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `opsi-package-builder` aufgerufen um aus dem erstellen Verzeichnisbaum das opsi-Paket zu erstellen. Die genauen Abläufe werden dabei durch das Auswahlfeld `Bau Modus` bestimmt:

** `nur bauen` startet den `opsi-package-builder` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket und beendet den `opsi-package-builder` nach getaner Arbeit wieder.

** `bauen und installieren` startet den `opsi-package-builder` ohne interaktive GUI, erstellt aus dem Verzeichnisbaum per Server Befehl `opsi-makepackage` ein opsi Paket installiert das Paket per Server Befehl `opsi-package-manager` und beendet den `opsi-package-builder` nach getaner Arbeit wieder.

* `Erstelle opsi Produkt Dateien und starte interaktiven Packagebuilder` führt die im ersten Punkt angeführten Vorgänge durch. +
Zusätzlich wird der `opsi-package-builder` interaktiv aufgerufen. +
Sie müssen diesen selbst beenden um zu dem `opsi-setup-detector` zurückzukehren
Zu Installation, Konfiguration und Bedienung des Community Projektes `opsi-package-builder` siehe https://forum.opsi.org/viewforum.php?f=22

* `opsi Paket erstellen` ist der Button welcher die Paketerstellung veranlasst. +
Ist bereits ein Paket mit diesem Namen vorhanden, so erscheint eine Rückfrage ob die Dateien im vorhandene Verzeichnis gesichert oder gelöscht werden sollen:

image::osd_overwrite_dlg.png["Backup Dialog", pdfwidth=40%]

