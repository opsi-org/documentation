
[[opsi-softwintegration-tutorial-create-and-test-script]]
==== Testen und verbessern eines {opsi-script} Skriptes

Zum Testen und Verbessern eines Scriptes / Produktes gibt es zwei verschiedene Varianten:

* Testen des erstellten Scriptes 'Standalone' also ohne es auf dem opsi-server zu installieren und es von dort auf den Client auszurollen

* 'Integrierte' Tests des kompletten Produktes mit Installation auf dem Server und Ausrollen auf einem Client

In beiden Fällen gehen wir hier davon aus, das Sie ein Projekt mit dem _opsi-setup-detector_ erstellt haben.

[[opsi-softwintegration-tutorial-create-and-test-script-standalone]]
===== 'Standalone' Tests

Starten Sie die Anwendung {opsi-script-gui}: per Doppelklick.

* Windows: Die Datei `opsi-script.exe` per Doppelklick. +
(Beim Starten des Programms auf einem Windows 7 / 10 Client muss "ausführen als Administrator" über die rechte Maustaste verwendet werden.) Wenn der _opsi-client-agent_ bereits auf Ihrem Rechner installiert ist, finden Sie diese unter `C:\Program files (x86)\opsi.org\opsi-client-agent\opsi-script\opsi-script.exe`
Wenn nicht, kopieren Sie sich vom share `\\<opsiserver\opsi_depot`, aus dem Verzeichnis `opsi-script\windows\x86\` den Inhalt des  Verzeichnises.

* Linux: Starten sie Datei `/usr/bin/opsi-script`

* MacOS: Starten sie die Anwendung `/Applications/opsi-script`

Sie sehen dann folgendes Fenster:

.{opsi-script-gui} im interaktiven Modus
image::winst-interaktiv.png["Screenshot: {opsi-script-gui} im interaktiven Modus", pdfwidth=90%]

* Über _Select Script_ können Sie das Skript auswählen, dass Sie ausführen möchten.

* Mit _Start_ können Sie das Script starten. Dabei wird das Script auf diesem Rechner ausgeführt.


* Öffnen Sie nun mit dem _opsi-logviewer_ die Log-Datei an, um nachzuvollziehen, wie der {opsi-script} das Skript interpretiert. +
Achten Sie dabei darauf, das Sie hier mit dem Schieberegler rechts unten den angezeigten Loglevel einstellen können.

* Öffenen Sie das Script `setup.opsiscript` in einem Editor und führen Sie gewünschte Änderungen durch (Speichern nicht vergessen). Dazu gibt es mehrere Möglichkeiten:

** Öffnen Sie das Projekt im _{opsi-package-builder}_ und öffnen von dort den Editor.

** Im Prinzip können Sie auch jeden anderen beliebigen Editor verwenden. +
Wir empfehlen den Editor 'jEdit' mit {opsi-script} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.



.jEdit mit einem opsi script
image::jedit-with-winst-script.png["jEdit with a opsi script", pdfwidth=90%]



* Sie können nun das Skript im Editor anpassen und speichern (Sie können den Editor geöffnet lassen). +
Wechseln Sie zum {opsi-script}-Fenster und starten Sie das Skript erneut über den Knopf 'Start' (das Skript muss nicht neu ausgewählt werden). +
Schauen Sie sich das auf Basis Ihrer Änderungen im Skript veränderte Log über _opsi-logviewer_ an. (_Neu laden_ über Kontext Menü oder Button in der Symbolleiste nicht vergessen).

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Skript ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.

Hinweise zur Lösung von Detail-Problemen finden Sie im nächsten Kapitel.
Im übernächsten Kapitel wird erklärt, wie Sie aus den so erstellten Skripten ein opsi-Produkt erstellen, das Sie auf dem {opsi-server} installieren können.

[[opsi-softwintegration-tutorial-create-and-test-script-integrated]]
===== 'Integrierte' Tests

Bei den 'integrierten Test' wird immer gleich das ganze Projekt per opsi auf einem Testclient ausgeführt. Gehen Sie dazu wie folgt vor:

* Öffnen Sie das Script `setup.opsiscript` in einem Editor und führen Sie gewünschte Änderungen durch (Speichern nicht vergessen). Dazu gibt es mehrere Möglichkeiten:

** Öffnen Sie das Projekt im _{opsi-package-builder}' und öffnen von dort den Editor.

** Im Prinzip können Sie auch jeden anderen beliebigen Editor verwenden. +
Wir empfehlen den Editor 'jEdit' mit {opsi-script} Syntax-Highlighting, wie Sie ihn in der Grundausstattung der opsi-Produkte finden.

* Produkt Packen

** Variante 1: Öffnen Sie das Projekt im _{opsi-package-builder}_ und starten Sie das Packen über den Button _Packen_.

** Variante 2: Melden Sie sich per Terminal (z.B. Putty) auf dem opsi-server an und wechseln Sie in das Projektverzeichnis auf der Workbench. Packen Sie das Produkt per Befehl `opsi-makepackage`.

* Produkt auf dem opsi-server installieren.

** Variante 1: Starten Sie das Installieren im _{opsi-package-builder}_ über den Button _Installieren_.

** Variante 2: Starten Sie das Installieren im Terminal im Projektverzeichnis mit dem Befehl `opsi-package-manager -i <myproctid_version.opsi>`. Dabei ist <myproctid_version.opsi> der Dateiname der im vorherigen Schritt beim packen ausgegeben wurde.

* Produkt über _opsi-configed_ auswählen und starten

. Im Tab _Clients_ den Testclient auswählen

. Im Tab _Produktkonfiguration_ das Produkt auswählen. Sollte das Produkt nicht sichtbar sein (was nach dem ersten Installieren normal ist) einmal über das Menü 'Datei / Alle Daten neu laden' bzw. den Button ganz links in der Symbolleiste die Daten neu laden

. Für das gewählte Produkt die Aktionsanforderung _setup_ setzen und speichern.

. Den Client starten oder bei laufenden Client per Kontextmenü _on_demand_ starten.

. Abwarten bis das Produkt auf dem Client durchgelaufen ist.

- Im Tab 'Logfiles / instlog' die Log-Datei inspizieren, um nachzuvollziehen, wie der {opsi-script} das Skript interpretiert. +
Achten Sie dabei darauf, das Sie hier mit dem Schieberegler rechts unten den angezeigten Loglevel einstellen können.

* Auf diese Art und Weise, also über die Wiederholung der Punkte: +
 - Anpassung des Skriptes und speichern +
 - Produkt packen +
 - Produkt auf dem Server installieren +
 - Produkt auf dem Client ausführen +
 - Log überprüfen +
können Sie nach und nach Ihre Skripte so anpassen, dass sie das tun, was Sie wünschen.



[[opsi-softwintegration-create-opsi-package-makeproductfile]]
==== Packen mit opsi-makepackage

Danach können Sie das Produkt packen. Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie 'opsi-makepackage' auf. Es wird nun das Produkt gepackt.

Es ist zu empfehlen die Pakete gleich mit einer zugehörigen md5-Prüfsummendatei zu erstellen.
Diese Datei wird unter anderem vom `opsi-package-updater` genutzt, um nach der Paketübertragung die Paketintegrität sicher zu stellen.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Bei der Übertragung von Paketen auf {opsi-depotserver} kann auf 'zsync' zurück gegriffen werden, um nur Unterschiede zwischen verschiedenen Paketen zu übertragen.
Damit dieses Verfahren verwendet werde kann, wird eine Datei besondere `.zsync`-Datei benötigt.
Eine solche Datei wird automatisch erstellt, aber für besondere Einsatzszenarien kann die Erstellung unterdrückt werden.

Wenn es beim Erstellen großer Pakete zu Platzproblemen im temporären Verzeichnis `/tmp` kommt, ist es möglich mittels `--temp-directory` ein abweichendes temporäres Verzeichnis anzugeben.

Wenn schon ein Paket dieser Version existiert, so zeigt `opsi-makepackage` eine Rückfrage:

[source,prompt]
----
Package file '/var/lib/opsi/workbench/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

Mit `o` wählen Sie überschreiben, mit `c` brechen Sie den Vorgang ab und mit `n` können Sie wählen, dass Sie nach einer neuen Product- bzw. Package-Version gefragt werden.

Das gepackte Paket können Sie mit `opsi-package-manager --install <paketdatei>` auf dem Server installieren.



Mehr Details zum `opsi-makepackage` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools


[[opsi-softwintegration-create-opsi-package-manager]]
==== Installieren mit opsi-package-manager

Um das gepackte Produkt zu installieren gibt es den Befehl `opsi-package-manager` . Gehen Sie dazu in das Stammverzeichnis des Produkts und rufen Sie folgenden Befehl auf.

[source,prompt]
----
opsi-package-manager -i <myproductid_version.opsi>
----

Mehr Details zum `opsi-package-manager` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools

[[opsi-softwintegration-example-control]]
==== Beispiel einer 'control' Datei

[source,configfile]
----
[Package]
version: 1
depends:

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice:
version: 3.14
priority: 10
licenseRequired: False
productClasses:
setupScript: setup.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:
customScript:
userLoginScript:

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----


[[opsi-softwintegration-tool-opsi-newprod]]
==== Erstellen eines opsi-paketes mit dem CLI tool opsi-newprod

`opsi-newprod` ist ein Kommandozeilen Werkzeug zum Erstellen eines opsi-product Gerüstes.

Zum Erstellen wechselt man in dieses Verzeichnis und ruft `opsi-newprod` auf.
Das Programm fragt daraufhin nach dem Typ des zu erstellenden Paketes.
Dies ist üblicherweise der Typ +localboot+ für Produkte, die über den '{opsi-client-agent}'/'{opsi-winst}' installiert werden.
Der Typ +netboot+ steht für Produkte, die über das opsi-Linux-Bootimage ausgeführt werden (wie z.B. die Betriebssystem-Installationen).

.Auswahl des Produkttyps: localboot
image::newprod-localboot.png[Screenshot: Auswahl des Produkttyps: localboot, pdfwidth=40%]

Wählen Sie nun mit Tab OK (oder bestätigen mit F12). Nun müssen Sie die wesentlichen Produktdaten eingeben. Am oberen Rand ist hierzu eine Hilfe, die erläutert was die Felder bedeuten.

.Eingabe der Produktinformationen
image::newprod-product-info.png[Screenshot: Eingabe der Produktinformationen, pdfwidth=40%]

Product Id:: ist ein eindeutiger Bezeichner für das Produkt in der Regel unabhängig von der Version +
Bitte nur Kleinbuchstaben verwenden, keine Umlaute, keine Leerzeichen, keine Sonderzeichen - '-' ist als Trenner erlaubt.

Product name:: ist der Klartextname des Produkts (wir empfehlen die Vermeidung von Umlauten, '-' ist erlaubt, keine Leerzeichen).

Description:: ist eine ergänzende Beschreibung zum Produkt, die z.B. im opsi-Configeditor unter _Beschreibung_ angezeigt wird.

Advice:: ist eine ergänzende Beschreibung, in der Regel zum Umgang mit dem Produkt, die zu beachten ist und im opsi-Configeditor unter _Notiz_ angezeigt wird.

Product version:: ist die Version der eingepackten Software (max. 32 Zeichen).

Package Version:: ist die Version des Paketes für die Produktversion. Sie dient dazu, Pakete mit gleicher Produktversion, aber z.B. korrigiertem opsi-winst-Skript zu unterscheiden.

License required:: hat bei localboot Produkten keinen Einfluss. Bei netboot Produkten entscheidet diese Option, ob ein Lizenzkey aus dem Lizenzmanagement geholt wird.

Priority:: beeinflusst die Installationsreihenfolge. Mögliche Werte liegen zwischen 100 (ganz am Anfang) und -100 (ganz am Ende). Existieren auch Produktabhängigkeiten, so beeinflussen diese zusätzlich die Installationsreihenfolge.

.Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen
image::newprod-script-names.png[Screenshot: Eingabe der opsi-winst-Skript Namen für unterschiedliche Aktionen, pdfwidth=40%]

Nach Eingabe der Produktinformationen werden Sie aufgefordert, die Skripte anzugeben, die Sie für die unterschiedlichen möglichen Aktionen bereit stellen werden.

Üblicherweise heißt das *+Setup script+* gleich `setup.opsiscript`.

Üblicherweise heißt das *+Uninstall script+* gleich `uninstall.opsiscript`.

Ein *+Update-Script+* dient zur geringfügigen Veränderung einer existierenden großen Installation. Wird das Produkt auf setup gestellt, so wird nach dem Abarbeiten des Setup-Skriptes automatisch auch das Update-Skript ausgeführt.

Ein *+Always-Script+* wird bei jedem aktiv werden des opsi-Clientagenten ausgeführt (z.B. bei jedem Boot).

Ein *+Once-Script+* hat den Folgestatus _not_installed_. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten, wenn Sie nicht genau wissen, was Sie damit tun wollen.

Ein *+Custom-Script+* verändert weder Folgeaktion noch Folgestatus. Es handelt sich hierbei um einen sehr selten verwendeten Schalter, den Sie ignorieren sollten, wenn Sie nicht genau wissen, was Sie damit tun wollen.

Ein *+userLoginScript+* dient dazu nach dem Login des users Modifikationen am Profil des eingeloggten users vorzunehmen. Dies Funktioniert nur im Zusammenhang mit der opsi Erweiterung 'User Profile Management' und ist im entsprechenden Kapitel des opsi-Handbuchs beschrieben.


|=======================
| Typ | Folgestatus | Folgeaktion
| setup | installed | none
| uninstall | not_installed | none
| update | installed | none
| always | installed | always
| once | not_installed | none
| custom | _unverändert_ | _unverändert_
| User login | _unverändert_ | _unverändert_
|=======================

Nachdem nun das Produkt selber beschrieben ist, können Sie eine oder mehrere Produktabhängigkeiten definieren. Wollen Sie keine Produktabhängigkeit definieren so geben Sie _No_ ein.

.Eine (weitere) Produktabhängigkeit definieren: Ja / Nein
image::newprod-product-new-dependency.png["Screenshot: Eine (weitere) Produktabhängigkeit definieren: Ja / Nein", pdfwidth=40%]

Zur Erstellung einer Produktabhängigkeit geben Sie die folgenden Daten an. Beachten Sie auch die Hilfe im oberen Teil des Fensters:

.Eingabe der Daten zur Erstellung einer Produktabhängigkeit
image::newprod-product-dependency.png["Screenshot: Eingabe der Daten zur Erstellung einer Produktabhängigkeit", pdfwidth=90%]

Dependency for Action:: Für welche Aktion des Produktes, welches Sie gerade erstellen, soll die Abhängigkeit gelten (nur setup implementiert).

Required product id:: Productid (Bezeichner) des Produkts zu dem eine Abhängigkeit besteht.

Required  action:: Sie können entweder die Aktion _setup_ anfordern oder (siehe unten) den Status (_installed_).

Required installation status:: Status den das Produkt, zu dem eine Abhängigkeit besteht, haben soll (_installed_). Liegt ein anderer Status vor, so wird das Produkt auf _setup_ gestellt.

Requirement type:: Installationsreihenfolge. Wenn das Produkt, zu dem eine Abhängigkeit besteht, installiert sein muss bevor mit der Installation des aktuellen Produkts begonnen werden kann, dann ist dies _before_. Muss es nach dem aktuellen Produkt installiert werden so ist dies _after_. Ist die Reihenfolge egal so muss hier nichts eingetragen werden.

*Hinweis:*

Leider gibt es derzeit keinen generischen Mechanismus für Deinstallations-Produktabhängigkeiten. Zuverlässig ist der ProductDependency-Mechanismus nur für action: setup und die hierbei zu triggernden (before- oder after-) setup Aktionen und installed Status. Ein requiredAction: uninstall führt leider definitiv zu Fehlern.

Nachdem eine Produktabhängigkeit definiert ist, werden Sie wieder gefragt, ob Sie eine (weitere) Produktabhängigkeit definieren wollen. Wenn ja, wiederholt sich der Vorgang; wenn nein, so werden Sie gefragt, ob Sie eine Produkteigenschaft (Zusatzschalter) definieren wollen mit dem Sie die Installation des Produktes modifizieren können.

*Noch ein Hinweis:*

Die tatsächliche Installationsreihenfolge ermittelt sich aus einer Kombination von Produktabhängigkeiten und Produktpriorisierung. Details hierzu finden Sie im opsi-Handbuch im Kapitel 'Beeinflussung der Installationsreihenfolge durch Prioritäten und Produktabhängigkeiten'

.Eine (weitere) Produkteigenschaft definieren
image::newprod-new-property.png["Screenshot: Eine (weitere) Produkteigenschaft definieren", pdfwidth=40%]

Antworten Sie ja, so müssen Sie die Produkteigenschaft beschreiben:

Die Produkteigenschaft wird clientspezifisch gespeichert und besteht aus einem Namen (key) der verschiedene Werte (Values) zugeordnet bekommen kann und die dann vom opsi-winst-Skript abgefragt werden können.

Zunächst müssen Sie angeben, ob es sich um ein Textwert (unicode) oder um einen logische Wert also wahr/falsch (boolean) handelt. Wenn Sie unsicher sind, wählen Sie _unicode_.

.Datentyp der Produkteigenschaft wählen
image::newprod-property-type.png["Screenshot: Datentyp der Produkteigenschaft wählen", pdfwidth=30%]

Weiterhin wird eine Beschreibung benötigt, die im {opsi-configed} als Hilfe angezeigt wird. Weiterhin müssen Sie, durch Kommas getrennt, alle Werte angeben, die der Key annehmen darf. Wird hier nichts angegeben, so kann später im opsi-Configeditor ein beliebiger Wert eingegeben werden. Über _Editable_ (true/false) können Sie entscheiden, ob neben der vorgegebenen Liste auch andere Werte eingegeben werden dürfen.

NOTE: Enthält ein Wert einen Backslash `\`, so muss dieser doppelt angegeben werden. +
Eine Pfadangabe kann beispielsweise wie folgt aussehen: `C:\\temp`

.Beschreibung der Produkteigenschaft
image::newprod-property-desc.png["Screenshot: Beschreibung der Produkteigenschaft", pdfwidth=40%]

Im Folgefenster müssen Sie festlegen, was der Defaultwert dieser Produkteigenschaft ist.

.Festlegung des Defaultwerts der Produkteigenschaft
image::newprod-property-default.png["Screenshot: Festlegung des Defaultwerts der Produkteigenschaft", pdfwidth=40%]

Wenn Sie als Typ 'boolean' wählen, so reduziert sich die Beschreibung auf 'Property name' und 'Property description'.

.Beschreibung eines boolschen Properties
image::newprod-property-boolean.png["Screenshot: Beschreibung eines boolschen Properties", pdfwidth=60%]

Nachdem eine Produkteigenschaft definiert ist, werden Sie wieder gefragt, ob Sie eine (weitere) Produkteigenschaft definieren wollen. Wenn ja, wiederholt sich der Vorgang; wenn nein, so werden Sie als nächstes nach Name und Mail-Adresse gefragt. Diese werden im Changelog des Paketes verwendet und müssen angegeben werden.

.Eingabe der Maintainer Daten
image::newprod-maintainer.png["Screenshot: Eingabe der Maintainer Daten", pdfwidth=60%]

Danach ist das Grundgerüst des Produktes fertig gestellt.

Mit Hilfe des `ls` Befehls finden Sie die oben beschriebene Verzeichnis Struktur. Wechseln Sie in den OPSI-Ordner und setzen Sie erneut den `ls` Befehl ab. Hier befindet sich unter anderem die 'control'-Datei, welche die eben eingegebenen Daten enthält und Ihnen auch die Möglichkeit bietet, diese im Editor zu kontrollieren oder zu modifizieren.
