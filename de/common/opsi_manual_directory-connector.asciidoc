////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
; credits: http://www.opsi.org/credits/
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  1
:toclevels: 6
:toc:
:numbered:
:doctype:   book

[[opsi-manual-dircon]]
=== opsi directory connector


[[opsi-manual-dircon-introduction]]
==== Einführung

Der opsi Directory Connector ist ein Werkzeug um Daten aus einem Verzeichnisdienst in eine opsi-Installation zu überführen.
Dadurch wird mehrfacher Pflegeaufwand in unterschiedlichen Systemen vermieden.


[[opsi-manual-dircon-preconditions]]
==== Vorbedingungen

Dieses Modul ist momentan eine link:http://www.uib.de/www/kofinanziert/index.html[kofinanzierte opsi Erweiterung]. +
Es sind eine Reihe von Vorbedingungen nötig, um dieses Modul einsetzen zu können. Das bedeutet, dass Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie, wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung (mail an info@uib.de). +

ifdef::manual[]
Weitere Details hierzu finden Sie in <<opsi-manual-modules>>.
endif::manual[]


[[opsi-manual-dircon-preconditions-general]]
===== Allgemeine Anforderungen

Der Quell-Verzeichnisdienst muss das LDAP-Protokoll implementieren.

Das Ziel-Opsi-System sollte mindestens opsi 4.0.7 verwenden. Ältere Versionen können funktionieren, wurden aber nicht getestet.

Die Maschine, auf welcher der Connector laufen soll, muss über das Netzwerk Zugriff auf den Directory- und opsi-Server haben.
Es ist möglich alle Komponenten auf der gleichen Maschine zu betreiben, aber es wird davon ausgegangen, dass jeweils getrennte Maschinen verwendet werden.


[[opsi-manual-dircon-requirements-hardware]]
===== Hardware-Anforderungen

Diese Anforderungen richten sich an eine einfache Verwendung in einer kleinen Umgebung mit bis zu 500 Clients.
Diese Anforderungen fallen in großen Umgebungen gegebenenfalls größer aus, weshalb Anpassungen notwendig sein können.

* 256 MB freier Arbeitsspeicher
* Netzwerkverbindungen


[[opsi-manual-dircon-requirements-software]]
===== Software-Anforderungen

Es wird nur die Installation und der Betrieb des Connectors unter Linux unterstützt.
Eine Unterstützung für Windows ist nicht geplant.

Durch die Verwendung standardisierter Protokolle zur Kommunikation werden keine zusätzlichen opsi- oder Verzeichnisdienst-spezifischen Komponenten benötigt.


[[opsi-manual-dircon-installation]]
==== Installation

Zur Installation fügen Sie bitte das opsi-Repository wie im Dokument `Getting Started` beschrieben hinzu.

Anschließend verwenden Sie den Paket-Manager des Betriebssystems um das Paket `opsi-directory-connector` zu installieren.

Auf einer Debian-basierten Maschine kann die Installation wie folgt durchgeführt werden:

[source,prompt]
----
apt-get install opsi-directory-connector
----

[[opsi-manual-dircon-configuration]]
==== Konfiguration

Der Connector kann über eine Vielzahl an Einstellungsmöglichkeiten an verschiedenste Umgebungen angepasst werden.

Die Konfiguration geschieht über eine Konfigurationsdatei im JSON-Format, welche gültiges JSON enthalten muss.
Zur Angabe von boolschen Werten verwenden Sie bitte `true` oder `false`.
Text muss mit doppelten Anführungszeichen eingegeben werden, beispielsweise `"das ist Text"`.

Eine Beispiel-Konfiguration wird unter `/user/share/opsi-directoy-connector/opsi-directory-connector.example.conf.conf` bereitgestellt.
Diese Datei kann als eine Vorlage für eigene Konfigurationen verwendet werden.

[source,prompt]
----
cp /user/share/opsi-directoy-connector/opsi-directory-connector.example.conf.conf /etc/opsi/opsidirectoryconnector-custom.conf
----

[[opsi-manual-dircon-conf-dir]]
===== Directory-Einstellungen

Diese Einstellungen werden benötigt, um eine Verbindung zum Verzeichnisdienst herzustellen und den Suchbereich auf bestimmte Bereiche und Objekte einzugrenzen.

[source,json]
----
{
    "directory": {
        "address": "ldap://192.168.12.34",
        "user": "DOMAIN\\opsiconnector",
        "password": "insertpasswordhere",
        "passwordFile": "",
        "search_base": "dc=testcompany,dc=local",
        "search_query_computers": "(objectClass=computer)",
        "identifying_attribute": "dn",
        "connection_options": {
            "paged_search_limit": 768
        }
    },
    …
}
----

Unter `address` muss angegeben werden unter welcher Adresse der Server angesprochen wird. Wird das Protokoll `ldaps` oder der Port `636` verwendet wird eine SSl Verbindung zum Directory geöffnet. Beispiel:

[source,json]
----
        "address": "192.168.12.34:636",
----


`user` und `password` werden für die Authentifikation am Directory-Server verwendet.
Sofern für `passwordFile` ein Wert angegeben wird, wird dieser als Pfad zu einer Datei, welche das Passwort enthält, interpretiert.
Der Inhalt dieser Datei wird als Passwort verwendet.
Dadurch muss das Passwort nicht im Klartext in der Konfigurationsdatei vorgehalten werden.
Das so ausgelesene Passwort wird eventuell gesetzte Werte für `password` überschreiben.

TIP: Wir empfehlen die Verwendung eines gesonderten Benutzerkontos.

NOTE: Je nach verwendeter Directory-Software und dessen Konfiguration können zur Anmeldung verschiedene Formate eines Benutzernamens zum Tragen kommen. +
Neben _Down-Level Logon Name_ im Stile von `DOMAIN\\username` kann das Format auch _User Principal Name_ im Stile von `user@domain` oder ein _Distinguished Name_ (DN) wie `uid=opsiconnect,cn=users,dc=test,dc=intranet` sein.

Über `search_base` wird angegeben ab welchem Punkt nach passenden Element gesucht wird.
Über `search_query_computers` kann der für die Suche nach Clients verwendete Filter konfiguriert werden.

Über den optionalen Parameter `identifying_attribute` wird ab Version 23 festgelegt welches Attribut verwendet werden soll um einen Client eindeutig zu identifizieren.
Als Standard wird hier `dn` verwendet.
Eine häufige Alternative zu `dn` ist der Wert `distinguishedName`, diese Variante kommt oftmals in Microsoft Active Directory zum Einsatz.

Der Parameter `connection_options` beinhaltet zusätzliche Optionen zur Konfiguration der Verbindung.
Durch den Parameter `verify` wird bestimmt, ob bei einer SSL Verbindung das Zertifikat überprüft werden soll oder nicht. Zusätzlich kann der Pfad zu einer CA Datei angegeben werden. Wird eine Datei angeben, erfolgt die Verifizierung über diese Datei.
Mit `start_tls` kann gesteuert werden, ob nach Anmelden am Directory eine gesicherte Verbindung gestartet wird.

Ist der optionale Parameter `paged_search_limit` vorhanden und als Wert eine Ganzzahl angegeben, so werden zum Auslesen der Elemente aus dem Directory mehrere Abfragen verwendet. Wieviele Elemente eine Antwort maximal enthält wird über den gesetzten Wert gesteuert.
Dieses Verhalten wird seit Version 20 unterstützt.

NOTE: Weitere Verbindungs-Optionen werden auf Nachfrage implementiert.

Seit Version 14 ist es möglich, über den Aufrufparameter `--check-directory` die Verbindungseinstellungen zum Verzeichnis zu prüfen, ohne dass eine Verbindung zum opsi-Server hergestellt wird.


[[opsi-manual-dircon-conf-dir-ucs]]
===== Verbindung zu Univention Corporate Server

Für eine Verbindung zu Univention Corporate Server (UCS) muss für die Verbindung als Benutzername ein vollständiger _Distinguished Name_ verwendet werden.
Dieser hat die Form `uid=<username>,cn=users,dc=company,dc=mydomain`.

Unter UCS ist LDAP über die Ports 7389 (ungesichert) bzw. 7636 (SSL-gesichert) erreichbar.
Ist auf dem Server ebenfalls Samba installiert und als AD-kompatibler Domaincontroller eingerichtet, so lauscht dieser auf den Ports 389 (ungesichert) bzw. 636 (SSL-gesichert).
Für die Verwendung der SSL-gesicherten Ports muss die Verbindungseinstellung `start_tls` auf `true` gesetzt werden.

Die beiden möglichen Verbindungen unterscheiden sich auch in der Art der Anmeldung. Bei LDAP kommt `uid=…` zum Tragen, wohingegen bei Samba mittels `dn=…` gearbeitet wird.

In der Regel wird man nach Rechner-Objekten im Container `computers` suchen.
Der folgende Befehl gibt den dazu passenden Wert für `search_base` aus:
[source,prompt]
----
echo "cn=computers,$(ucr get ldap/base)"
----

Für die Suche nach Windows-Clients kann `(objectClass=univentionWindows)` als Wert für `search_query_computers` angegeben werden.

Wie ein Benutzer mit nur lesendem Zugriff angelegt werden kann, ist im Univention-Wiki zu finden: link:https://wiki.univention.de/index.php?title=Cool_Solution_-_LDAP_search_user[Cool Solution - LDAP search user]


[[opsi-manual-dircon-conf-work]]
===== Verhaltens-Einstellungen

Die Einstellungen steuern das Verhalten des Connectors.

[source,json]
----
{
    …
    "behaviour": {
        "write_changes_to_opsi": true,
        "root_dir_in_opsi": "clientdirectory",
        "update_existing_clients": true,
        "prefer_location_from_directory": true,
        "group_handling": "dn",
        "group_description": "dn",
        "override_root_dir": true,
        "delete_empty_groups": false,
        "skip_adding_clients": false,

    },
    …
}
----

Wird `write_changes_to_opsi` auf `false` gesetzt, werden keine Daten nach opsi geschrieben.
Mit dieser Einstellung ist es möglich, die Verbindungseinstellungen zu überprüfen, bevor sie angewendet werden.

Per `root_dir_in_opsi` wird angegeben, welche Gruppe in opsi als Wurzelgruppe verwendet werden soll.
Es muss von Ihnen sichergestellt werden, dass diese Gruppe existiert.

NOTE: Die Gruppe _clientdirectory_ wird im Configed als _DIRECTORY_ angezeigt.
Sollen also Clients oder Gruppen direkt unterhalb von _DIRECTORY_ erscheinen, so muss als Wert für `root_dir_in_opsi` der Wert `clientdirectory` eingetragen werden.

Wird `update_existing_clients` auf `false` gesetzt, so werden bereits in opsi existierende Clients nicht verändert.
Wird dieser Wert auf `true` gesetzt, so werden möglicherweise manuell gesetzte Daten mit den Werten aus dem Directory überschrieben.

Falls `prefer_location_from_directory` auf `true` gesetzt wurde, werden Clients in opsi an die Position verschoben, welche sie im Directory haben.
Für das Deaktivieren dieses Verhaltens muss dieser Wert auf `false` gesetzt werden.

Die Gruppenbehandlung kann seit Version 31 über den optionalen Schlüssel `group_handling` gesteuert werden.
Der Default ist hierbei `dn`. Dabei werden Gruppen aus dem DN eines Computers abgeleitet und entsprechend als Teil des opsi-Directory angelegt. Ein Client ist dabei nur Mitglied einer Gruppe.

Wird das Gruppenhandling auf `ucsatschool` gesetzt, so wird das Verhalten auf die Verwendung in link:https://www.univention.de/produkte/ucsschool/[UCS@School]-Umgebungen angepasst.
Dabei wird der opsi-directory-connector automatisch nach Schulen suchen und für diese die Räume ermitteln, welche dann nach opsi synchronisiert werden.
Für jede ermittelte Schule wird in opsi eine Gruppe angelegt.
Um den Gruppen von link:https://www.univention.de/produkte/ucsschool/[UCS@School] zu folgen, bei welchen ein Rechner in mehr als einem Raum zu finden sein kann, werden die Gruppen dabei nicht als Gruppe innerhalb des opsi-Directory angelegt, sondern als normale Gruppe, so dass ein Client auch in opsi in mehreren Gruppen sein kann.

Sollen die Gruppen bei link:https://www.univention.de/produkte/ucsschool/[UCS@School] in OPSI doch unter _DIRECTORY_ angelegt werden, kann der Schalter `override_root_dir` auf `false` gesetzt werden. `override_root_dir` ist nur bei `group_handling` `ucsatschool` verfügbar und der Defaultwert ist `true`.
Wenn `override_root_dir` auf `false` gestellt wird und die Gruppen somit in OPSI unter `DIRECTORY` gespeichert werden, sollte sichergestellt werden, dass jeder Schulrechner nur einem Raum zugewiesen wurde.


Mit `group_description` kann die Beschreibung der OPSI-Gruppen angepasst werden. Folgende Werte sind möglich:

* `dn`: Der dn der Gruppe wird in OPSI als Gruppenbeschreibung hinterlegt.
* `directory`: Die Gruppenbeschreibung wird aus dem Feld `description` der Directory-Gruppe gelesen.
* Ist der Wert nicht oder anders gesetzt, wird die Beschreibung mit dem Namen der Gruppe belegt.

[source,json]
----
...
 "behaviour": {
        "group_handling": "ucsatschool",
        ...
        "group_not_in_directory": true,
        "opsi_clients_to_ignore": {
            "clients": ["win1.uib.local","win2.uib.local","win3.uib.local"],
            "groups": ["server"]
        }
 }
...
----

Steht `group_not_in_directory` auf `true` werden alle Clients, die nicht im Directory sind der Gruppe `not_in_directory` hinzugefügt. Diese Option steht nur bei `group_handling` `uscatschool` zur Verfügung. Mit dem Parameter `opsi_clients_to_ignore` können Clients oder ganze Gruppen von dieser Regel ausgeschlossen werden.


Wird `delete_empty_groups` aktiviert, dann werden Gruppen, die nach der Synchronisation leer sind, aus opsi gelöscht. Es werden nur Gruppen unterhalb von `root_dir_in_opsi` berücksichtigt.

Mit `skip_adding_clients` kann das anlegen von Clients in opsi komplett übersprungen werden. Diese Option kann zum Beispiel in Verbindung mit `prefer_location_from_directory` verwendet werden, sodass nur bestehende Clients verschoben werden.

In der Beispiel Konfiguration unter `/usr/share/opsi-directory-connector` sind auch nochmal alle Einstellungen kurz beschrieben.

[[opsi-manual-dircon-conf-mapping]]
===== Mappings

Mit einem derart flexiblen System wie einem Verzeichnisdienst benötigt der
Connector Informationen darüber, welche Attribute im Directory auf welche
Attribute in opsi angewendet werden sollen.

[source,json]
----
{
    …
    "mapping": {
        "client": {
            "id": "name",
            "description": "description",
            "notes": "",
            "hardwareAddress": "",
            "ipAddress": "",
            "inventoryNumber": "",
            "oneTimePassword": ""
        }
    },
    …
}
----

Es gibt ein Mapping für Client-Attribute.
Der Schlüssel des Mappings ist das Attribut in opsi und der Wert ist das Attribut aus dem Verzeichnisdienst. Ist der Wert (in der Zuordnung) leer, so wird keine Zuordnung vorgenommen.

NOTE: Sollte der aus dem Verzeichnis ausgelesene Wert für die ID des Clients nicht als FQDN erkennbar sein, so wird ein enstprechender FQDN erstellt.
Der Domain-Teil hierfür wird aus den DC-Werten des Elements gebildet.

TIP: Unter Univention Corporate Server (UCS) kann bei `hardwareAddress` der Wert `macAddress` angegeben werden, wenn die Verbindung über LDAP (Port 7389 oder 7636) hergestellt wird.

Im Bereich "mapping" kann die Zuordnung von Clients zu Depots definiert werden. Aktuell gibt es nur den Mapping-Typ "network".
Beim Typ "network" wird ein Client einem Depot zugeordnet, wenn die IP-Adresse des Clients im Netzwerk ("networkAddress") des Depots liegt.
Alternativ kann einem Depot eine Liste von Netzwerkenbereichen zugeordnet werden.


[source,json]
----
{
    ...
    "mapping": {
        ...
        "depot": {
            "type": "network",
            "test-depot1.test.local": ["192.168.24.0/24","192.168.25.0/24"],
            "test-depot1.test.local": ["192.168.27.0/24","192.168.28.0/24"]
        }
    },
    ...
}
----


[[opsi-manual-dircon-conf-mapping-groupnames]]
===== Manuelle Zuordnung von Gruppennamen

Gruppennamen werden in der Regel ohne große Anpassungen übernommen.
Allerdings kann es dabei vorkommen, dass Gruppennamen verwendet werden sollen, welche in opsi ungültig sind.

Für diese Sonderfälle kann eine manuelle Zuordnung von Gruppennamen vorgenommen werden, welche es erlaubt auch diese Fälle zu behandeln.

Zur Einrichtung wird in `mapping` ein Eintrag `group_name` angelegt, in welchem eine Zuordnung der Directory-Seite zur opsi-Seite vorgenommen wird.
Für Gruppen, welche in dieser Zuordnung nicht vorkommen, wird der Namen nicht angepasst.
Die Gruppennamen werden immer in Kleinbuchstaben verarbeitet, weshalb die Einträge hier in Kleinbuchstaben erfolgen müssen.
Möglich ist dies ab Version 23.

Das folgende Beispiel behandelt die aus dem Directory stammende Gruppe `_server` in opsi als `server`.

[source,json]
----
{
    ...
    "mapping": {
        "client": {
            ...
        },
        "group_name": {
            "_server": "server"
        }
    },
    ...
}
----

WARNING: Bei unbedachtem Einsatz kann die manuelle Zuordnung unerwünschte Seiteneffekte haben. Deshalb sollte diese Zuordnungsmöglichkeit nur in Ausnahmefällen eingesetzt werden.


[[opsi-manual-dircon-conf-conect]]
===== opsi-Verbindungs-Einstellungen

Hierüber wird gesteuert wie der Connector sich zu opsi verbindet.

[source,json]
----
{
    …
    "opsi": {
        "address": "https://localhost:4447",
        "username": "syncuser",
        "password": "secret",
        "exit_on_error": false,
        "passwordFile": "",
        "connection_options": {
            "verify_certificate": true
        }
    }
}
----

Unter `address` ist die Adresse des opsi-Servers einzutragen.
Vergessen Sie nicht die Angabe des Ports!

NOTE: Ein Proxy für die Verbindung kann über die Umgebungsvariable 'HTTPS_PROXY' gesetzt werden.

Mittels `username` und `password` wird geregelt welche Zugangsdaten zur Authentifizierung am opsi-Server verwendet werden.
Sofern für `passwordFile` ein Wert angegeben wird, wird dieser als Pfad zu einer Datei, welche das Passwort enthält, interpretiert.
Der Inhalt dieser Datei wird als Passwort verwendet.
Dadurch muss das Passwort nicht im Klartext in der Konfigurationsdatei vorgehalten werden.
Das so ausgelesene Passwort wird eventuell gesetzte Werte für `password` überschreiben.

TIP: Wir empfehlen die Verwendung eines gesonderten Benutzers. Die Anlage zusätzlicher Benutzer ist im Dokument _Getting Started_ beschrieben.

Ist der Parameter `exit_on_error` auf `true` gestellt, so führt ein Problem bei der Aktualisierung der Daten in opsi - das kann bspw. auch durch die Übermittlung von für opsi ungültige Werte geschehen - zu einem Abbruch.
Steht dies auf `false`, so werden Fehler geloggt, aber der Lauf wird nicht beendet.

Unter `connection_options` werden Optionen für die Verbindung zum opsi-Server festgelegt.
Mittels `verify_certificate` wird die Überprüfung des Server-Zertifikats gesteuert.
Für selbstsignierte Zertifikate kann dieser Wert auf `false` gesetzt werden.

Seit Version 14 ist es möglich, über den Aufrufparameter `--check-opsi` die Verbindung zum opsi-Server zu testen, ohne dass eine Verbindung zum Verzeichnisdienst hergestellt wird.


[[opsi-manual-dircon-run]]
==== Den Connector ausführen

Nach der Installation existiert ein Binary `opsi-directory-connector` auf dem System.

Dieses muss einen Parameter `--config` zusammen mit dem Pfad zur Konfigurationsdatei übergeben bekommen.

[source,prompt]
----
opsi-directory-connector --config /etc/opsi/opsidirectoryconnector-custom.conf
----

NOTE: Der ausführende Benutzer benötigt keinen Zugriff auf das opsi-System, da der zugreifende Benutzer in der Konfigurationsdatei hinterlegt ist.


[[opsi-manual-dircon-run-systemd]]
===== Beispiel: wiederkehrende Verarbeitung mit systemd

Der Connector macht aktuell bei der Ausführung einen Synchronisationslauf, aber die Chancen stehen gut, dass eine ständige Synchronisation erfolgt.

Es ist einfach, die Ausführung wiederkehrender Läufe zu automatisieren.

Wir werden hierbei systemd verwenden.
Im Gegensatz zu cronjobs wird systemd verhindern, dass überlappende Läufe stattfinden, weshalb systemd eine gute Wahl ist.

Das folgende Beispiel wird den Connector so einrichten, dass er fünf Minuten nach dem Start der Maschine ausgeführt wird und danach jede Stunde.

Unter `/etc/systemd/system/`, dem Verzeichnis für benutzerdefinierte Units, müssen die zwei folgenden Dateien abgelegt werden.
Eine Datei ist der Timer, welche unseren Job wiederkehrend aufruft und die Andere ist für den Job selbst.

Bitte füllen Sie die Datei `opsi-directory-connector.timer` mit dem folgenden Inhalt:

[source,configfile]
----
[Unit]
Description=Start the opsi-directory-connector in regular intervals

[Timer]
OnBootSec=5min
OnUnitActiveSec=1hour

[Install]
WantedBy=timers.target
----

Und dies muss nach `opsi-directory-connector.service`:

[source,configfile]
----
[Unit]
Description=Sync clients from AD to opsi.
Wants=network.target

[Service]
Type=oneshot
ExecStart=/usr/bin/opsi-directory-connector --config /etc/opsi/opsi-directory-connector-custom.conf
----

Um den Timer zu aktivieren und ihn sofort zu starten, können die folgenden Befehle verwendet werden:

[source,prompt]
----
systemctl enable opsi-directory-connector.timer
systemctl start opsi-directory-connector.timer
----

Falls der Timer nicht gestartet wird, wird er erst nach dem nächsten Neustart der Maschine ausgeführt werden.


[[opsi-manual-dircon-run-cronjob]]
===== Beispiel: wiederkehrende Verarbeitung als Cronjob

Es ist einfach, die Ausführung wiederkehrender Läufe über einen Crobjob zu automatisieren.

Bitte beachten Sie, dass überlappende Läufe stattfinden können, weshalb der Synchronisationsintervall am besten größer gewählt werden sollte.
Zur Vermeidung dieses Problems wird die Verwendung von *systemd* anstatt *cron* empfohlen!

Zur Bearbeitung der Cronjob-Datei wird in der Regel `crontab -e` aufgerufen.
Für eine zu jeder Stunde stattfindenden Synchronisation kann dort folgendes als Cronjob hinterlegt werden:

[source,prompt]
----
0 * * * * /usr/bin/opsi-directory-connector --config /etc/opsi/opsi-directory-connector-custom.conf
----



===== Kommandozeilenparameter

[source,prompt]
----
Usage: __main__.py [-h] [--version] [--log-level {0,1,2,3,4,5,6,7,8,9}]
                   [--log-level-stderr {0,1,2,3,4,5,6,7,8,9}]
                   [--log-level-file {0,1,2,3,4,5,6,7,8,9}]
                   [--log-file LOG_FILE]
                   [--max-log-size MAX_LOG_SIZE]
                   [--keep-rotated-logs KEEP_ROTATED_LOGS]
                   [--check-directory | --check-opsi | --delete-clients DELETE_CLIENTS [DELETE_CLIENTS ...]]
                   [--dry-run] --config
                   CONFIG

If an arg is specified in more than one place, then commandline values override environment
variables which override defaults.

optional arguments:
  -h, --help
                              show this help message and exit
  --version
                              show program's version number and exit
  --log-level {0,1,2,3,4,5,6,7,8,9}
                              Sets how much information will be logged. [env var: OPDC_LOG_LEVEL]
                              (default: 4)
  --log-level-stderr {0,1,2,3,4,5,6,7,8,9}, -l {0,1,2,3,4,5,6,7,8,9}
                              Sets how much information will be logged. [env var:
                              ODC_LOG_LEVEL_STDERR] (default: 4)
  --log-level-file {0,1,2,3,4,5,6,7,8,9}
                              Sets how much information will be logged to the log file. [env var:
                              ODC_LOG_LEVEL_FILE] (default: 5)
  --log-file LOG_FILE
                              Sets log file path. [env var: ODC_LOG_FILE] (default:
                              /var/log/opsi/directory-connector.log)
  --max-log-size MAX_LOG_SIZE
                              Limit the size of logfiles to SIZE megabytes.Setting this to 0 will
                              disable any limiting. [env var: ODC_MAX_LOG_SIZE] (default: 5.0)
  --keep-rotated-logs KEEP_ROTATED_LOGS
                              Number of rotated log files to keep. [env var: ODC_KEEP_ROTATED_LOGS]
                              (default: 1)
  --check-directory
                              Check if a connection to the directory can be established and if items
                              will be received. (default: False)
  --check-opsi
                              Check if a connection to the opsi server can be established. (default:
                              False)
  --delete-clients DELETE_CLIENTS [DELETE_CLIENTS ...]
                              Delete list of clients from directory. (default: None)
  --dry-run
                              Print what would be done. (default: False)
  --config CONFIG
                              Path to the config. (default: None)
----

Ab Version 39 benutzt der opsi-directory-connector den OPSI-Logger mit Loglevel 0-9. Standardmäßig  wird  nach `/var/log/opsi-directory-connector` und nach `stderr` geloggt. Mit den Parametern `--log-level-stderr`, `--log-level-file` kann das Loglevel des jeweiligen Logs gesetzt werden. `--log-file` legt die Logdatei fest.

Das Logfile wird nach einer festgelegten Größe (default 5 MB) rotiert und per Default wird eine dieser rotierten Logdateien aufgehoben. Mit den Parametern `--max-log-size` und `--keep-rotated-logs` können die Standardwerte überschreiben werden.

Zusätzlich zu den Kommanduzeilenparametern können die Werte auch in der Konfigurationsdatei oder über Umgebungsvariablen gesetzt werden. Hierbei gilt:

- Parameter überschreiben alles
- Umgebungsvariablen überschreiben Konfiguration und Default
- Konfiguration überschreibt Default

Beispielkonfiguration:

[source,prompt]
----
{
...
    "log-level-stderr": 6,
    "log-level-file": 3,
    "keep-rotated-logs": 4
...
}
----

Wird der directory connector mit der Option `--dry-run` gestartet, werden die einzelnen Schritt ausgegeben ohne Änderungen in OPSI vorzunehmen.
Bei `dry-run` wird im Unterschied zum Konfigurationsparameter `write_changes_to_opsi: false` die Ausgabe angepasst,
um eine bessere Übersicht der Aktionen zu geben. Bsp:

[source,prompt]
----
---------- opsi actions ----------
Creating client client1.opsidc.intranet.
Creating client ds-win-client-2.opsidc.intranet.
Creating client ds-win-client-1.opsidc.intranet.
Creating client mac-client-1.opsidc.intranet.
Creating client windows-client-1.opsidc.intranet.
Creating client raspberrypi-1.opsidc.intranet.
Adding mac-client-1.opsidc.intranet to opsitestschool-mac pool.
Adding windows-client-1.opsidc.intranet to opsitestschool-pc pool og1.
Adding ds-win-client-2.opsidc.intranet to depotschule-pool-1.
Adding ds-win-client-1.opsidc.intranet to depotschule-pool-1.
----------------------------------
---------- summary ---------------
Create  6 clients and 0 groups.
0 clients removed from group.
Adding 4 clients to a new group.
----------------------------------
----

==== Clients aus dem Directory löschen

Im Standardfall greift der opsi-directory-connector nur lesend auf das Directory zu. Mit dem Startparameter `--delete-clients` wird ein unabhäniger Lauf gestartet, der die übergebenen Objekte versucht aus dem Verzeichnis zu löschen.
Bsp:
[source,prompt]
----
opsi-directory-connector --config config.conf --delete-clients client1
----
Bei diesem Aufruf würde der Connector unterhalb der Suchbasis nach Objekten mit `cn=client1` suchen. Gibt es nur einen Treffer, wird das Objekt gelöscht. Wurden allerding mehrere gefunden, wird ein Fehler ausgegeben und kein Objekt gelöscht.

Die zu löschenden Objekte können noch genauer angegeben werden:

[source,prompt]
----
opsi-directory-connector --config config.conf --delete-clients computers/test-clients/client1
----
Dieser Aufruf würde auf das Objekt `cn=client1,ou=test-clients,ou=computers,dc=example,dc=org` passen, aber nicht auf
`cn=client1,ou=clients,ou=computers,dc=example,dc=org`. So wird das eine gefundene Objekt gelöscht.

Es können auch mehere Clients angegeben werden:
[source,prompt]
----
opsi-directory-connector --config config.conf --delete-clients computers/clients/client1 client2 client3
----

WARNING: Die Funktion `delete-clients` sollte mit Vorsicht verwendet werden.

TIP: Die `dry-run` Funktion kann auch mit `delete-clients` verwendet werden.