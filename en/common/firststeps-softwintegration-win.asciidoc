////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.2
:doctype: book

[[opsi-winclient-softwintegration]]
== Integration of New Software Packages into the opsi Server

The primary objective of software distribution is to accomplish automatic software installation without user interaction. Software installation and user activity should be strictly separated. In most cases, the installation process requires administrative privileges which the user usually doesn't have. So the installation process has to be done independently from the user. This way, the user can neither interfere nor be affected by the software installation process.

In order to do this, you have to write a script for the script driven installer, which is called an '{opsi-script}' script. This script in addition to the installfiles and some metadata can be packed as a opsi-product, which in turn can be installed on a {opsi-Server}.
////
== Integration of new software packages into the opsi software deployment

The installation of software is carried out in opsi via the {opsi-client-agent} and in particular by the script-controlled setup program {opsi-script}. Therefore, an {opsi-script} script must be created for each opsi product. Afterwards, this script, the installation files, and the metadata are packed for an opsi product, which are finally installed on the {opsi-Server}.
////

[[opsi-winclient-softwintegration-tutorial]]
=== A Brief Tutorial: How to write a {opsi-script} Script


include::./softwintegration-tutorial-introduction.asciidoc[]

[[opsi-winclient-softwintegration-tutorial-general]]
==== Methods of Non-Interactive Installation for Windows

Regardless of whether or not you are using opsi or another management solution, there are three different ways to install software without user interaction:

. *Unattended or Silent Installation* +
The original setup binary from the software manufacturer can be executed with command line arguments which enable a 'silent' or 'unattended' mode. It depends on whether or not the program supports a silent installation mode. A special case of this method is the unattended installation of MSI packages.
*"silent" Installation of a MSI-Package*:+
A MSI-Package can be installed using the "quiet" Option.

. *Interactive Setup with recorded Answers* +
The actions executed by the administrator while running the manufacturer's setup program during a manual installation are automatically recorded using the free tools 'Autoit' or 'Autohotkey'. This generates an autoIt script which in turn can be used for an unattended installation.

. *Recreate the setup-routine with opsi-script*: +
The actions executed by the setup-routine when installing manually are recorded and the opsi-script is used to reproduce them.

NOTE: opsi supports all of these variants. +
Usually a combination of these methods in one script provides the best result. For example, performing the basic installation using the original setup if available, and then doing some customizing by patching the registry or the file based configuration.

////
==== Methods of non-interactive software installation for Windows

Essentially, there are three methods of integrating a software package into the automatic software distribution for Windows, plus there is also a variant for packages for the Microsoft Installer Service.

. *Unattended / Silent Setup*: +
The original setup program is used and used in a non-interactive mode via command line arguments.
The most important special case of this is the +
*„silent“ call of a MSI package*: +
A package for the Microsoft Installer Service is available and is executed with a „quiet“ option.

. *Interactive setup with an automated response*: +
In preparation, the original setup program is used to determine which window titles the program shows
and which questions and answers occur during setup. This is written down in a script.
During the process of software distribution, the setup program then runs under the control of an automation program
such as AutoIt or Autohotkey, which controls the setup program according to the script.

. *Reproduction of the setup routine with opsi-scriptt*: +
When the original setup program is run, any system changes are also logged, e.g. with procmon and replayed with the help of opsi-winst.

NOTE: Opsi supports all three variants. In practice, they are frequently used together. 

////

include::./softwintegration-tutorial-script-structure-opsi-script-basics.asciidoc[]


[[opsi-winclient-softwintegration-tutorial-windows-special-commands]]
===== Special commands for Windows

* `getOS : string` // returns: Linux or Windows_NT or MacOS [W/L/M] +
https://download.uib.de/opsi_stable/doc/html/en/opsi-script-manual/opsi-script-manual.html#GetOS +
#####################

* `getMsVersionInfo : string` // Windows Version Information [W] +
https://download.uib.de/opsi_stable/doc/html/en/opsi-script-manual/opsi-script-manual.html#GetMsVersionInfo +
#####################

* `GetMsVersionName` //Windows _marketing_ Version //since 4.12.4.35 [W] +
https://download.uib.de/opsi_stable/doc/html/en/opsi-script-manual/opsi-script-manual.html#GetMsVersionName +
#####################

* `getMSVersionMap : stringlist` [W] +
https://download.uib.de/opsi_stable/doc/html/en/opsi-script-manual/opsi-script-manual.html#GetMSVersionMap +
#####################


[[opsi-winclient-softwintegration-tutorial-template]]
==== Example: Windows-Template 'opsi-template'

This template can be created with `opsi-setup-detector`.

// include docu: actual template for windows
include::./firststeps_opsi-template-win.asciidoc[]


////
.define_vars_multi.opsiscript: Declaration of variables
[source,winst]
----
; -------------------------------------
; include file for opsi-setup-detector products
; Define all variables here
;---------------------------
DefVar $ProductId$
DefVar $InstallDir$
DefVar $InstallDir1$
DefVar $InstallDir2$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $OSshort$
DefVar $oldProgFound$
DefVar $installSuccess$
DefVar $installCommand$
DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $installerfile$
DefVar $distrotype$
DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $arch$
DefVar $tmpstr$
DefVar $targetfile$
DefVar $iconfile$

DefStringlist $ListOfPackageNames$
DefStringList $osinfomap$
----

.setup.opsiscript: Installation script
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

; All variables are defined here:
include_insert "define_vars_multi.opsiscript"

; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "osd-lib.opsiscript"

; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "opsi-template"
Set $MinimumSpace$	 = "1 MB"
; the path were we find the product after the installation
;Set $InstallDir$		= "%ProgramFiles32Dir%\<path to the product>"
Set $InstallDir$		= "unknown"
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = ""
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "Windows_NT"))
	logError "Installation aborted: wrong OS version: only Windows"
	isFatalError "wrong OS"
endif

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
	isFatalError "No Space"
	; Stop process and set installation status to failed
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

Message "Installing " + $ProductId$ + " ..."

if $LicenseRequired$ = "true"
	comment "Licensing required, reserve license and get license key"
	set $LicenseKey$ = get_licensekey_byPool($LicensePool$)
endif


comment "Start setup program"
ChangeDirectory "%SCRIPTPATH%"
;----------------------------------------------
Winbatch_install
;----------------------------------------------
set $ExitCode$ = getlastexitcode
if "true" = isMsiExitcodeFatal_short($exitcode$, "true", $ErrorString$ )
	LogError $ErrorString$
	isfatalerror $ErrorString$
else
	Comment $ErrorString$
endif

comment "Copy files"
Files_install /32Bit

comment "Patch Registry"
Registry_install /32Bit

comment "Create shortcuts"
LinkFolder_install

[Winbatch_install]
; Choose one of the following examples as basis for your installation
; You can use $LicenseKey$ var to pass a license key to the installer
;
; === Nullsoft Scriptable Install System ================================================================
; "%ScriptPath%\Setup.exe" /S
;
; === MSI package =======================================================================================
; You may use the parameter PIDKEY=$Licensekey$
; msiexec /i "%ScriptPath%\some.msi" /l* "%opsiLogDir%\$ProductId$.install_log.txt" /qb-! ALLUSERS=1 REBOOT=ReallySuppress
;
; === InstallShield + MSI=====================================================================================
; Attention: The path to the log file should not contain any whitespaces
; "%ScriptPath%\setup.exe" /s /v" /l* %opsiLogDir%\$ProductId$.install_log.txt /qb-! ALLUSERS=1 REBOOT=ReallySuppress"
; "%ScriptPath%\setup.exe" /s /v" /qb-! ALLUSERS=1 REBOOT=ReallySuppress"
;
; === InstallShield =====================================================================================
; Create setup.iss answer file by running: setup.exe /r /f1"c:\setup.iss"
; You may use an answer file by the parameter /f1"c:\setup.iss"
; "%ScriptPath%\setup.exe" /s /sms /f2"%opsiLogDir%\$ProductId$.install_log.txt"
;
; === Inno Setup ========================================================================================
; http://unattended.sourceforge.net/InnoSetup_Switches_ExitCodes.html
; You may create setup answer file by: setup.exe /SAVEINF="filename"
; You may use an answer file by the parameter /LOADINF="filename"
; "%ScriptPath%\setup.exe" /sp- /silent /norestart /nocancel /SUPPRESSMSGBOXES

[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"

[Registry_install]
; Example of setting some values of an registry key:
;
; openkey [HKEY_LOCAL_MACHINE\Software\$ProductId$]
; set "name1" = "some string value"
; set "name2" = REG_DWORD:0001
; set "name3" = REG_BINARY:00 af 99 cd

[LinkFolder_install]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of creating a shortcut to the installed exe in AllUsers startmenu:
;
; set_basefolder common_programs
; set_subfolder $ProductId$
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters:
; 	working_dir: $InstallDir$
; 	icon_file:
; 	icon_index:
; end_link
;
; Example of creating a shortcut to the installed exe on AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
;
; set_link
; 	name: $ProductId$
; 	target: <path to the program>
; 	parameters: <some_param>
; 	working_dir: $InstallDir$
; 	icon_file: <path to icon file>
; 	icon_index: 2
; end_link

; ----------------------------------------------------------------
; ----------------------------------------------------------------
----


.delsub.opsiscript: Uninstallation subscript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

Message "Check for existing installation of " + $ProductId$ + " ..."

Set $MsiId$ = '{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}'
Set $UninstallProgram$ = $InstallDir$ + "\uninstall.exe"

if FileExists($UninstallProgram$)

	comment "Uninstall program found, starting uninstall"
	Winbatch_uninstall
	Sub_check_exitcode_del

endif
if not (getRegistryValue("HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\" + $MsiId$ , "DisplayName","32bit") = "")

	comment "MSI id " + $MsiId$ + " found in registry, starting msiexec to uninstall"
	Winbatch_uninstall_msi
	Sub_check_exitcode_del

endif


comment "Delete files"
if not(($InstallDir$ = '') or ($InstallDir$ = 'unknown'))
	Files_uninstall
endif

comment "Cleanup registry"
Registry_uninstall

comment "Delete program shortcuts"
LinkFolder_uninstall

[Winbatch_uninstall]
; Choose one of the following examples as basis for program uninstall
;
; === Nullsoft Scriptable Install System ================================================================
; maybe better called as
; Winbatch_uninstall /WaitforProcessending "Au_.exe" /Timeoutseconds 10
; "$UninstallProgram$" /S
;
; === Inno Setup ========================================================================================
; "$UninstallProgram$" /silent /norestart /SUPPRESSMSGBOXES /nocancel

[Winbatch_uninstall_msi]
msiexec /x $MsiId$ /qb-! REBOOT=ReallySuppress

[Files_uninstall]
; Example for recursively deleting the installation directory:
;
; del -sf "$InstallDir$\"

[Registry_uninstall]
; Example of deleting a registry key:
;
; deletekey [HKEY_LOCAL_MACHINE\Software\$ProductId$]

[LinkFolder_uninstall]
; Example of deleting a folder from AllUsers startmenu:
;
; set_basefolder common_programs
; delete_subfolder $ProductId$
;
; Example of deleting a shortcut from AllUsers desktop:
;
; set_basefolder common_desktopdirectory
; set_subfolder ""
; delete_element $ProductId$

[Sub_check_exitcode_del]
set $ExitCode$ = getlastexitcode
if "true" = isMsiExitcodeFatal_short($exitcode$, "true", $ErrorString$ )
	LogError $ErrorString$
	isfatalerror $ErrorString$
else
	Comment $ErrorString$
endif

;-----------------------------------------------------
----


.uninstall.opsiscript: Uninstallation script
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

; All variables are defined here:
include_insert "define_vars_multi.opsiscript"

; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "osd-lib.opsiscript"

; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "opsi-template"
; the path were we find the product after the installation
;Set $InstallDir$	= "%ProgramFiles32Dir%\<path to the product>"
Set $InstallDir$	= "unknown"
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = ""
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "Windows_NT"))
	logError "Installation aborted: wrong OS version: only Windows"
	isFatalError "wrong OS"
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$

Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Set $tmpstr$ = FreeLicense($LicensePool$)
endif
----

////


[[opsi-client-softwintegration-create-opsi-package]]
=== Creating an opsi product

[[opsi-setup-detector-installation]]
==== Installation of opsi-setup-detector, {opsi-package-builder} and opsi-logviewer

// include docu: opsi-setup-detector installation
include::./setup-detector-installation.asciidoc[]


// include docu: opsi-logviewer installation
include::./opsi-logviewer-installation.asciidoc[]



[[opsi-winclient-softwintegration-tutorial-create-with-opsi-setup-detector]]
==== The opsi-setup-detector program for creating a Windows script

// include docu: opsi-setup-detector
include::./setup-detector-use-start.asciidoc[]

// include docu: Linux specific tasks in opsi-setup-detector
include::./osd_tasks_windows.asciidoc[]

// include docu: how to use the opsi-setup-detector
include::./osd-task-use-single-analyze-and-create.asciidoc[]

More details about `opsi-setup-detector` can be found in the opsi manual: +
https://download.uib.de/opsi_stable/doc/html/en/opsi-manual-v4.2/opsi-manual-v4.2.html#opsi-setup-detector

// include docu: how to use the opsiPackagebuilder
include::./softwintegration-tutorial-packagebuilder-use.asciidoc[]

// include docu: The modify and test cycle
include::./softwintegration-tutorial-modify-test-cycle.asciidoc[]