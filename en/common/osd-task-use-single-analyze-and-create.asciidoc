[[opsi-setup-detector-use-single-analyze-and-create]]
===== opsi-setup-detector: Analyze file and create opsi package

The workflow is here described using `Analyze file and create opsi package` as an example.

.opsi-setup-detector Start
image::osd_page_start_en.png["Startpage", pdfwidth=90%]

After you selected the task, you will get a file selection dialog.
Selct now the setup file that has to be analyzed.
The analyze will start directly after the selection is done.

[[opsi-setup-detector-use-single-analyze]]
===== opsi-setup-detector: Analyze


.opsi-setup-detector analysis
image::osd_page_analyze_en.png["Analysis", pdfwidth=90%]

If the analyze found no result, you will get here a `Sorry unknown Installer`.

image::osd_unknown_select_installer_en.png["Sorry unknown Installer", pdfwidth=40%]
In this dialog you may choose to abort the create process. You may also choose to continue based on the pattern of a choosable installer type.

If we have a successful analyze, you will see the result page.

.opsi-setup-detector Result of the analysis
image::osd_page_setup1_en.png["Result of analysis", pdfwidth=90%]

* *Detected Setup Type:* Type of detected Installer

* *MST allowed:*

* *Link* with information about the installer

* *Setup file:* Path and name of the analyzed setup file

* *MST file:* For MSI installers or installers which contain MSI, an MST file can be specified here which will be integrated into the MSI call.

* *MsiId:* For MSI installers or installers that contain MSI in the form of product code

* *Software version:* The version of the software to be installed if determinable.

* *Setup file size MB:* Size of the setup file in MB

* *Required space MB:* This value is an estimate of six times the size of the setup file and can be adjusted if necessary

* *InstallDir:* As far as detected the directory where the software will be installed.

* *Unattended installation command:* The determined command for a non-interactive installation.

* *Unattended deinstallation command:* The determined command for a non-interactive deinstallation.

* *Deinstallations program:* The determined deinstallations program

The values determined here can now be corrected or supplemented if necessary.
The button `Next Step` leads to the first page of the product configuration.
The metadata of the opsi product to be created is entered here.

CAUTION: The values determined here can be incorrect and are probably incomplete! +
After an initial installation, you should definitely check the values of *InstallDir*,
*deinstallation program* and *software version* and adjust them in your script if necessary.

[[opsi-setup-detector-product-configuration1]]
===== opsi-setup-detector: Product configuration 1

.opsi-setup-detector Product configuration 1
image::osd_page_product1_en.png["Product configuration 1", pdfwidth=90%]

* *opsi Product ID:* this is the name of the opsi package to be generated and is generated from the product name below, where spaces and other invalid characters are replaced by a '-'. The proposed opsi Product ID can of course be changed.

* *Product Name:* the name of the software to install. This may have to be corrected manually.

* *Product Version:* The version number determined from the name of the setup file must probably be corrected manually. It may only contain numbers and periods, since it's used for the versioning of the opsi package.

* *Description:* In this field the product name is given as default and should be completed with further hints, which are then set as product description of the opsi package.

* *License required:* If this checkbox is set, '$LicenseRequired$=true' will be set when patching the opsiscript.

[[opsi-setup-detector-product-configuration-priority_dependency]]
===== opsi-setup-detector: Priority and dependencies

.opsi-setup-detector Product configuration 2
image::osd_page_product2_en.png["Product configuration 2", pdfwidth=90%]

*For normal application software you don't have to do anything here,
due to the fact that the default settings 'fit'. You can press the `Next Step` button.*

Otherwise, here is an explanation of the settings that are possible:

Priority:: affects the installation order. *Recommended for application software: 0* +
Possible values are between 100 (at the very beginning) and -100 (at the very end). If product dependencies also exist, these will also additionally influence the installation sequence.

.Dependencies

Here you can define the dependencies between products. +
If the configuration contains the connection data for your opsi-server, the connection will here be started. If the configuration does not contain the password (for security reasons) you will be asked for the password:

image::osd_password_dlg_en.png["Password Dialog", pdfwidth=40%]


.opsi-setup-detector Dependency Editor
image::osd_dependency_editor.png["Dependency Editor", pdfwidth=40%]

Productid:: Productid (identifier) of the product to which a dependency exists. +
If there is a connection to the opsi-server, this will be noticed in green letters and you may select the `productId` in the DropDownBox. If there is no connection, this will be noticed in red letters and you have to write the `productId` in the input field.

Dependency Mode:: You can either request the *Action* +setup+ or (see below) the *Status* (+installed+).

Action or Status:: For *Status*: Status that the product to which a dependency corresponds, should have (+installed+). If there is another status, the product is set to +setup+. +
For *Action*: Action request, which should be set on the product, whereupon there is a dependency (+setup+). +
This control is disabled while creating a `Meta Product` to avoid sense less changes.

Dependency type:: Installation order. If the product for which there is a dependency must be installed before the installation of the current product, then this is +before+. If it must be installed after the current product, this is +after+. If the order doesn't matter then nothing has to be entered here. +
This control is disabled while creating a `Meta Product` to avoid sense less changes.

*Hint:*

Unfortunately there is currently no generic mechanism for uninstalling product dependencies. The Product Dependency mechanism is only reliable for action: setup and the (before- or after-) setup actions to be triggered and installed status, in the case of a requiredAction: uninstall this leads unfortunately to errors.

*Another hint:*

The actual installation order is determined by a combination of product dependencies and product prioritization. Details about this can be found in the opsi manual in the chapter 'Manipulating the installation sequence by priorities and dependencies'.

[[opsi-setup-detector-product-configuration-properties]]
===== opsi-setup-detector: Properties

Here, editable properties (product variables) can be defined for the product.

.opsi-setup-detector Property Editor
image::osd_property-editor.png["Property Editor", pdfwidth=40%]



[cols="10,20,20"]
|==========================
| Field / Function | Description | Notes
| Property Name | Name of the product variable |
This identifier is displayed in the product configuration in opsi-configed and can be read within the scripts with the function `GetProductProperty`.
| Property Type | Variable type | Possible values: `Text` / bool
| Multivalue | Determines whether the product variable can take only exactly one or multiple values | Only available for type `Text`
| Editable | Determines whether the default values can be overwritten with new or additional values or not | Only available for type `Text`
| Description | Variable function description | Displayed as tooltip in opsi-configed
| Possible values | Comma separated list of possible input values |
If editable is set to “True”, the list can be added later within opsi-configed. +
Only available for type `Text`
| Default value | Default value | Selection list;
Only available for type `text`: Free text field.
Only available for type 'Multivalue': Multiple selection
|==========================

[[opsi-setup-detector-product-configuration-icon]]
===== opsi-setup-detector: Product Icon

.opsi-setup-detector Produktkonfiguration 3 (Icon)
image::osd_page_producticon_de.png["Product configuration 3 (Icon)", pdfwidth=90%]

Here you can select an icon to be displayed during the installation or you can accept the default icon (cogwheel) with `Next step` and switch to the next tab... +


To select another icon, use the button `Open icon directory` to select the directory in which you expect to find icons. As a preselection you get a directory of 'open source' icons: 128x128, supplied with the `opsi-setup-detector`. Select a subdirectory and the icons will be displayed. +
Now you can select an icon from the display.

After the product configuration is performed, the product can be created.

[[opsi-setup-detector-product-create]]
===== opsi-setup-detector: Create product


.opsi-setup-detector create product
image::osd_page_create_en.png["Create product", pdfwidth=90%]

* `Path to opsi-workbench` is a drive letter or UNC path where the share `opsi_workbench` of your opsi-server is mounted.

* To the left of the button `Create opsi package` there are three possible options, which refer to the function of the button:

* `Create Mode` is a selection area where you can specify what happens when creating the package:

* `Create opsi product files` creates the directory tree for the new opsi package on the selected `opsi workbench` if it does not already exist. The files required for the package will be created or copied.

* `Create opsi product files and build package` performs the operations described in the first point. +
Additionally, the `opsi Package Builder` is called to create the opsi package from the created directory tree. The exact processes are determined by the selection field `Tree mode`:

** `Only build` starts the `opsi Package Builder` without interactive GUI, creates an opsi package from the directory tree via server command `opsi-makepackage` and terminates the `opsi Package Builder` after work is done.

** `build and install` starts the `opsi Package Builder` without interactive GUI, creates from the directory tree via server command `opsi-makepackage` an opsi package installs the package via server command `opsi-package-manager` and finishes the `opsi Package Builder` after the work is done.

* `Create opsi product files and start interactive package builder` performs the operations listed in the first item. +
Additionally the `opsi Package Builder` is called interactively. +
You have to quit it yourself to return to the `opsi-setup-detector`.
For installation, configuration and operation of the community project `opsi Package Builder` check https://forum.opsi.org/viewforum.php?f=22

* `Create opsi package` is the button that initiates the package creation. +
If a package with this name already exists, you will be asked if the files in the existing directory should be backuped or deleted:

image::osd_overwrite_dlg_en.png["Backup Dialog", pdfwidth=40%]
