
[[opsi-softwintegration-tutorial-create-and-test-script]]
==== Testing and improving an {opsi-script} script

For testing and improving a script / product there are two different variants:

* Testing the created script as 'standalone' i.e. without installing it on the opsi-server and deploying it from there to the client.

* 'Integrated' testing of the complete product with installation on the server and deployment on a client.

In both cases it will be assumed here that you have created a project with the `opsi-setup-detector`.

[[opsi-softwintegration-tutorial-create-and-test-script-standalone]]
===== 'Standalone' tests

Start the application {opsi-script-gui}: with double click.

* Windows: Double-click the file `winst32.exe`. +
(When starting the program on a Windows 7 / 10 client, "run as administrator" must be used with the right mouse button). If the `opsi-client-agent` is already installed on your computer, you will find it in `C:\Program files (x86)\opsi.org\opsi-client-agent\opsi-winst\winst32.exe`.
If not, copy the `opsi-winst` directory from the share `\\<opsiserver\opsi_depot`, from the `opsi-winst\files.` directory.

* Linux: start file `/usr/bin/opsi-script-gui`.

* MacOS: Start the application `/Applications/opsi-script-gui`.

You'll see the following window:

.{opsi-script-gui} in interactive mode
image::winst-interactive.png["Screenshot: {opsi-script-gui} in interactive mode",400]

* With 'Select Script' you can select the script you want to run.

* With 'Start' you can start the script. With it, the script will be executed on this computer.


* Now open the log file with the `opsi-logviewer` to see how the {opsi-script} interprets the script. +
Make sure that you can adjust the displayed log level with the slider in the lower right hand corner.

* Open the script `setup.opsiscript` in an editor and make the desired changes (do not forget to save). There are several ways to do this:

** Open the project in `{opsi-package-builder}` and open the editor from there.

** In principle you can use any other editor of your choice. +
We recommend the editor 'jEdit' with {opsi-script} syntax highlighting, that you can find in the basic opsi products.

.jEdit with an opsi script
image::jedit-with-winst-script.png["jEdit with an opsi script",400]

* You can now customize and save the script in the editor (you can leave the editor open). +
Switch to the {opsi-script} window and start the script again with the 'Start' button (the script does not have to be selected again). +
View the log modified based on your changes in the script with the `opsi-logviewer`. (Don't forget `reload` via context menu or toolbar button).

* In this way, i.e. by repeating the points: +
 - Customize the script and save it +
 - Execute script +
 - Check log +
you can gradually tailor your scripts to do what you need.

Hints for solving detailed problems can be found in the next chapter.
The chapter after the following explains how to create an opsi product from the scripts created in this manner, which you can install on the {opsi-server}.


[[opsi-softwintegration-tutorial-create-and-test-script-integrated]]
===== 'Integrated' tests

With the 'integrated tests' the whole project is always executed by opsi on a test client. Proceed as follows:

* Open the script `setup.opsiscript` in an editor and make desired changes (do not forget to save). There are several ways to do this:

** Open the project in `{opsi-package-builder}' and open the editor from there.

** In principle you can also use any other editor. +
We recommend the editor 'jEdit' with {opsi-script} syntax highlighting, that you can find in the basic opsi products.

* Product Packing

** Variant 1: Open the project in the `{opsi-package-builder}` and start the packing via the button `Pack`.

** Variant 2: Login via terminal (e.g. Putty) to the opsi-server and change to the project directory on the workbench. Pack the product with the command `opsi-makepackage`.

* Install the product on the opsi-server.

** Variant 1: Start the install in the `{opsi-package-builder}` with the button `install`.

** Variant 2: Start the install in the terminal in the project directory with the command `opsi-package-manager -i <myproctid_version.opsi>`. Where <myproctid_version.opsi> is the filename that was output in the previous step when packing.

* Select and start product via `opsi-configed`

. Select the test client in the tab `Clients`

. In the tab `Product configuration` select the product. If the product is not visible (which is normal after the first installation) reload the data via the menu 'File / Reload all data' or the button on the very left of the toolbar.

. For the selected product set the action request `setup` and save.

. Start the client or start it via context menu `on_demand` if the client is running.

. Wait until the product has run through on the client.

- In the tab 'Logfiles / instlog' inspect the log file to see how the {opsi-script} interprets the script. +
Note that you can adjust the log level displayed here with the slider in the lower right hand corner.

* In this way, repetition of the points mentioned: +
 - Adaptation of the script and saving +
 - Pack product +
 - Install product on the server +
 - Run product on the client +
 - check log +
you can gradually customize your scripts to do what you need.

[[opsi-softwintegration-create-opsi-package-makeproductfile]]
==== Packing with opsi-makepackage

Afterwards you can pack the product. To do this, go to the root directory of the product and execute 'opsi-makepackage'. Now the product will be packed.

It's recommended to create the packages immediately with an associated md5 checksum file.
This file is used by `opsi-package-updater` among others to ensure package integrity after package transfer.
Such a file is created automatically, but for special usage scenarios its creation can be avoided.

When transferring packages on the {opsi-depotserver}, 'zsync' can be used to transfer only differences between different packages.
In order to use this method, a special `.zsync` file is needed.
Such a file is created automatically, but for special usage scenarios the creation can be avoided.

If there are space problems in the temporary directory `/tmp` when creating large packages, it's possible to specify an alternate temporary directory using `--temp-directory`.

If a package of this version already exists, `opsi-makepackage` will show a query:

[source,prompt]
----
Package file '/var/lib/opsi/workbench/mytest/mytest_3.14-1.opsi' already exists.
Press <O> to overwrite, <C> to abort or <N> to specify a new version:
----

With `o` you can choose to overwrite, with `c` you cancel the process and with `n` you can choose to be asked for a new product or package version.

You can install the packed package on the server with `opsi-package-manager --install <package-file>`

More details about the `opsi-makepackage` can be found in the opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools


[[opsi-softwintegration-create-opsi-package-manager]]
==== Installing with opsi-package-manager

To install the packed product there is a command `opsi-package-manager` . To do this, go to the root directory of the product and execute the following command.

[source,prompt]
----
opsi-package-manager -i <myproductid_version.opsi>
----

More details about the `opsi-package-manager` can be found in the opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-manual-configuration-tools

[[opsi-softwintegration-example-control]]
==== Example of a 'control' file

[source,configfile]
----
[Package]
version: 1
depends:

[Product]
type: localboot
id: mytest
name: My Test
description: A test product
advice:
version: 3.14
priority: 10
licenseRequired: False
productClasses:
setupScript: setup.ins
uninstallScript:
updateScript:
alwaysScript:
onceScript:
customScript:
userLoginScript:

[ProductDependency]
action: setup
requiredProduct: javavm
requiredStatus: installed

[ProductProperty]
type: unicode
name: mytextprop
multivalue: False
editable: True
description: hint
values: ["off", "on"]
default: ["off"]

[ProductProperty]
type: bool
name: myboolprop
description: yes or no
default: False

[Changelog]
mytest (3.14-1) testing; urgency=low

  * Initial package

 -- jane doe <j.doe@opsi.org>  Mi, 14 Jul 2010 12:47:53 +0000
----
