////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.2
:toc: left
:toclevels: 3
:numbered:
:icons: font
:xrefstyle: full
:doctype:   book
:date:      26.05.2021

:linclientmanual: opsi-linux-client-manual

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi Linux client manual

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


[[opsi-linclient-introduction]]
== Einführung Linux Clients in opsi

Diese Anleitung beschreibt den Betrieb von Linux Clients in opsi.

Es wird voraus gesetzt, das die Installation und Inbetriebnahme eines {opsi-Server}s bereits erfolgt ist.

Wesentliche Themen dieser Anleitung:

. Automatische Linux OS-Installation
. Aufnahme und Einbindung von Linux-Rechnern in opsi
(Installation des opsi-linux-client-agent)
. Bereitstellung von opsi Standardsoftware für Linux auf dem opsi-server
. Installation von Standard Software auf den Linux-Clients
. opsi-Standardsoftware für Linux unter opsi
. Paketierung eigener Software
. Erstellung von opsi-Paketen
. Hinweise zu Linux Clients
.. Spezielle Befehle für Linux
.. Directories die Sie verwenden dürfen


[[opsi-linclient-convention]]
== Konventionen dieses Dokuments

Befehle werden gesondert hervorgehoben:

[source,prompt]
----
dies ist ein Befehl
----

Im Rahmen der Installation und Konfiguration können Sie die Befehle aus diesen Feldern in der Regel der Reihe nach per _copy & paste_ aus diesem Dokument kopieren und ausführen.

Das ist ein opsi-script Code:

[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Kapitel welche den Namen einer bestimmten Plattform enthalten sind spezifisch für diese Plattform. Die unterstützen Plattformen sind:

* *Windows*

* *Linux*

* *MacOS*


[[opsi-linclient-requirements]]
== Voraussetzungen für Linux Clients

Nachfolgend werden die Voraussetzungen für das Management von Linux Clients unter opsi beschrieben.

Der opsi-linux-client-agent ist eine
http://uib.de/de/opsi-erweiterungen/erweiterungen/[kofinanzierte opsi Erweiterung]. +
Das bedeutet, dass Sie zum Einsatz eine Freischaltdatei benötigen. Diese Freischaltung erhalten Sie wenn Sie die Erweiterung kaufen. Zu Evaluierungszwecken stellen wir Ihnen auch eine zeitlich befristete Freischaltung kostenlos zur Verfügung ( -> mail an info@uib.de). +
Weitere Details hierzu finden Sie in +
https://download.uib.de/opsi_stable/doc/html/opsi-manual/opsi-manual.html#opsi-manual-modules

Technische Voraussetzungen ist ein opsi-server mit opsi 4.1.

[[opsi-linclient-supportmatrix-clients-linux]]
== Von opsi unterstützte Linux Distributionen / Versionen

include::../../en/common/opsi_manual_supportmatrix-linclient-core.asciidoc[]


[[opsi-linclient-installation-config-get-essential-products]]
== Einspielen der minimalen Linux opsi-Produkte


[[opsi-linclient-installation-config-get-essential-products-automatic]]
=== Automatisches Einspielen der minimalen Linux opsi-Produkte

Zur automatischen Installation der opsi-Produkte gibt es das Werkzeug `opsi-package-updater`, welches wie in '/etc/opsi/opsi-package-updater.conf' bzw. `/etc/opsi/package-updater.repos.d/` konfiguriert, automatisch die aktuellen Pakete vom opsi Repository holt und auf dem Server installiert.

Die Konfiguration der opsi Repositories für Linux-Clients findet sich im Verzeichnis `/etc/opsi/package-updater.repos.d/` in der Datei `uib-linux.repo`.

Aktivieren Sie die gewünschten repos in dem Sie in der gewünschten *.repo Datei den Eintrag `active = true` setzen.

.`/etc/opsi/package-updater.repos.d/uib-linux.repo`

[source,configfile]
----
; This repository provides products for deploying and managing Linux
; clients with opsi.

[repository_uib_linux]
description = opsi Linux Support
active = true
baseUrl = http://download.uib.de
dirs = opsi4.2/stable/packages/linux/localboot/, opsi4.2/stable/packages/linux/netboot/
; dirs = opsi4.1/stable/packages/linux/localboot/, opsi4.1/stable/packages/linux/netboot/
; dirs = opsi4.2/testing/packages/linux/localboot/, opsi4.1/testing/packages/linux/netboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =

----

Installieren Sie die Pakete auf dem Server durch die Ausführung des Befehls als root:

[source,prompt]
----
opsi-package-updater -v --repo uib_linux install
----


Nach erfolgreicher Installation müssen Sie beim `opsi-configed` ein erneutes laden aller Daten ausführen, damit die neuen Produkte dort sichtbar werden.

Muss für den Zugriff auf das Internet die Verbindung über einen Proxy geleitet werden, so muss dieser in den `.repo`-Konfigurationsdateien unter `/etc/opsi/package-updater.repos.d/` als Wert für `proxy` eingetragen werden.
Ab Version 4.1.1.33 von opsi-utils kann ein globaler Proxy in `/etc/opsi/opsi-package-updater.conf` konfiguriert werden.

[source,configfile]
----
[repository_uib_linux]
…
proxy =
----

Sollen später installierte Pakete aktualisiert werden, so kann dies mit dem folgenden Befehl gelinuxht werden:
[source,prompt]
----
opsi-package-updater -v update
----

Weitere Informationen zum `opsi-package-updater` können im Handbuch gefunden werden.



[[opsi-linclient-installation-config-get-essential-products-manually]]
=== Manuelles Einspielen der Linux opsi-Produkte

Es gibt auch die Möglichkeit manuell die Pakete herunter zu laden und zu installieren.

Holen Sie sich die aktuellen opsi-Pakete im `.opsi`-Paketformat.
Die Pakete finden Sie unter `https://download.uib.de/opsi4.2/stable/packages/linux/localboot` bzw. unter `https://download.uib.de/opsi4.2/testing/packages/linux/localboot`.

Wir empfehlen die .opsi-Dateien unter `/var/lib/opsi/repository` zu speichern.
Zum Sicherstellen, dass opsiconfd auf die Dateien zugreifen kann, sollte `opsi-set-rights /var/lib/opsi/repository` ausgeführt werden.

Nach dem Download müssen Sie die Pakete auf dem Server mit dem Befehl `opsi-package-manager -i <paketname>.opsi` installieren.

[[firststeps-software-deployment-client-integration]]
== Integration vorhandener Linux-Clients in opsi

Um vorhandene Linux-Clients in opsi aufzunehmen, muss auf diesen der {opsi-client-agent} installiert werden.
Dies kann auf mehrere Arten durchgeführt werden.
Nachdem Sie, wie im Folgenden beschrieben, den {opsi-client-agent} installiert haben, erscheint der Client auch in der Client-Liste des {opsi-configed}, sofern Sie ihn dort noch nicht hinzugefügt hatten.


Grundsätzlich gibt es die Möglichkeit die Installation des Agenten <<firststeps-software-deployment-client-integration-service-setup,auf dem Client auszuführen>> oder <<firststeps-software-deployment-client-integration-opsi-deploy,vom Server aus>> die Installation anzustoßen.

Das Ausführen der Installation direkt auf dem Client eignet sich für einzelne Rechner.
Für einen Massen-Rollout des Agenten eignet sich grundsätzlich der <<firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>>
besser, wenn die dazu nötigen Freischaltungen auf den Linux-Clients vorhanden sind.

Falls bereits eine andere Möglichkeit existiert Software zu verteilen, so ist es ebenfalls möglich darüber den opsi-client-agent zu verteilen und das im Paket mitgelieferte Script `silent_setup.sh` auszuführen.

Sobald der Agent installiert ist, können vorhandene opsi-Produkte auf diesen Clients <<firststeps-software-deployment-product-tests,installiert>> werden.




[[firststeps-software-deployment-client-integration-service-setup]]
=== Verwendung von service_setup.sh auf Linux


[[firststeps-software-deployment-client-integration-service-setup1]]
==== Verwendung von service_setup.sh auf Linux (Erst- oder Reperaturinstallation)


* Loggen Sie sich auf dem Client ein.
* Starten Sie das Terminal-Programm
* Für die folgenden Befehle müssen Sie die folgenden Platzhalter ersetzen:
**  `<username>` mit Ihrem login Namen
** `<mnt>` durch ein Verzeichnisnamen der noch nicht existiert z.B. 'mnt'
** `<serviceuser>` durch einen Usernamen der auf dem opsi-server bekannt ist.
** `<servicepass>` durch das Passwort des <serviceuser>. Sie können `:<servicepass>` zusammen mit der mount-Option `-N` auch weglassen, dann werden Sie nach dem Passwort gefragt
** `<opsi-server>` durch den Namen oder die IP-Nummer des opsi-servers

[source,prompt]
----
sudo su
cd /mnt
mount.cifs //<opsi-server>/opsi_depot /mnt -o user=<serviceuser>
cd /mnt/opsi-linux-client-agent
./service_setup.sh
cd
umount /mnt
----

bzw. ohne Passwortabfrage

[source,prompt]
----
sudo su
cd /mnt
mount.cifs //<opsi-server>/opsi_depot /mnt -o user=<serviceuser>, pass=<servicepass>
cd /mnt/opsi-linux-client-agent
./service_setup.sh
cd
umount /mnt
----

Beispiel:

[source,prompt]
----
sudo su
cd /mnt
mount.cifs //sepia/opsi_depot /mnt -o user=adminuser
cd /mnt/opsi-linux-client-agent
./service_setup.sh
cd
umount /mnt
----


. Starten Sie von dem gemounteten share das Script `opsi-linux-client-agent\service_setup.sh` +
Bestätigen Sie mit 2 x Enter
. Das Skript kopiert die notwendigen Dateien in ein temporäres lokales Verzeichnis und startet dann zur eigentlichen Installation opsi-script.
. Das Skript nimmt per opsi-Webservice Kontakt zum Server auf um serverseitig den Client zu erzeugen und den pckey zu erfahren. Dies erfolgt zunächst mit der in der config.ini eingetragenen user/password Kombination. Schlägt dies fehl, so erscheint ein Login-Fenster mit Service-URL ({opsi-configserver}), Benutzername und Passwort. Hier wird ein Benutzer benötigt, der Mitglied der Gruppe 'opsiadmin' ist. Möglich ist auch ein Benutzer, welcher nur die Methode `host_createOpsiClient` ausführen darf.

CAUTION: Der Client benötigt nach der Installation ein Reboot um aktiv zu werden. +
Der Reboot wird *nicht* automatisch ausgelöst.


[[firststeps-software-deployment-client-integration-opsi-deploy]]
=== Verwendung von opsi-deploy-client-agent für Linux

Das `opsi-deploy-client-agent` Skript verteilt den {opsi-client-agent} direkt vom {opsi-server} auf die Clients.
Es ist hiermit einfach möglich eine große Menge an Clients vom Server aus in eine opsi-Umgebung zu integrieren.
Voraussetzung hierfür sind bei den Clients:

* ein aktivierter ssh Zugang
* Administrativer User mit Passwort


Das `opsi-deploy-client-agent` Skript findet sich unter `/var/lib/opsi/depot/opsi-client-agent` +
Führen Sie das Script mit 'root' Rechten aus.
Falls das Script nicht ausführbar ist, so können Sie dieses Problem mit dem folgenden Befehl beheben: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

Das Skript erzeugt serverseitig den Client, kopiert die Installations-Dateien und Konfigurationsinformationen, wie bspw. den pckey, auf den Client und startet dort die Installation. +
Die Installation läuft im Hintergrund ohne das ein User davon etwas bemerken muß.

Der Befehl `opsi-deploy-client-agent` hat eine Fülle von Aufrufparametern. +
Bei allen nachfolgenden Beispielen wird davon ausgegangen, das Sie in das Stammverzeichnis des opsi-client-agent Produktes gewechselt sind: +

[source,prompt]
----
cd /var/lib/opsi/depot/opsi-linux-client-agent
----

Typische Aufrufe sind:

* Für einen einzelnen Client:

[source,prompt]
----
./opsi-deploy-client-agent -v --user=uib uib-mmini1
----

Ergibt folgende Ausgabe:

[source,ini]
----
Password is required for deployment.
Password:
[5] [2021-02-04 16:43:43.121] [               ] Starting deployment to host uib-mmini1.uib.local   (posix.py:84)
[5] [2021-02-04 16:43:43.121] [               ] Querying for ip address of host uib-mmini1.uib.local   (common.py:158)
[5] [2021-02-04 16:43:43.122] [               ] Got ip address 192.168.10.70 from syscall   (common.py:167)
[5] [2021-02-04 16:43:43.123] [               ] Pinging host 192.168.10.70 ...   (common.py:183)
[5] [2021-02-04 16:43:44.146] [               ] Host 192.168.10.70 is up   (common.py:194)
[5] [2021-02-04 16:43:44.153] [               ] Patching config.ini   (posix.py:91)
[5] [2021-02-04 16:43:44.157] [               ] Copying installation scripts...   (posix.py:107)
[5] [2021-02-04 16:43:48.316] [               ] Running installation script...   (posix.py:147)
[5] [2021-02-04 16:43:53.382] [               ] opsi-client-agent successfully installed on uib-mmini1.uib.local   (posix.py:176)
[5] [2021-02-04 16:43:53.395] [               ] Restarting opsiclientd service on computer: uib-mmini1   (posix.py:331)
[5] [2021-02-04 16:43:55.620] [               ] 1/1 deployments successfully   (__init__.py:210)
----

* Für eine Liste von Clients:

[source,prompt]
----
./opsi-deploy-client-agent -v --user=uib --hosts-from-file HOSTFILE.TXT  --skip-existing-clients
----

Hier ist HOSTFILE.TXT eine Datei mit einem Clientnamen (FQDN) pro Zeile. Soweit die Clients dem opsi-server noch nicht bekannt sind, wird versucht den `opsi-linux-client-agent` auf dieser Maschine zu installieren

* Anzeigen alle Kommandozeilen Parameter:

[source,prompt]
----
./opsi-deploy-client-agent --help
----


[[firststeps-software-deployment-product-tests]]
== Rollout existierender Produkte auf Linux

Für den Rollout von Software auf Clients muss auf diesen der 'opsi-client-agent' installiert sein.
Dieser kann auf <<firststeps-software-deployment-client-integration,bestehende Rechner>> ausgerollt werden.


Nachfolgend wird die Management-Oberfläche <<firststeps-software-deployment-product-tests-configed,{opsi-configed}>> verwendet, um Software auf Clients zu verteilen.


Folgende Produkte werden von opsi für Linux als Standard zur Verfügung gestellt:

* `opsi-linux-client-agent`
* `swaudit`
* `hwaudit`
* `l-system-update`
* `opsi-configed`
* `opsi-logviewer`
* `opsi-auto-update`
* `opsi-linux-client-kiosk`
* `opsi-setup-detector`
* ``



include::../common/firststeps-swdp-product-tests-configed.asciidoc[]

include::../common/firststeps-swdp-product-tests-inventory.asciidoc[]


////
[[opsi-linclient-std-netboot-packages]]
=== opsi-netboot Pakete zur OS Installation von Linux durch opsi
////

include::../common/firststeps-configed.asciidoc[]

include::../common/firststeps-adding-clients.asciidoc[]

include::../common/firststeps-osinstall-hwinvent.asciidoc[]

////
[[opsi-linclient-std-localboot-packages]]
=== opsi-Standardsoftware für Linux unter opsi

Zur Verteilung von Software mit opsi stehen fertige Produkte zur Installation bereit.
Diese beinhalten unter anderem den Agent ('opsi-client-agent'), welcher für das Management auf Clients installiert werden muss.

Es gibt eine automatische und manuelle Möglichkeit dies zu tun.
Der automatisierte Weg wird empfohlen.
////

////
Folgende Produkte werden von opsi für Linux als Standard zur Verfügung gestellt:

* `opsi-linux-client-agent`
* `swaudit`
* `hwaudit`
* `l-system-update`
* `opsi-configed`
* `opsi-logviewer`
* `opsi-auto-update`
* `opsi-linux-client-kiosk`
* `opsi-setup-detector`
* ``



[[firststeps-software-deployment-product-tests-inventory]]
=== Inventarisierung mit dem localboot-Produkten hwaudit und swaudit

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +hwaudit+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'. Wiederholen Sie das für das Produkt +swaudit+.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und die Produkte +hwaudit+ und +swaudit+ installieren.
Bei +hwaudit+ und +swaudit+ werden Hard- bzw. Softwareinformationen erhoben und zum {opsi-Server} übermittelt.
Die gesammelten Informationen werden unter den Tabs 'Hardwareinformationen' bzw. 'Software-Inventur' angezeigt.

[[firststeps-software-deployment-product-tests-configed]]
=== Verteilung von opsi Standard Produkten: opsi-configed

Zu den Standard-Produkten gehört das Produkt `opsi-configed` welches das opsi Management Interface als Anwendung auf einem Rechner installiert.
Da diese Anwendung eine Java-Anwendung ist, wird ein JavaRE mitgeliefert.

Wählen Sie im '{opsi-configed}', Modus 'Client-Konfiguration', unter dem Reiter 'Clients' den betreffenden Client aus.

Wenn noch nicht geschehen, aktualisieren Sie den Datenbestand des {opsi-configed}s mittels 'Datei/Daten neu laden' bzw. Anklicken des entsprechenden Icons.

Wechseln Sie zum Reiter 'Produktkonfiguration', klicken Sie in die Spalte 'Angefordert' für das Produkt +opsi-configed+, daraufhin öffnet sich eine Liste/Dropdown-Menü und dort wählen Sie die Aktion 'setup'.

Der Haken in der Icon-Menüleiste sollte seine Farbe auf Rot wechseln. Wenn Sie ihn anklicken, werden die neuen Einstellungen zum {opsi-Server} übermittelt, im Anschluss ist seine Farbe wieder grün.

Starten Sie dann den Client (neu).
Er sollte jetzt den +opsi-client-agent+ starten und das Produkt +opsi-configed+ installieren.
Nach Abschluß der Installation sollten Sie unter `Anwendungen` den Punkt `opsi-configed` finden.
////

include::../common/firststeps-osinstall_lin.asciidoc[]

[[opsi-linclient-softwintegration]]
== Einbindung eigener Software in die Softwareverteilung von opsi

Die Installation von Software erfolgt bei opsi durch den {opsi-client-agent} und insbesondere durch das Script gesteuerte Setup Programm {opsi-script}. Daher muss zu jedem opsi-Produkt ein {opsi-script}-Script erstellt werden. Danach werden dieses Script, die Installationsdateien und die Metadaten zu einem opsi-Produkt gepackt, welches sich schließlich auf dem {opsi-Server} installieren lässt.

[[opsi-linclient-softwintegration-tutorial]]
=== Ein kleines Tutorial zur Erstellung eines {opsi-script} Scriptes


include::../common/softwintegration-tutorial-introduction.asciidoc[]

[[opsi-linclient-softwintegration-tutorial-general]]
==== Methoden der nicht interaktiven Softwareinstallation bei Linux

Linux hat (im Gegensatz zu Windows) vergleichsweise stark standadisierte Paketformate und Installationsmetoden. Die Problematik liegt bei Linux in der Vielzahl von Distributionen, die sich wiederum in den Paketformaten und Installationsbefehlen unterscheiden.
Im Kern gibt es folgende Varianten:

* Installation eines Paketes aus einem Repository
* Installation eines Paketes aus einer Datei (*.rpm, *.deb)
* Installation mit einem Third-Party Installer
* Installation aus dem Quellcode (make install)


In den ersten beiden Fällen ist eine `unattended` (also nicht interaktive) Installation kein Problem.

Häufig wird Linux Software in gepackten Formaten angeboten wie *.zip oder auch *.tgz.

Alle bisher genannten Varianten können per opsi-script direkt installiert werden, außer *.tgz welches vorher ausgepackt werden muß.

include::../common/softwintegration-tutorial-script-structure-opsi-script-basics.asciidoc[]
//
[[opsi-linclient-softwintegration-tutorial-Linux-special-commands]]
===== Spezielle Kommandos für Linux

siehe auch: https://download.uib.de/opsi_stable/doc/html/opsi-winst-manual/opsi-winst-manual.html#opsi-winst-rc-linux-specific

* GetOS   // liefert: Linux or Windows_NT or MacOS [W/L/M]

* getLinuxDistroType // liefert: debian or redhat or suse [L] +
https://download.uib.de/opsi_stable/doc/html/opsi-winst-manual/opsi-winst-manual.html#getLinuxDistroType

* getLinuxVersionMap [L] +
https://download.uib.de/opsi_stable/doc/html/opsi-winst-manual/opsi-winst-manual.html#getLinuxVersionMap

Siehe auch: +
http://bonifax.uib.local/opsidoc/git-stable/html/opsi-winst-manual/opsi-winst-manual.html#opsi-script-rc-linux-specific

In den folgenden Kapiteln werden spezielle opsi Linux Befehle zur Installation von Software vorgestellt welche aus der opsi-script Library `uib_lin_install` stammen. Diese Dokumentation ist in Englisch, da sie direkt aus dem Quellcode automatisch generiert wurde.

Zum Verständnis zunächst ein Überblick über die unterschiedlichen Ansätze der Methoden:

* Distributionsunabhängige Methoden:

** `cleanupPackageSystem`

** `installupdates`

* Installation von einem oder mehreren Paketen aus online Repos für eine spezifische Distribution +
Soll nur ein Paket installiert werden, so ist in dem Aufrufen statt $packagelist$, zu verwenden: `createStringList(<package name>)` +
Die Paketnamen in der Liste müssen zur Distribution / Version passen.

** debinstall($packagelist$ : stringlist) : string //since 4.13.4 [L]

** redinstall($packagelist$ : stringlist) : string //since 4.13.4 [L]

** suseinstall($packagelist$ : stringlist) : string //since 4.13.4 [L]

** ucsinstall($packagelist$ : stringlist) : string //since 4.13.4 [L]

* Installation / Deinstallation von einem oder mehren Paketen für eine bekannte Distribution / Version (d.h. Paketnamen müssen passen). +
Der notwendige Befehl wird anhand der Distribution ermittelt.

** genericLinInstall($packagelist$ : stringlist) : string

** linuxRemoveOnePackage($packagename$ : string) : string

** linuxInstallOneFile($packagefile$ : string) : string


* Installation / check / deinstallation von einem Paket aus online Repos für unterschiedliche Distributionen / Versionen, weswegen das Paket auch unterschiedliche Namen haben kann. +
D.h. es wird davon ausgegangen, das die Paketnamen in der Liste alles pseudonyme für das selbe Paket sind aber für unterschiedliche Versionen bzw. Distributionen.
Der notwendige Befehl wird anhand der Distribution ermittelt.

** linuxInstallOneOf($packagelist$ : stringlist) : string

** isOneInstalled($packagelist$ : stringlist) : string

** linuxRemoveOneOf($packagelist$ : stringlist) : string

// http://www.methods.co.nz/asciidoc/userguide.html#X90
:leveloffset: 4

// Include os-lib_uib_Linuxinstalllib.asciidoc
include::../../en/common/os-lib_uib_lin_install.asciidoc[]

:leveloffset: 0

[[opsi-linclient-softwintegration-tutorial-template]]
==== Drittes Beispiel: Linux-Template 'l-opsi-template'

Dieses Template können Sie sich mit dem `opsi-setup-detector` erstellen.

.define_vars_multi.opsiscript: Variablen deklaration
[source,winst]
----
; -------------------------------------
; include file for opsi-setup-detector products
; Define all variables here
;---------------------------
DefVar $ProductId$
DefVar $InstallDir$
DefVar $InstallDir1$
DefVar $InstallDir2$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $OSshort$
DefVar $oldProgFound$
DefVar $installSuccess$
DefVar $installCommand$
DefVar $MsiId$
DefVar $UninstallProgram$
DefVar $installerfile$
DefVar $distrotype$
DefVar $distCodeName$
DefVar $distroName$
DefVar $distRelease$
DefVar $arch$
DefVar $tmpstr$
DefVar $targetfile$
DefVar $iconfile$

DefStringlist $ListOfPackageNames$
DefStringList $osinfomap$

----

.setup.opsiscript: Installationsscript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; ----------------------------------------------------------------
encoding=utf8

[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

; All variables are defined here:
include_insert "define_vars_multi.opsiscript"

; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "osd-lib.opsiscript"
importlib "uib_lin_install.opsiscript"

; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "l-opsi-template"
Set $MinimumSpace$	 = "1 MB"
; the path were we find the product after the installation
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = ""
; enter here names of the package at the supported Distributions / Versions
Set $ListOfPackageNames$ = CreateStringList("<packagename>")
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "linux"))
	logError "Installation aborted: wrong OS version: only linux"
	isFatalError "wrong OS"
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$

Message "Installing " + $ProductId$ + " ..."

if $LicenseRequired$ = "true"
	comment "Licensing required, reserve license and get license key"
	set $LicenseKey$ = get_licensekey_byPool($LicensePool$)
endif

comment "Start setup "
ChangeDirectory "%SCRIPTPATH%\files1"
;----------------------------------------------
cleanupPackageSystem()
;----------------------------------------------
; To create a new repo: described in the opsi-script manual (Linux)
;
; install a package from a existing repo:
; set $installSuccess$ = linuxInstallOneOf($ListOfPackageNames$)
; set $exitcode$ = boolToGenericExitcode($installSuccess$)
;
; install a deb/rpm file:
; Belongs on the distribution. tyr to analyze with opsi-setup-detector
;----------------------------------------------
cleanupPackageSystem()
;----------------------------------------------
if "true" = isGenericExitcodeFatal($exitcode$, "true", $ErrorString$ )
	LogError $ErrorString$
	isfatalerror $ErrorString$
else
	Comment $ErrorString$
endif

comment "Copy files"
Files_install

[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"

; ----------------------------------------------------------------
; ----------------------------------------------------------------
----


.uninstall.opsiscript: Deinstallations-Skript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8


[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

; All variables are defined here:
include_insert "define_vars_multi.opsiscript"

; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "osd-lib.opsiscript"
importlib "uib_lin_install.opsiscript"


; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "l-opsi-template"
; the path were we find the product after the installation
Set $InstallDir$	= "<none>"
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = ""
; enter here names of the package at the supported Distributions / Versions
Set $ListOfPackageNames$ = CreateStringList("<packagename>")
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "linux"))
	logError "Installation aborted: wrong OS version: only linux"
	isFatalError "wrong OS"
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Set $tmpstr$ = FreeLicense($LicensePool$)
endif
----

.delsub.opsiscript: Deinstallations-SubSkript
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

comment "Start the Uninstall check:"
set $oldProgFound$ = "false"
if stringToBool(isOneInstalled(CreateStringlist('<packageId>')))
	set $oldProgFound$ = "true"
endif

if $oldProgFound$ = "true"
	Message "Uninstalling " + $ProductId$ + " ..."

	comment "Start uninstall program"
	ChangeDirectory "%SCRIPTPATH%\files1"
	;----------------------------------------------
	; Delete an installed  OS package out of a list of names:
	; set $installSuccess$ = linuxRemoveOneOf('list of packageIDs')
	; set $exitcode$ = boolToGenericExitcode($installSuccess$)
	;
	; Delete one installed  OS package with a known name:
	; set $exitcode$ = linuxRemoveOnePackage('<packageId>')
	;----------------------------------------------
	if "true" = isGenericExitcodeFatal($exitcode$, "true", $ErrorString$ )
		LogError $ErrorString$
		isfatalerror $ErrorString$
	else
		Comment $ErrorString$
	endif

	endif
endif
----


[[opsi-client-softwintegration-create-opsi-package]]
=== Erstellen eines opsi-Produkt-Pakets

[[opsi-setup-detector-installation]]
==== Installation des opsi-setup-detector, {opsi-package-builder} und opsi-logviewer

// include docu: opsi-setup-detector installation
include::../common/setup-detector-installation.asciidoc[]


// include docu: opsi-logviewer installation
include::../common/opsi-logviewer-installation.asciidoc[]



[[opsi-linclient-softwintegration-tutorial-create-with-opsi-setup-detector]]
==== Das Programm opsi-setup-detector zum Erstellen eines Linux Scriptes

// include docu: opsi-setup-detector
include::../common/setup-detector-use-start.asciidoc[]

// include docu: Linux specific tasks in opsi-setup-detector
include::../common/osd_tasks_Linux.asciidoc[]

Die nun folgenden Screenshots zeigen zwar die Verwendung von Windows-Installer Dateien,
sie sehen aber analog aus bei der Verwendung von Linux Installer Dateien wie *.deb, *.rpm.

// include docu: how to use the opsi-setup-detector
include::../common/osd-task-use-single-analyze-and-create.asciidoc[]

Mehr Details zum `opsi-setup-detector` finden Sie im opsi-manual: +
https://download.uib.de/opsi4.2/documentation/html/opsi-manual-v4.2/opsi-manual-v4.2.html#opsi-setup-detector

// include docu: how to use the opsiPackagebuilder
include::../common/softwintegration-tutorial-packagebuilder-use.asciidoc[]

// include docu: The modify and test cycle
include::../common/softwintegration-tutorial-modify-test-cycle.asciidoc[]




[[opsi-linclient-hints]]
== Allgemeine Hinweise zu Linux


[[opsi-linclient-hints-opsi-files-dirs]]
=== Die opsi Verzeichnisse auf Linux

Wesentliche opsi Verzeichnisse und Dateien auf dem Linux-Client

* /var/log/opsi-script (Log files opsi-script)

* /var/log/opsi-client-agent (sonstige opsi Log files)

* /usr/bin/opsi*  (Kommandozeilen Programme)

* /opt/opsi-script

* /etc/opsi-client-agent (Konfiguration opsi-client-agent)

* /etc/opsi-script (Konfiguration opsi-script)

* /usr/lib (Hilfslibraries z.B. ssl)

* /usr/lib/opsiclientd

* /usr/bin/locale (locale opsi-script)

* /usr/share/opsi-client-agent

* /usr/share/opsi-script

* /usr/share/notifier.d

* /var/lib/opsi-client-agent


[[opsi-linclient-more-info]]
== Weitere Informationen

Das link:https://download.uib.de/opsi_stable/doc/opsi-handbuch-stable-de.pdf[opsi-Handbuch] enthält eine Fülle von weiteren Informationen, die für den produktiven Betrieb wichtig sind.
Wenn Sie ihren opsi-Server produktiv einsetzen empfehlen wir Ihnen besonders sich mit dem Werkzeug 'opsi-backup' vertraut zu linuxhen, um eine Sicherung Ihrer Daten erstellen zu können.

Wenn Sie dort nicht fündig werden oder Hilfe benötigen, wenden Sie sich an link:https://forum.opsi.org[die opsi Community].

Für produktive Installationen empfehlen wir professionelle Unterstützung durch uib im Rahmen eines link:https://uib.de/de/support-schulung/support/[Pflege- und Supportvertrages].

