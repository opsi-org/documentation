////
; Copyright (c) uib gmbh (www.uib.de)
; This documentation is owned by uib
; and published under the german creative commons by-sa license
; see:
; https://creativecommons.org/licenses/by-sa/3.0/de/
; https://creativecommons.org/licenses/by-sa/3.0/de/legalcode
; english:
; https://creativecommons.org/licenses/by-sa/3.0/
; https://creativecommons.org/licenses/by-sa/3.0/legalcode
;
////

:Author:    uib gmbh
:Email:     info@uib.de
:Revision:  4.2
:toclevels: 6
:doctype:   book
//:date:      26.01.2021

// Include common opsi terms
include::../common/opsi_terms.asciidoc[]


= opsi MacOS client manual

// Include common opsi copyright
include::../common/opsi_manual_copyright.asciidoc[]


[[opsi-macclient-introduction]]
== Introduction MacOS Clients in opsi

This manual describes the operation of MacOS clients in opsi.

It's assumed that the installation and startup of an {opsi-server} has already been performed.

Essential topics of this manual:

. Adding and integrating Mac computers in opsi
(Installation of the opsi-mac-client-agent)
. Deployment of opsi standard software for Mac on the opsi-server .
. Installation of standard software on Mac clients
. opsi standard software for Mac under opsi
. Packaging of own software
. Creation of opsi packages
. Notes about Mac clients
.. Special commands for MacOS
.. Directories you may use
.. The pseudo user opsisetupadmin

[[opsi-macclient-convention]]
== Conventions of this document

Commands are highlighted separately:

[source,prompt]
----
this is a command
----

As part of the installation and configuration process, you can copy and execute the commands from these fields in order by _copy & paste_ from this document.

This is an opsi-script code:

[source,winst]
----
Message "Installing "+ $ProductId$ +" ..."
----

Chapters containing the name of a particular platform are specific to that platform. The supported platforms are:

* *Windows*

* *Linux*

* *MacOS*

[[opsi-macclient-requirements]]

== Requirements for MacOS Clients

In the following the requirements for the management of MacOS clients under opsi are described.

The opsi-mac-client-agent is a
http://uib.de/de/opsi-erweiterungen/erweiterungen/[co-funded opsi extension]. +
This means that you need an unlock file to use it. You get this unlock file when you buy the extension. For evaluation purposes we also provide a time limited unlock file for free ( -> mail to info@uib.de). +
Further details can be found in +
https://download.uib.de/opsi_stable/doc/html/opsi-manual/opsi-manual.html#opsi-manual-modules

Technical requirements is an opsi-server with opsi 4.1.

The supported Mac-Clients are:

* MacOS versions from 10.13 to 11.0 +
(`High Sierra` to `Big Sur`) in the intel x64 architecture

* When using the arm64 architecture (Apple Silicon, M1), it's currently necessary to install the opsi-client-agent of the 'Dynamic Binary Translators' called `rosetta2`. You can install this with: +
`softwareupdate --install-rosetta --agree-to-license`
You can verify the successful installation with: +
`pkgutil --pkgs | grep Rosetta` +
`com.apple.pkg.RosettaUpdateAuto`.

Native support for the arm64 architecture (Apple silicon) is planned. The necessary reference devices have been ordered for this purpose. To disclose when the deployment for this platform will take place cannot be made at this time (January 2021).

[[opsi-macclient-installation-config-get-essential-products]]

== Installing the minimal MacOS opsi products.

For the distribution of software with opsi ready products are available for installation.
These contain among other things the agent ('opsi-client-agent'), which must be installed for the management on clients.

There is an automated and a manual way to perform this.
The automated way is recommended.

[[opsi-macclient-std-packages]]
=== opsi standard software for macOS under opsi.

The following products are provided by opsi for macos as standard:

* `opsi-mac-client-agent`
* `swaudit`
* `hwaudit`
* `m-homebrew` (also check: <<opsi-macclient-hints-homebrew, the opsi product m-homebrew>>
* `m-system-update`
* `opsi-configed`
* `opsi-logviewer`
* `opsi-auto-update`
* `m-javavm`

////
* `opsi-client-kiosk`
* `opsi-setup-detector`
* ``
////

[[opsi-macclient-installation-config-get-essential-products-automatic]]

=== Automatic installation of the minimal MacOS opsi products.

For the automatic installation of the opsi products there is the tool `opsi-package-updater`, which is configured in `/etc/opsi/opsi-package-updater.conf` or `/etc/opsi/package-updater.repos.d/` also automatically fetches the current packages from the opsi repository and installs them on the server.

The configuration of the opsi repositories for Mac clients can be found in the directory `/etc/opsi/package-updater.repos.d/` in the files `uib-mac-testing.repo` and `uib-mac.repo`.

If you do not have these files installed yet,
you can find them under: +

####################

Activate the desired repos by setting the entry `active = true` in the choosen *.repo file.

.`/etc/opsi/package-updater.repos.d/uib-mac-testing.repo`

[source,configfile]
----
; This repository provides testing of opsi products to manage MacOS
; clients with opsi.

[repository_uib_macos_testing]
description = opsi macos packages in testing
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/testing/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----


.`/etc/opsi/package-updater.repos.d/uib-mac.repo`

[source,configfile]
----
; This repository provides table opsi roducts for managing MacOS
; clients with opsi.

[repository_uib_macos_stable]
description = opsi macos packages in stable
active = true
baseUrl = http://download.uib.de
dirs = opsi4.1/stable/packages/macos/localboot/
autoInstall = false
autoUpdate = true
autoSetup = false
; Set Proxy handler like: http://10.10.10.1:8080
proxy =
----
Install the packages on the server by running the command as root:

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_stable install
----

or

[source,prompt]
----
opsi-package-updater -v --repo uib_macos_testing install
----

After a successful installation you have to reload all data on the `opsi-configed` to make the new products become visible there.

If the connection has to be routed through a proxy to access the Internet, this must be entered as the value for `proxy` in the `.repo` configuration files under `/etc/opsi/package-updater.repos.d/`.
As of version 4.1.1.33 of opsi-utils, a global proxy can be configured in `/etc/opsi/opsi-package-updater.conf`.

[source,configfile]
----
[repository_uib_macos_stable]
…
proxy =
----

Should packages installed be updated later, this can be done with the following command:
[source,prompt]
----
opsi-package-updater -v update
----

More information about `opsi-package-updater` can be found in the manual.

[[opsi-macclient-installation-config-get-essential-products-manually]]
=== Manual installation of the MacOS opsi products.

Is also the possible to manually download and install the packages.

Get the latest opsi packages in the `.opsi` package format.
You can find the packages at https://download.uib.de/opsi4.1/stable/packages/macos/localboot or at `https://download.uib.de/opsi4.1/testing/packages/macos/localboot`.

We recommend saving the .opsi files to `/var/lib/opsi/repository`.
To ensure that opsiconfd can access the files, `opsi-set-rights /var/lib/opsi/repository` should be run.

After downloading, you need to install the packages on the server using the command `opsi-package-manager -i <package-name>.opsi`.

[[opsi-macclient-firststeps-software-deployment-client-integration]]
== Integration of existing MacOS clients into opsi.

To include existing MacOS clients in opsi, the {opsi-client-agent} must be installed on them.
This can be performed in several ways.
After you have installed the {opsi-client-agent}, as described below, the client will also appear in the client list of the {opsi-configed}, in the case you had not already added it there previously.


Basically, is possible to <<opsi-macclient-firststeps-software-deployment-client-integration-service-setup,run on the client>> or <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,from the server>> to trigger the installation of the agent.

Running the installation directly on the client is appropriate for individual machines.
For a mass deployment of the agent, the <<opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy,opsi-deploy-client-agent>> is generally more suitable.
If the necessary unlocks are available on the Mac clients.

If there is already another way to deploy software, it's also possible to deploy the opsi-client-agent and run the `silent_setup.sh` script included in the package.

Once the agent is installed, existing opsi products can be <<opsi-macclient-firststeps-software-deployment-product-tests,installed>> on these clients.

[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup]]
=== Using service_setup.sh on macOS


[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup1]]
==== Using service_setup.sh on macOS (initial installation).

Due to MacOS security restrictions, the ability to run scripts from mounted shares is limited. Trying to do the following with a share mounted via `Finder` to `/Volumes` (or similar) will therefore fail (depending on the MacOS version).

* Log in to the client.
* Start the terminal program
* For the following commands you need to replace the following placeholders:
** `<username>` with your login name.
** `<mnt>` with a directory name that does not exist yet e.g. 'mnt'.
** `<serviceuser>` with a username that is known on the opsi-server.
** `<servicepass>` with the password of the <serviceuser>. You can also omit `:<servicepass>` together with the mount option `-N`, then you will be prompt to input the password
** `<opsi-server>` the name or IP number of the opsi-server.

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs //<serviceuser>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

without password query

[source,prompt]
----
sudo su
cd /Users/<username>
mkdir <mnt>
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /Users/<username>/<mnt>
cd /Users/<username>/<mnt>/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/<username>/<mnt>
----

Example:

[source,prompt]
----
sudo su
cd /Users/uib
mkdir mnt
mount_smbfs  //adminuser@sepia/opsi_depot /Users/uib/mnt
cd /Users/uib/mnt/opsi-mac-client-agent
./service_setup.sh
cd
umount /Users/uib/mnt
----

. Start from the mounted share the script `opsi-mac-client-agent\service_setup.sh` +.
Confirm with 2 x Enter
. The script copies the necessary files into a temporary local directory and then starts opsi-script for the actual installation.
. The script contacts the server via opsi webservice to create the client on the server side and to find out the pckey. This is done first with the user/password combination entered in config.ini. If this fails, a login window appears with service URL ({opsi-configserver}), user name and password. Here is needed a user whom is a member of the group 'opsiadmin'. It is possible to also operate with a user which is only allowed to execute the method `host_createOpsiClient`.

CAUTION: The client reboots after the installation.

[[opsi-macclient-firststeps-software-deployment-client-integration-service-setup2]]
==== Using service_setup.sh on macOS (repair installation).

* Log in to the client.
* Start the terminal program
* For the following commands you need to replace the following placeholders:
** `<serviceuser>` with a username known on the opsi-server.
** `<servicepass>` with the password of the <serviceuser>. You can also omit `:<servicepass>`, then you will be asked for the password
** `<opsi-server>` with the name or IP number of the opsi server.
* During the first installation opsi created a hidden pseudo user named opsisetupadmin, in whose `home directory` `/var/opsisetupadmin` is also the mount directory.

[source,prompt]
----
sudo su
mount_smbfs -N //<serviceuser>:<servicepass>@<opsi-server>/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----

Example:

[source,prompt]
----
sudo su
mount_smbfs -N //adminuser:linux123@sepia/opsi_depot /var/opsisetupadmin/opsi_depot
cd /var/opsisetupadmin/opsi_depot/opsi-mac-client-agent
./service_setup.sh
cd
umount /var/opsisetupadmin/opsi_depot
----


. Start the script `opsi-mac-client-agent\service_setup.sh` +
Confirm with 2 x Enter
. The script copies the necessary files into a temporary local directory and then starts the opsi-script for the actual installation.
. The script contacts the server via opsi webservice to create the client on the server side and to find out the pckey. This is done first with the user/password combination entered in config.ini. If this fails, a login window appears with the corresponding service URL ({opsi-configserver}), user name and password. Here is needed a user whom is a member of the group 'opsiadmin'. Is also possible to utilize a user, which is only allowed to execute the method `host_createOpsiClient`.

CAUTION: The client needs a reboot after the installation to become active. +
The reboot is *not* triggered automatically.

[[opsi-macclient-firststeps-software-deployment-client-integration-opsi-deploy]]
=== Using opsi-deploy-client-agent for macOS.

The `opsi-deploy-client-agent` script deploys the {opsi-client-agent} directly from the {opsi-server} to the clients.
It's easy to integrate a large number of clients from the server into an opsi environment.
As a prerequisite for the clients is needed:

* an activated ssh access

Unfortunately on MacOS the ssh accesses are deactivated by default.
To use the `opsi-deploy-client-agent` command these accesses must be first activated.

This can be performed interactively in the 'System preferences / sharing':

image::macos_sharing_ssh_login.png["Activating ssh access",width=300]

On the command line, this can be done as follows:

[source,prompt]
----
sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist
----

A checkup of the current status of the ssh access is possible with the command:

[source,prompt]
----
sudo systemsetup -getremotelogin
----

Disabling ssh access on the command line looks like this:

[source,prompt]
----
sudo launchctl unload /System/Library/LaunchDaemons/ssh.plist
----

The `opsi-deploy-client-agent` script can be found at `/var/lib/opsi/depot/opsi-client-agent` +
Run the script with 'root' privileges.
If the script is not executable, you can fix this problem with the following command: +
`opsi-set-rights /var/lib/opsi/depot/opsi-client-agent/opsi-deploy-client-agent`

The script creates the client on the server side, copies the installation files and configuration information, such as the pckey, to the client and starts the installation there. +
The installation runs in the background without any interaction from user and transparently.

The command `opsi-deploy-client-agent` has several call parameters. +
All following examples assume that you have switched to the root directory of the opsi-client-agent product: +

[source,prompt]
----
cd /var/lib/opsi/depot/opsi-mac-client-agent
----

Typical calls are:

* For a single client:

[source,prompt]
----
./opsi-deploy-client-agent -v --user=uib uib-mmini1
----

Results in the following output:

[source,ini]
----
Password is required for deployment.
Password:
[5] [2021-02-04 16:43:43.121] [               ] Starting deployment to host uib-mmini1.uib.local   (posix.py:84)
[5] [2021-02-04 16:43:43.121] [               ] Querying for ip address of host uib-mmini1.uib.local   (common.py:158)
[5] [2021-02-04 16:43:43.122] [               ] Got ip address 192.168.10.70 from syscall   (common.py:167)
[5] [2021-02-04 16:43:43.123] [               ] Pinging host 192.168.10.70 ...   (common.py:183)
[5] [2021-02-04 16:43:44.146] [               ] Host 192.168.10.70 is up   (common.py:194)
[5] [2021-02-04 16:43:44.153] [               ] Patching config.ini   (posix.py:91)
[5] [2021-02-04 16:43:44.157] [               ] Copying installation scripts...   (posix.py:107)
[5] [2021-02-04 16:43:48.316] [               ] Running installation script...   (posix.py:147)
[5] [2021-02-04 16:43:53.382] [               ] opsi-client-agent successfully installed on uib-mmini1.uib.local   (posix.py:176)
[5] [2021-02-04 16:43:53.395] [               ] Restarting opsiclientd service on computer: uib-mmini1   (posix.py:331)
[5] [2021-02-04 16:43:55.620] [               ] 1/1 deployments successfully   (__init__.py:210)
----

* For a list of clients:

[source,prompt]
----
./opsi-deploy-client-agent -v --user=uib --hosts-from-file HOSTFILE.TXT  --skip-existing-clients
----

Here HOSTFILE.TXT is a file with one client name (FQDN) per line. As long as the clients are not known to the opsi-server, it tries to install the `opsi-mac-client-agent` on this machine

* Display all command line parameters:

[source,prompt]
----
./opsi-deploy-client-agent --help
----


[[opsi-macclient-firststeps-software-deployment-product-tests]]
== Rollout of existing products to MacOS.

For the deployment of software to clients, the 'opsi-client-agent' must be installed on them.
This can be rolled out on <<opsi-macclient-firststeps-software-deployment-client-integration,existing-machines>>.


Subsequently, the <<opsi-macclient-firststeps-software-deployment-product-tests-configed,{opsi-configed}>> management interface is used to deploy software to clients.

[[opsi-macclient-firststeps-software-deployment-product-tests-inventory]]
=== Inventory with the localboot products hwaudit and swaudit.

In '{opsi-configed}', 'Client configuration' mode, under the 'Clients' tab, select the client under consideration.

If not already performed, update the {opsi-configed}'s dataset using 'Reload File/Data' or clicking the corresponding icon.

Go to the 'Product configuration' tab, click in the 'Requested' column for the +hwaudit+ product, this will open a list/dropdown menu and there select the 'setup' action. Repeat this for the +swaudit+ product.

The check mark in the icon menu bar should change its color to red. If you click it, the new settings will be transmitted to the {opsi-server}, afterwards its color will be green again.

Then restart the client.
It should now start the +opsi-client-agent+ and install the +hwaudit+ and +swaudit+ products.
With +hwaudit+ and +swaudit+, hardware and software information, respectively, is collected and transmitted to the {opsi-server}.
The collected information is displayed under the 'Hardware Information' and 'Software Inventory' tabs, respectively.

[[opsi-macclient-firststeps-software-deployment-product-tests-homebrew]]
=== Distribution of opsi standard products: m-homebrew.

This product installs the package management program `homebrew` which is used by several other opsi products for MacOS, e.g. to install Java.

See also: <<opsi-macclient-hints-homebrew, The opsi product m-homebrew>>.

In '{opsi-configed}', 'Client configuration' mode, select the client in question under the 'Clients' tab.

Switch to the 'Product Configuration' tab, click in the 'Requested' column for the +m-homebrew+ product, this will open a list/dropdown menu and there select the 'setup' action.

The check mark in the icon menu bar should change its color to red. If you click on it, the new settings will be transmitted to the {opsi-server}, afterwards its color will be green again.

Then restart the client or push the installation via 'on_demand'.
It should now start the +opsi-client-agent+ and install the +m-homebrew+ product.

[[opsi-macclient-firststeps-software-deployment-product-tests-java]]
=== Distribution of opsi standard products: m-javavm

This product installs the Java Runtime Environment which is used by several other opsi products for MacOS, e.g. opsi-configed, opsi-logviewer.

In '{opsi-configed}', mode 'Client configuration', select the client under the tab 'Clients'.

Switch to the 'Product Configuration' tab, click in the 'Requested' column for the +m-javavm+ product, this will open a list/dropdown menu and there please select the 'setup' action.

The check mark in the icon menu bar should change its color to red. If you click on it, the new settings will be transmitted to the {opsi-server}, afterwards its color will be green again.

Then restart the client or push the installation via 'on_demand'.
It should now start the +opsi-client-agent+ and install the +m-javavm+ product.

[[opsi-macclient-firststeps-software-deployment-product-tests-configed]]
=== Distribution of opsi standard products: opsi-configed.

Attention: m-homebrew and m-javavm must be already installed!

To the standard products belongs the product `opsi-configed` which installs the opsi management interface as application on a computer.
Because this application is a Java application, a JavaRE is included.

In the '{opsi-configed}', mode 'Client configuration', under the tab 'Clients' select the concerning client.

If not already done, update the {opsi-configed}'s dataset using 'Reload File/Data' by clicking the corresponding icon.

Switch to the 'Product configuration' tab, click in the 'Requested' column for the +opsi-configed+ product, this will open a list/dropdown menu and there select the 'setup' action.

The check mark in the icon menu bar should change its color to red. If you click it, the new settings will be transmitted to the {opsi-server}, afterwards its color will be green again.

Then restart the client.
It should now start the +opsi-client-agent+ and install the +opsi-configed+ product.
After the installation is finished you should find the item `opsi-configed` under `Applications`.

[[opsi-macclient-softwintegration]]
== Integration of own software into the software distribution of opsi.

The installation of software in opsi is performed by the {opsi-client-agent} and specially by the script controlled setup program {opsi-script}. Therefore an {opsi-script} script must be created for each opsi product. Afterwards this script, as well as the installation files and metadata are packed into an opsi product, which can finally be installed on the {opsi-server}.

[[opsi-macclient-softwintegration-tutorial]]
=== A small tutorial on how to create an {opsi-script} script.


include::../common/softwintegration-tutorial-introduction.asciidoc[]

[[opsi-macclient-softwintegration-tutorial-general]]
==== Methods of non-interactive software installation on macOS.

Apple (unlike Microsoft) standardized its software installation methods very early on. In essence, there are two methods:

* *application Directory*: +
This is a directory according to the pattern:
`<application name>.app` However, such a directory is not displayed in the `Finder` as a directory, but as an `application`. Inside this directory, according to a pattern, the files of the application must be located. A typical structure would be:

----
opsi-script-gui.app
  |--Contents
       |-Info.plist
       |-PkgInfo
       |-MacOS
       |  |-opsi-script-gui
       |
       |-Resources
          |- (....)
----

Such a directory must only be copied into the path `/Applications` for installation. Possible files in the directory `MacOS` must be made executable. +
Such *.app directories are usually offered packed for download.

* *PKG file*: +
These files contain software which need to be installed by a special command.

In both cases an `unattended` (i.e. non-interactive) installation is not an issue.

Often MacOS software is offered in packed formats like *.zip, *.dmg
or also *.tgz.

All variants mentioned so far can be installed directly by opsi-script, except *.tgz which must be unpacked before.

include::../common/softwintegration-tutorial-script-structure-opsi-script-basics.asciidoc[]
//
[[opsi-macclient-softwintegration-tutorial-macos-special-commands]]
===== Special commands for MacOS

* GetOS // returns: Linux or Windows_NT or macos [W/L/M]

* getMacosVersionInfo [M]

* getMacosVersionMap [M]

See also: +
https://download.uib.de/opsi_stable/doc/html/opsi-script-manual/opsi-script-manual.html#opsi-winst-macos-functions

In the following chapters special opsi MacOS commands to install software are presented, which come from the opsi-script library `uib_macosinstalllib`. This documentation is in English because it was automatically generated directly from the source code.

// http://www.methods.co.nz/asciidoc/userguide.html#X90
:leveloffset: 4

// Include os-lib_uib_macosinstalllib.asciidoc

include::../../en/common/os-lib_uib_macosinstalllib.asciidoc[]

:leveloffset: 0

[[opsi-macclient-softwintegration-tutorial-template]]
==== Third example: MacOS template 'm-opsi-template'.

You can create this template with the `opsi-setup-detector`.


.setup.opsiscript: Installationsscript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; ----------------------------------------------------------------
encoding=utf8

[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

DefVar $ProductId$
DefVar $InstallDir$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $oldProgFound$
DefVar $installSuccess$


; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "%scriptpath%\osd-lib.opsiscript"
importlib "%scriptpath%\uib_macosinstalllib.opsiscript"


; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a seperator
Set $ProductId$		 = "m-opsi-template"
Set $MinimumSpace$	 = "1 MB"
; the path were we find the product after the installation
;Set $InstallDir$		= "/Applications/<path to the product>"
Set $InstallDir$		= "/Applications/<productid.app>"
Set $LicenseRequired$ = "false"
Set $LicensePool$	  = ""
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "macos"))
	logError "Installation aborted: wrong OS version: only MacOS"
	isFatalError "wrong OS"
endif

comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

Message "Installing " + $ProductId$ + " ..."

if $LicenseRequired$ = "true"
	comment "Licensing required, reserve license and get license key"
	set $LicenseKey$ = get_licensekey_byPool($LicensePool$)
endif


comment "Start setup "
ChangeDirectory "%SCRIPTPATH%/files1"
;----------------------------------------------
set $installSuccess$ = install_macos_generic("%SCRIPTPATH%/files1/<my macos install file>")
;----------------------------------------------
Sub_check_installSuccess


comment "Copy files"
Files_install

[Sub_check_installSuccess]
if $installSuccess$  = "false"
	LogError "Installation failed"
	isfatalerror "Installation failed"
else
	Comment "Installation success"
endif


[Files_install]
; Example of recursively copying some files into the installation directory:
;
; copy -s "%ScriptPath%\files\*.*" "$InstallDir$"
----

.delsub.opsiscript: Ausgelagerte Deinstallations-Sub-Sektion
[source,winst]
----
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib gmbh
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8

Message "Check for existing installation of " + $ProductId$ + " ..."

comment "Start the Uninstall check:"
set $oldProgFound$ = "false"
if directoryExists($InstallDir$)
	set $oldProgFound$ = "true"
endif

if $oldProgFound$ = "true"
	Message "Uninstalling " + $ProductId$ + " ..."
	if not(($InstallDir$ = '') or ($InstallDir$ = 'unknown') or ($InstallDir$ = '/Applications/'))
		Files_uninstall
	endif
endif


[Files_uninstall]
del -sf "$InstallDir$\"

;-----------------------------------------------------

[Linkfolder_remove_desktop_icon]
; check delete_element
set_basefolder common_desktopdirectory
set_subfolder ""
delete_element $productId$

;-----------------------------------------------------
----

.uninstall.opsiscript: Deinstallations-Skript
[source,winst]
----
; ----------------------------------------------------------------
; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the Affero General Public License v3.
; ----------------------------------------------------------------
encoding=utf8


[Actions]
requiredWinstVersion >= "4.12.0.28"
ScriptErrorMessages = false

DefVar $ProductId$
DefVar $InstallDir$
DefVar $MinimumSpace$
DefVar $ExitCode$
DefVar $ErrorString$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $OS$
DefVar $oldProgFound$


; import complete file !
importlib "uib_exitcode.opsiscript"
importlib "%scriptpath%\osd-lib.opsiscript"


; ----------------------------------------------------------------
; $ProductId$ is the name of the product in opsi, only lower letters, no umlauts, no white spaces, use '-' as a separator
Set $ProductId$		 = "m-opsi-template"
; the path were we find the product after the installation
;Set $InstallDir$	= "/Applications/<product.app>"
Set $InstallDir$	= "unknown"
Set $LicenseRequired$ = "False"
Set $LicensePool$	  = ""
; ----------------------------------------------------------------

set $OS$ = GetOS

if not(($OS$ = "macos"))
	logError "Installation aborted: wrong OS version: only macos"
	isFatalError "wrong OS"
endif


comment "Show product picture"
ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$



Message "Uninstalling " + $ProductId$ + " ..."

if FileExists("%ScriptPath%\delsub.opsiscript")
	comment "Start uninstall sub section"
	Sub "%ScriptPath%\delsub.opsiscript"
endif

if $LicenseRequired$ = "true"
	comment "Licensing required, free license used"
	Sub_free_license
endif

[Sub_free_license]
comment "License management is enabled and will be used"

comment "Trying to free license used for the product"
DefVar $result$
Set $result$ = FreeLicense($LicensePool$)
; If there is an assignment of a license pool to the product, it is possible to use
; Set $result$ = FreeLicense("", $ProductId$)
;
; If there is an assignment of a license pool to a windows software id, it is possible to use
; DefVar $WindowsSoftwareId$
; $WindowsSoftwareId$ = "..."
; set $result$ = FreeLicense("", "", $WindowsSoftwareId$)
----

[[opsi-macclient-softwintegration-create-opsi-package]]
=== Create an opsi product package

[[opsi-setup-detector-installation]]
==== Installation of the opsi-setup-detector, {opsi-package-builder} and opsi-logviewer

// include docu: opsi-setup-detector installation
include::../common/setup-detector-installation.asciidoc[]


// include docu: opsi-logviewer installation
include::../common/opsi-logviewer-installation.asciidoc[]



[[opsi-macclient-softwintegration-tutorial-create-with-opsi-setup-detector]]
==== The opsi-setup-detector program to create a MacOS script.

// include docu: opsi-setup-detector
include::../common/setup-detector-use-start.asciidoc[]

// include docu: macos specific tasks in opsi-setup-detector
include::../common/osd_tasks_macos.asciidoc[]

The following screenshots show the use of Windows installer files,
but they look similar when using MacOS installer files like *.app, *.dmg, *.zip.

// include docu: how to use the opsi-setup-detector
include::../common/osd-task-use-single-analyze-and-create.asciidoc[]

More details about the `opsi-setup-detector` can be found in the opsi-manual: +
https://download.uib.de/opsi4.1/documentation/html/opsi-manual-v4.1/opsi-manual-v4.1.html#opsi-setup-detector

// include docu: how to use the opsiPackagebuilder
include::../common/softwintegration-tutorial-packagebuilder-use.asciidoc[]

// include docu: The modify and test cycle
include::../common/softwintegration-tutorial-modify-test-cycle.asciidoc[]




[[opsi-macclient-hints]]
== General notes about MacOS

[[opsi-macclient-hints-keyboard]]
=== The Keyboard under MacOS

include::mac_keyboard_hint.asciidoc[]

[[opsi-macclient-hints-homebrew]]
=== The opsi product m-homebrew

There are a number of package management programs for MacOS, which allow to provide common Unix programs under MacOS. Typical examples of this package management programs are:

* 'homebrew' (https://brew.sh/)

* 'macport' (https://www.macports.org/)

* 'fink' (https://finkproject.org/)

The opsi product `m-homebrew` installs the `homebrew` system on a MacOS system.

`homebrew` installs the command `brew` on the system, which allows then programs to be downloaded from the Internet. Either a binary is installed directly or the sources are downloaded and the program is compiled on the machine. Therefore `homebrew` also needs the development command line tools to compile programs (`xcode-select --install`).

For security reasons `homebrew` is conceived to *not be executed as root*, but only with user rights. To ensure this in the opsi context a hidden user named `opsisetupadmin` is created during the installation of the `opsi-client-agent` (see also <<opsi-macclient-hints-opsisetupadmin, The MacOS pseudo user opsisetupadmin>>). +
This user owns the whole `homebrew` system on the machine and therefore, only this user should be used to perform the installation of software on the machine via the `brew` command. +
I.e. The `brew` command should be executed as root as follows:

[source,winst]
----
sudo -H -u opsisetupadmin /usr/local/bin/brew
----

For example, the installation of Java in the product `m-javavm` is implemented as follows:

[source,winst]
----
[ShellInAnIcon_brew_install_java]
; https://github.com/SAP/SapMachine/wiki/Installation
EXITCODE=0
sudo -H -u opsisetupadmin /usr/local/bin/brew tap sap/sapmachine
EC=$?; if [ $EC -ne 0 ]; then EXITCODE=$EC; fi
sudo -H -u opsisetupadmin /usr/local/bin/brew install --cask sapmachine-jdk
EC=$?; if [ $EC -ne 0 ]; then EXITCODE=$EC; fi
exit $EXITCODE
----
To find out if the installation of a desired product is supported via `homebrew`, it is best to use the following website: +
https://formulae.brew.sh/

Helpful links for `homebrew`: +
https://formulae.brew.sh/

Additional helpful Links for `homebrew`: +
https://docs.brew.sh/ +
https://devhints.io/homebrew


[[opsi-macclient-hints-opsisetupadmin]]
=== The MacOS pseudo user opsisetupadmin

When installing the `opsi-client-agent` a 'hidden user' named `opsisetupadmin` is created. This user has no password and cannot be used for login.

The home directory of this user is `/var/lib/opsisetupadmin`.

This user is employed for the following purposes:

* Operating the `homebrew` system (see <<opsi-macclient-hints-homebrew, The opsi product m-homebrew>>.

* The directory `/var/lib/opsisetupadmin/opsi_depot` is the mount point on which the opsiclientd mounts the depotshare. +
This is done since access to network shares not mounted in a user directory are very limited.

[[opsi-macclient-hints-opsi-files-dirs]]
=== The opsi directories on MacOS

Essential opsi directories and files on the MacOS client

* /var/log/opsi-script (Log files opsi-script)

* /var/log/opsi-client-agent (other opsi Log files)

* /usr/local/bin/opsi*  (Command line programs)

* /Applications/opsi-script-gui.app

* /Applications/opsi-notifier.app

* /etc/opsi-client-agent (Configuration opsi-client-agent)

* /etc/opsi-script (Configuration opsi-script)

* /usr/local/lib (Help libraries e.g. ssl)

* /usr/local/lib/opsiclientd

* /usr/local/bin/locale (local opsi-script)

* /usr/local/share/opsi-client-agent

* /usr/local/share/opsi-script

* /usr/local/share/notifier.d

* /var/opsisetupadmin (Home directory opsisetupadmin)

* /var/lib/opsi-client-agent

* /Library/LaunchDaemons/ (Start configuration for opsi deamons)

* /Library/LaunchAgents/ (Start configuration for opsi-systray)






[[opsi-macclient-hints-directories]]
=== MacOS directory structure with 'go' and 'nogo'.

MacOS is based on BSD-Unix and has a typical Unix file system structure.
However, due to security reasons, there are several areas that are exclusively reserved for Apple and a few other specifics that are important for the person doing the packaging work:

* `/Applications` +
This is the directory where the graphical applications are located. An application consists of a directory <Application name>.app. Such a directory is not shown in the `Finder` as a directory, but as an 'Application'. Inside this directory the files of the application must be located according to a certain specific pattern.

* `/sbin`, `/bin`, `/usr/bin`, `/usr/share`, `/usr/lib` +
These are `apple only` directories into which nobody else is allowed to copy anything. Use instead the `local` variants: +
`/usr/local/bin`, `/usr/local/share`, `/usr/local/lib`

[[opsi-macclient-more-info]]
== Additional informations

The link:https://download.uib.de/opsi_stable/doc/opsi-manual-stable-en.pdf[opsi Manual] contains further information, which are important for the productive operation.
If you use your {opsi-server} productively we especially recommend to get familiar with the tool 'opsi-backup' to be able to create a backup of your data.

If you don't find what you are looking for there or if you need help, please contact link:https://forum.opsi.org[die opsi Community].

For productive installations we recommend professional support by uib within the framework of a link:https://www.uib.de/en/support-training/support[maintenance and support contract].
